// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/proposal"
	"backend/ent/skill"
	"backend/ent/task"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Proposal is the model entity for the Proposal schema.
type Proposal struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// AllocatedDuration holds the value of the "allocated_duration" field.
	AllocatedDuration int `json:"allocated_duration,omitempty"`
	// AchievedDuration holds the value of the "achieved_duration" field.
	AchievedDuration int `json:"achieved_duration,omitempty"`
	// Status holds the value of the "status" field.
	Status proposal.Status `json:"status,omitempty"`
	// ScheduledFor holds the value of the "scheduled_for" field.
	ScheduledFor time.Time `json:"scheduled_for,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProposalQuery when eager-loading is set.
	Edges           ProposalEdges `json:"edges"`
	skill_proposals *int
	task_proposals  *int
	selectValues    sql.SelectValues
}

// ProposalEdges holds the relations/edges for other nodes in the graph.
type ProposalEdges struct {
	// Task holds the value of the task edge.
	Task *Task `json:"task,omitempty"`
	// Skill holds the value of the skill edge.
	Skill *Skill `json:"skill,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// TaskOrErr returns the Task value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProposalEdges) TaskOrErr() (*Task, error) {
	if e.loadedTypes[0] {
		if e.Task == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: task.Label}
		}
		return e.Task, nil
	}
	return nil, &NotLoadedError{edge: "task"}
}

// SkillOrErr returns the Skill value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProposalEdges) SkillOrErr() (*Skill, error) {
	if e.loadedTypes[1] {
		if e.Skill == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: skill.Label}
		}
		return e.Skill, nil
	}
	return nil, &NotLoadedError{edge: "skill"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Proposal) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case proposal.FieldID, proposal.FieldAllocatedDuration, proposal.FieldAchievedDuration:
			values[i] = new(sql.NullInt64)
		case proposal.FieldName, proposal.FieldStatus:
			values[i] = new(sql.NullString)
		case proposal.FieldScheduledFor, proposal.FieldCreatedAt, proposal.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case proposal.ForeignKeys[0]: // skill_proposals
			values[i] = new(sql.NullInt64)
		case proposal.ForeignKeys[1]: // task_proposals
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Proposal fields.
func (pr *Proposal) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case proposal.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int(value.Int64)
		case proposal.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pr.Name = value.String
			}
		case proposal.FieldAllocatedDuration:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field allocated_duration", values[i])
			} else if value.Valid {
				pr.AllocatedDuration = int(value.Int64)
			}
		case proposal.FieldAchievedDuration:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field achieved_duration", values[i])
			} else if value.Valid {
				pr.AchievedDuration = int(value.Int64)
			}
		case proposal.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				pr.Status = proposal.Status(value.String)
			}
		case proposal.FieldScheduledFor:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field scheduled_for", values[i])
			} else if value.Valid {
				pr.ScheduledFor = value.Time
			}
		case proposal.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pr.CreatedAt = value.Time
			}
		case proposal.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pr.UpdatedAt = value.Time
			}
		case proposal.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field skill_proposals", value)
			} else if value.Valid {
				pr.skill_proposals = new(int)
				*pr.skill_proposals = int(value.Int64)
			}
		case proposal.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field task_proposals", value)
			} else if value.Valid {
				pr.task_proposals = new(int)
				*pr.task_proposals = int(value.Int64)
			}
		default:
			pr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Proposal.
// This includes values selected through modifiers, order, etc.
func (pr *Proposal) Value(name string) (ent.Value, error) {
	return pr.selectValues.Get(name)
}

// QueryTask queries the "task" edge of the Proposal entity.
func (pr *Proposal) QueryTask() *TaskQuery {
	return NewProposalClient(pr.config).QueryTask(pr)
}

// QuerySkill queries the "skill" edge of the Proposal entity.
func (pr *Proposal) QuerySkill() *SkillQuery {
	return NewProposalClient(pr.config).QuerySkill(pr)
}

// Update returns a builder for updating this Proposal.
// Note that you need to call Proposal.Unwrap() before calling this method if this Proposal
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Proposal) Update() *ProposalUpdateOne {
	return NewProposalClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the Proposal entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Proposal) Unwrap() *Proposal {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Proposal is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Proposal) String() string {
	var builder strings.Builder
	builder.WriteString("Proposal(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("name=")
	builder.WriteString(pr.Name)
	builder.WriteString(", ")
	builder.WriteString("allocated_duration=")
	builder.WriteString(fmt.Sprintf("%v", pr.AllocatedDuration))
	builder.WriteString(", ")
	builder.WriteString("achieved_duration=")
	builder.WriteString(fmt.Sprintf("%v", pr.AchievedDuration))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", pr.Status))
	builder.WriteString(", ")
	builder.WriteString("scheduled_for=")
	builder.WriteString(pr.ScheduledFor.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pr.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Proposals is a parsable slice of Proposal.
type Proposals []*Proposal
