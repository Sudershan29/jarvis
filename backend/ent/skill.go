// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/skill"
	"backend/ent/user"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Skill is the model entity for the Skill schema.
type Skill struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Level holds the value of the "level" field.
	Level string `json:"level,omitempty"`
	// Progress holds the value of the "progress" field.
	Progress int `json:"progress,omitempty"`
	// Duration holds the value of the "duration" field.
	Duration int `json:"duration,omitempty"`
	// DurationAchieved holds the value of the "duration_achieved" field.
	DurationAchieved int `json:"duration_achieved,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SkillQuery when eager-loading is set.
	Edges        SkillEdges `json:"edges"`
	user_skills  *int
	selectValues sql.SelectValues
}

// SkillEdges holds the relations/edges for other nodes in the graph.
type SkillEdges struct {
	// Categories holds the value of the categories edge.
	Categories []*Category `json:"categories,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// TimePreferences holds the value of the time_preferences edge.
	TimePreferences []*TimePreference `json:"time_preferences,omitempty"`
	// Proposals holds the value of the proposals edge.
	Proposals []*Proposal `json:"proposals,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// CategoriesOrErr returns the Categories value or an error if the edge
// was not loaded in eager-loading.
func (e SkillEdges) CategoriesOrErr() ([]*Category, error) {
	if e.loadedTypes[0] {
		return e.Categories, nil
	}
	return nil, &NotLoadedError{edge: "categories"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SkillEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// TimePreferencesOrErr returns the TimePreferences value or an error if the edge
// was not loaded in eager-loading.
func (e SkillEdges) TimePreferencesOrErr() ([]*TimePreference, error) {
	if e.loadedTypes[2] {
		return e.TimePreferences, nil
	}
	return nil, &NotLoadedError{edge: "time_preferences"}
}

// ProposalsOrErr returns the Proposals value or an error if the edge
// was not loaded in eager-loading.
func (e SkillEdges) ProposalsOrErr() ([]*Proposal, error) {
	if e.loadedTypes[3] {
		return e.Proposals, nil
	}
	return nil, &NotLoadedError{edge: "proposals"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Skill) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case skill.FieldID, skill.FieldProgress, skill.FieldDuration, skill.FieldDurationAchieved:
			values[i] = new(sql.NullInt64)
		case skill.FieldName, skill.FieldLevel:
			values[i] = new(sql.NullString)
		case skill.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case skill.ForeignKeys[0]: // user_skills
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Skill fields.
func (s *Skill) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case skill.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case skill.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				s.Name = value.String
			}
		case skill.FieldLevel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field level", values[i])
			} else if value.Valid {
				s.Level = value.String
			}
		case skill.FieldProgress:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field progress", values[i])
			} else if value.Valid {
				s.Progress = int(value.Int64)
			}
		case skill.FieldDuration:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field duration", values[i])
			} else if value.Valid {
				s.Duration = int(value.Int64)
			}
		case skill.FieldDurationAchieved:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field duration_achieved", values[i])
			} else if value.Valid {
				s.DurationAchieved = int(value.Int64)
			}
		case skill.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case skill.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_skills", value)
			} else if value.Valid {
				s.user_skills = new(int)
				*s.user_skills = int(value.Int64)
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Skill.
// This includes values selected through modifiers, order, etc.
func (s *Skill) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryCategories queries the "categories" edge of the Skill entity.
func (s *Skill) QueryCategories() *CategoryQuery {
	return NewSkillClient(s.config).QueryCategories(s)
}

// QueryUser queries the "user" edge of the Skill entity.
func (s *Skill) QueryUser() *UserQuery {
	return NewSkillClient(s.config).QueryUser(s)
}

// QueryTimePreferences queries the "time_preferences" edge of the Skill entity.
func (s *Skill) QueryTimePreferences() *TimePreferenceQuery {
	return NewSkillClient(s.config).QueryTimePreferences(s)
}

// QueryProposals queries the "proposals" edge of the Skill entity.
func (s *Skill) QueryProposals() *ProposalQuery {
	return NewSkillClient(s.config).QueryProposals(s)
}

// Update returns a builder for updating this Skill.
// Note that you need to call Skill.Unwrap() before calling this method if this Skill
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Skill) Update() *SkillUpdateOne {
	return NewSkillClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Skill entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Skill) Unwrap() *Skill {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Skill is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Skill) String() string {
	var builder strings.Builder
	builder.WriteString("Skill(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("name=")
	builder.WriteString(s.Name)
	builder.WriteString(", ")
	builder.WriteString("level=")
	builder.WriteString(s.Level)
	builder.WriteString(", ")
	builder.WriteString("progress=")
	builder.WriteString(fmt.Sprintf("%v", s.Progress))
	builder.WriteString(", ")
	builder.WriteString("duration=")
	builder.WriteString(fmt.Sprintf("%v", s.Duration))
	builder.WriteString(", ")
	builder.WriteString("duration_achieved=")
	builder.WriteString(fmt.Sprintf("%v", s.DurationAchieved))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Skills is a parsable slice of Skill.
type Skills []*Skill
