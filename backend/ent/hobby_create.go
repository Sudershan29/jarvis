// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/category"
	"backend/ent/hobby"
	"backend/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// HobbyCreate is the builder for creating a Hobby entity.
type HobbyCreate struct {
	config
	mutation *HobbyMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (hc *HobbyCreate) SetName(s string) *HobbyCreate {
	hc.mutation.SetName(s)
	return hc
}

// SetDescription sets the "description" field.
func (hc *HobbyCreate) SetDescription(s string) *HobbyCreate {
	hc.mutation.SetDescription(s)
	return hc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (hc *HobbyCreate) SetNillableDescription(s *string) *HobbyCreate {
	if s != nil {
		hc.SetDescription(*s)
	}
	return hc
}

// SetCreatedAt sets the "created_at" field.
func (hc *HobbyCreate) SetCreatedAt(t time.Time) *HobbyCreate {
	hc.mutation.SetCreatedAt(t)
	return hc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (hc *HobbyCreate) SetNillableCreatedAt(t *time.Time) *HobbyCreate {
	if t != nil {
		hc.SetCreatedAt(*t)
	}
	return hc
}

// AddCategoryIDs adds the "categories" edge to the Category entity by IDs.
func (hc *HobbyCreate) AddCategoryIDs(ids ...int) *HobbyCreate {
	hc.mutation.AddCategoryIDs(ids...)
	return hc
}

// AddCategories adds the "categories" edges to the Category entity.
func (hc *HobbyCreate) AddCategories(c ...*Category) *HobbyCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return hc.AddCategoryIDs(ids...)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (hc *HobbyCreate) SetUserID(id int) *HobbyCreate {
	hc.mutation.SetUserID(id)
	return hc
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (hc *HobbyCreate) SetNillableUserID(id *int) *HobbyCreate {
	if id != nil {
		hc = hc.SetUserID(*id)
	}
	return hc
}

// SetUser sets the "user" edge to the User entity.
func (hc *HobbyCreate) SetUser(u *User) *HobbyCreate {
	return hc.SetUserID(u.ID)
}

// Mutation returns the HobbyMutation object of the builder.
func (hc *HobbyCreate) Mutation() *HobbyMutation {
	return hc.mutation
}

// Save creates the Hobby in the database.
func (hc *HobbyCreate) Save(ctx context.Context) (*Hobby, error) {
	hc.defaults()
	return withHooks(ctx, hc.sqlSave, hc.mutation, hc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (hc *HobbyCreate) SaveX(ctx context.Context) *Hobby {
	v, err := hc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hc *HobbyCreate) Exec(ctx context.Context) error {
	_, err := hc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hc *HobbyCreate) ExecX(ctx context.Context) {
	if err := hc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hc *HobbyCreate) defaults() {
	if _, ok := hc.mutation.CreatedAt(); !ok {
		v := hobby.DefaultCreatedAt()
		hc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hc *HobbyCreate) check() error {
	if _, ok := hc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Hobby.name"`)}
	}
	if _, ok := hc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Hobby.created_at"`)}
	}
	return nil
}

func (hc *HobbyCreate) sqlSave(ctx context.Context) (*Hobby, error) {
	if err := hc.check(); err != nil {
		return nil, err
	}
	_node, _spec := hc.createSpec()
	if err := sqlgraph.CreateNode(ctx, hc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	hc.mutation.id = &_node.ID
	hc.mutation.done = true
	return _node, nil
}

func (hc *HobbyCreate) createSpec() (*Hobby, *sqlgraph.CreateSpec) {
	var (
		_node = &Hobby{config: hc.config}
		_spec = sqlgraph.NewCreateSpec(hobby.Table, sqlgraph.NewFieldSpec(hobby.FieldID, field.TypeInt))
	)
	if value, ok := hc.mutation.Name(); ok {
		_spec.SetField(hobby.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := hc.mutation.Description(); ok {
		_spec.SetField(hobby.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := hc.mutation.CreatedAt(); ok {
		_spec.SetField(hobby.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := hc.mutation.CategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hobby.CategoriesTable,
			Columns: hobby.CategoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hobby.UserTable,
			Columns: []string{hobby.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_hobbies = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// HobbyCreateBulk is the builder for creating many Hobby entities in bulk.
type HobbyCreateBulk struct {
	config
	builders []*HobbyCreate
}

// Save creates the Hobby entities in the database.
func (hcb *HobbyCreateBulk) Save(ctx context.Context) ([]*Hobby, error) {
	specs := make([]*sqlgraph.CreateSpec, len(hcb.builders))
	nodes := make([]*Hobby, len(hcb.builders))
	mutators := make([]Mutator, len(hcb.builders))
	for i := range hcb.builders {
		func(i int, root context.Context) {
			builder := hcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HobbyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, hcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, hcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, hcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (hcb *HobbyCreateBulk) SaveX(ctx context.Context) []*Hobby {
	v, err := hcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hcb *HobbyCreateBulk) Exec(ctx context.Context) error {
	_, err := hcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hcb *HobbyCreateBulk) ExecX(ctx context.Context) {
	if err := hcb.Exec(ctx); err != nil {
		panic(err)
	}
}
