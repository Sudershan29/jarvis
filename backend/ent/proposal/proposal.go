// Code generated by ent, DO NOT EDIT.

package proposal

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the proposal type in the database.
	Label = "proposal"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldAllocatedDuration holds the string denoting the allocated_duration field in the database.
	FieldAllocatedDuration = "allocated_duration"
	// FieldAchievedDuration holds the string denoting the achieved_duration field in the database.
	FieldAchievedDuration = "achieved_duration"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldScheduledFor holds the string denoting the scheduled_for field in the database.
	FieldScheduledFor = "scheduled_for"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeTask holds the string denoting the task edge name in mutations.
	EdgeTask = "task"
	// EdgeSkill holds the string denoting the skill edge name in mutations.
	EdgeSkill = "skill"
	// Table holds the table name of the proposal in the database.
	Table = "proposals"
	// TaskTable is the table that holds the task relation/edge.
	TaskTable = "proposals"
	// TaskInverseTable is the table name for the Task entity.
	// It exists in this package in order to avoid circular dependency with the "task" package.
	TaskInverseTable = "tasks"
	// TaskColumn is the table column denoting the task relation/edge.
	TaskColumn = "task_proposals"
	// SkillTable is the table that holds the skill relation/edge.
	SkillTable = "proposals"
	// SkillInverseTable is the table name for the Skill entity.
	// It exists in this package in order to avoid circular dependency with the "skill" package.
	SkillInverseTable = "skills"
	// SkillColumn is the table column denoting the skill relation/edge.
	SkillColumn = "skill_proposals"
)

// Columns holds all SQL columns for proposal fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldAllocatedDuration,
	FieldAchievedDuration,
	FieldStatus,
	FieldScheduledFor,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "proposals"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"skill_proposals",
	"task_proposals",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// AllocatedDurationValidator is a validator for the "allocated_duration" field. It is called by the builders before save.
	AllocatedDurationValidator func(int) error
	// AchievedDurationValidator is a validator for the "achieved_duration" field. It is called by the builders before save.
	AchievedDurationValidator func(int) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
)

// Status defines the type for the "status" enum field.
type Status string

// StatusPending is the default value of the Status enum.
const DefaultStatus = StatusPending

// Status values.
const (
	StatusPending Status = "pending"
	StatusDone    Status = "done"
	StatusDeleted Status = "deleted"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusPending, StatusDone, StatusDeleted:
		return nil
	default:
		return fmt.Errorf("proposal: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Proposal queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByAllocatedDuration orders the results by the allocated_duration field.
func ByAllocatedDuration(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAllocatedDuration, opts...).ToFunc()
}

// ByAchievedDuration orders the results by the achieved_duration field.
func ByAchievedDuration(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAchievedDuration, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByScheduledFor orders the results by the scheduled_for field.
func ByScheduledFor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScheduledFor, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByTaskField orders the results by task field.
func ByTaskField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTaskStep(), sql.OrderByField(field, opts...))
	}
}

// BySkillField orders the results by skill field.
func BySkillField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSkillStep(), sql.OrderByField(field, opts...))
	}
}
func newTaskStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TaskInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TaskTable, TaskColumn),
	)
}
func newSkillStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SkillInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, SkillTable, SkillColumn),
	)
}
