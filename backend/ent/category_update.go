// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/category"
	"backend/ent/goal"
	"backend/ent/hobby"
	"backend/ent/predicate"
	"backend/ent/skill"
	"backend/ent/task"
	"backend/ent/user"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CategoryUpdate is the builder for updating Category entities.
type CategoryUpdate struct {
	config
	hooks    []Hook
	mutation *CategoryMutation
}

// Where appends a list predicates to the CategoryUpdate builder.
func (cu *CategoryUpdate) Where(ps ...predicate.Category) *CategoryUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetName sets the "name" field.
func (cu *CategoryUpdate) SetName(s string) *CategoryUpdate {
	cu.mutation.SetName(s)
	return cu
}

// AddSkillIDs adds the "skills" edge to the Skill entity by IDs.
func (cu *CategoryUpdate) AddSkillIDs(ids ...int) *CategoryUpdate {
	cu.mutation.AddSkillIDs(ids...)
	return cu
}

// AddSkills adds the "skills" edges to the Skill entity.
func (cu *CategoryUpdate) AddSkills(s ...*Skill) *CategoryUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cu.AddSkillIDs(ids...)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (cu *CategoryUpdate) AddTaskIDs(ids ...int) *CategoryUpdate {
	cu.mutation.AddTaskIDs(ids...)
	return cu
}

// AddTasks adds the "tasks" edges to the Task entity.
func (cu *CategoryUpdate) AddTasks(t ...*Task) *CategoryUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cu.AddTaskIDs(ids...)
}

// AddGoalIDs adds the "goals" edge to the Goal entity by IDs.
func (cu *CategoryUpdate) AddGoalIDs(ids ...int) *CategoryUpdate {
	cu.mutation.AddGoalIDs(ids...)
	return cu
}

// AddGoals adds the "goals" edges to the Goal entity.
func (cu *CategoryUpdate) AddGoals(g ...*Goal) *CategoryUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return cu.AddGoalIDs(ids...)
}

// AddHobbyIDs adds the "hobbies" edge to the Hobby entity by IDs.
func (cu *CategoryUpdate) AddHobbyIDs(ids ...int) *CategoryUpdate {
	cu.mutation.AddHobbyIDs(ids...)
	return cu
}

// AddHobbies adds the "hobbies" edges to the Hobby entity.
func (cu *CategoryUpdate) AddHobbies(h ...*Hobby) *CategoryUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return cu.AddHobbyIDs(ids...)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (cu *CategoryUpdate) SetUserID(id int) *CategoryUpdate {
	cu.mutation.SetUserID(id)
	return cu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (cu *CategoryUpdate) SetNillableUserID(id *int) *CategoryUpdate {
	if id != nil {
		cu = cu.SetUserID(*id)
	}
	return cu
}

// SetUser sets the "user" edge to the User entity.
func (cu *CategoryUpdate) SetUser(u *User) *CategoryUpdate {
	return cu.SetUserID(u.ID)
}

// Mutation returns the CategoryMutation object of the builder.
func (cu *CategoryUpdate) Mutation() *CategoryMutation {
	return cu.mutation
}

// ClearSkills clears all "skills" edges to the Skill entity.
func (cu *CategoryUpdate) ClearSkills() *CategoryUpdate {
	cu.mutation.ClearSkills()
	return cu
}

// RemoveSkillIDs removes the "skills" edge to Skill entities by IDs.
func (cu *CategoryUpdate) RemoveSkillIDs(ids ...int) *CategoryUpdate {
	cu.mutation.RemoveSkillIDs(ids...)
	return cu
}

// RemoveSkills removes "skills" edges to Skill entities.
func (cu *CategoryUpdate) RemoveSkills(s ...*Skill) *CategoryUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cu.RemoveSkillIDs(ids...)
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (cu *CategoryUpdate) ClearTasks() *CategoryUpdate {
	cu.mutation.ClearTasks()
	return cu
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (cu *CategoryUpdate) RemoveTaskIDs(ids ...int) *CategoryUpdate {
	cu.mutation.RemoveTaskIDs(ids...)
	return cu
}

// RemoveTasks removes "tasks" edges to Task entities.
func (cu *CategoryUpdate) RemoveTasks(t ...*Task) *CategoryUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cu.RemoveTaskIDs(ids...)
}

// ClearGoals clears all "goals" edges to the Goal entity.
func (cu *CategoryUpdate) ClearGoals() *CategoryUpdate {
	cu.mutation.ClearGoals()
	return cu
}

// RemoveGoalIDs removes the "goals" edge to Goal entities by IDs.
func (cu *CategoryUpdate) RemoveGoalIDs(ids ...int) *CategoryUpdate {
	cu.mutation.RemoveGoalIDs(ids...)
	return cu
}

// RemoveGoals removes "goals" edges to Goal entities.
func (cu *CategoryUpdate) RemoveGoals(g ...*Goal) *CategoryUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return cu.RemoveGoalIDs(ids...)
}

// ClearHobbies clears all "hobbies" edges to the Hobby entity.
func (cu *CategoryUpdate) ClearHobbies() *CategoryUpdate {
	cu.mutation.ClearHobbies()
	return cu
}

// RemoveHobbyIDs removes the "hobbies" edge to Hobby entities by IDs.
func (cu *CategoryUpdate) RemoveHobbyIDs(ids ...int) *CategoryUpdate {
	cu.mutation.RemoveHobbyIDs(ids...)
	return cu
}

// RemoveHobbies removes "hobbies" edges to Hobby entities.
func (cu *CategoryUpdate) RemoveHobbies(h ...*Hobby) *CategoryUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return cu.RemoveHobbyIDs(ids...)
}

// ClearUser clears the "user" edge to the User entity.
func (cu *CategoryUpdate) ClearUser() *CategoryUpdate {
	cu.mutation.ClearUser()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CategoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CategoryUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CategoryUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CategoryUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *CategoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(category.Table, category.Columns, sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(category.FieldName, field.TypeString, value)
	}
	if cu.mutation.SkillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   category.SkillsTable,
			Columns: category.SkillsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(skill.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedSkillsIDs(); len(nodes) > 0 && !cu.mutation.SkillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   category.SkillsTable,
			Columns: category.SkillsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(skill.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.SkillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   category.SkillsTable,
			Columns: category.SkillsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(skill.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   category.TasksTable,
			Columns: category.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedTasksIDs(); len(nodes) > 0 && !cu.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   category.TasksTable,
			Columns: category.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   category.TasksTable,
			Columns: category.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.GoalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   category.GoalsTable,
			Columns: category.GoalsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(goal.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedGoalsIDs(); len(nodes) > 0 && !cu.mutation.GoalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   category.GoalsTable,
			Columns: category.GoalsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(goal.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.GoalsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   category.GoalsTable,
			Columns: category.GoalsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(goal.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.HobbiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   category.HobbiesTable,
			Columns: category.HobbiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hobby.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedHobbiesIDs(); len(nodes) > 0 && !cu.mutation.HobbiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   category.HobbiesTable,
			Columns: category.HobbiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hobby.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.HobbiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   category.HobbiesTable,
			Columns: category.HobbiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hobby.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   category.UserTable,
			Columns: []string{category.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   category.UserTable,
			Columns: []string{category.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{category.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CategoryUpdateOne is the builder for updating a single Category entity.
type CategoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CategoryMutation
}

// SetName sets the "name" field.
func (cuo *CategoryUpdateOne) SetName(s string) *CategoryUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// AddSkillIDs adds the "skills" edge to the Skill entity by IDs.
func (cuo *CategoryUpdateOne) AddSkillIDs(ids ...int) *CategoryUpdateOne {
	cuo.mutation.AddSkillIDs(ids...)
	return cuo
}

// AddSkills adds the "skills" edges to the Skill entity.
func (cuo *CategoryUpdateOne) AddSkills(s ...*Skill) *CategoryUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cuo.AddSkillIDs(ids...)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (cuo *CategoryUpdateOne) AddTaskIDs(ids ...int) *CategoryUpdateOne {
	cuo.mutation.AddTaskIDs(ids...)
	return cuo
}

// AddTasks adds the "tasks" edges to the Task entity.
func (cuo *CategoryUpdateOne) AddTasks(t ...*Task) *CategoryUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cuo.AddTaskIDs(ids...)
}

// AddGoalIDs adds the "goals" edge to the Goal entity by IDs.
func (cuo *CategoryUpdateOne) AddGoalIDs(ids ...int) *CategoryUpdateOne {
	cuo.mutation.AddGoalIDs(ids...)
	return cuo
}

// AddGoals adds the "goals" edges to the Goal entity.
func (cuo *CategoryUpdateOne) AddGoals(g ...*Goal) *CategoryUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return cuo.AddGoalIDs(ids...)
}

// AddHobbyIDs adds the "hobbies" edge to the Hobby entity by IDs.
func (cuo *CategoryUpdateOne) AddHobbyIDs(ids ...int) *CategoryUpdateOne {
	cuo.mutation.AddHobbyIDs(ids...)
	return cuo
}

// AddHobbies adds the "hobbies" edges to the Hobby entity.
func (cuo *CategoryUpdateOne) AddHobbies(h ...*Hobby) *CategoryUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return cuo.AddHobbyIDs(ids...)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (cuo *CategoryUpdateOne) SetUserID(id int) *CategoryUpdateOne {
	cuo.mutation.SetUserID(id)
	return cuo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (cuo *CategoryUpdateOne) SetNillableUserID(id *int) *CategoryUpdateOne {
	if id != nil {
		cuo = cuo.SetUserID(*id)
	}
	return cuo
}

// SetUser sets the "user" edge to the User entity.
func (cuo *CategoryUpdateOne) SetUser(u *User) *CategoryUpdateOne {
	return cuo.SetUserID(u.ID)
}

// Mutation returns the CategoryMutation object of the builder.
func (cuo *CategoryUpdateOne) Mutation() *CategoryMutation {
	return cuo.mutation
}

// ClearSkills clears all "skills" edges to the Skill entity.
func (cuo *CategoryUpdateOne) ClearSkills() *CategoryUpdateOne {
	cuo.mutation.ClearSkills()
	return cuo
}

// RemoveSkillIDs removes the "skills" edge to Skill entities by IDs.
func (cuo *CategoryUpdateOne) RemoveSkillIDs(ids ...int) *CategoryUpdateOne {
	cuo.mutation.RemoveSkillIDs(ids...)
	return cuo
}

// RemoveSkills removes "skills" edges to Skill entities.
func (cuo *CategoryUpdateOne) RemoveSkills(s ...*Skill) *CategoryUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cuo.RemoveSkillIDs(ids...)
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (cuo *CategoryUpdateOne) ClearTasks() *CategoryUpdateOne {
	cuo.mutation.ClearTasks()
	return cuo
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (cuo *CategoryUpdateOne) RemoveTaskIDs(ids ...int) *CategoryUpdateOne {
	cuo.mutation.RemoveTaskIDs(ids...)
	return cuo
}

// RemoveTasks removes "tasks" edges to Task entities.
func (cuo *CategoryUpdateOne) RemoveTasks(t ...*Task) *CategoryUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cuo.RemoveTaskIDs(ids...)
}

// ClearGoals clears all "goals" edges to the Goal entity.
func (cuo *CategoryUpdateOne) ClearGoals() *CategoryUpdateOne {
	cuo.mutation.ClearGoals()
	return cuo
}

// RemoveGoalIDs removes the "goals" edge to Goal entities by IDs.
func (cuo *CategoryUpdateOne) RemoveGoalIDs(ids ...int) *CategoryUpdateOne {
	cuo.mutation.RemoveGoalIDs(ids...)
	return cuo
}

// RemoveGoals removes "goals" edges to Goal entities.
func (cuo *CategoryUpdateOne) RemoveGoals(g ...*Goal) *CategoryUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return cuo.RemoveGoalIDs(ids...)
}

// ClearHobbies clears all "hobbies" edges to the Hobby entity.
func (cuo *CategoryUpdateOne) ClearHobbies() *CategoryUpdateOne {
	cuo.mutation.ClearHobbies()
	return cuo
}

// RemoveHobbyIDs removes the "hobbies" edge to Hobby entities by IDs.
func (cuo *CategoryUpdateOne) RemoveHobbyIDs(ids ...int) *CategoryUpdateOne {
	cuo.mutation.RemoveHobbyIDs(ids...)
	return cuo
}

// RemoveHobbies removes "hobbies" edges to Hobby entities.
func (cuo *CategoryUpdateOne) RemoveHobbies(h ...*Hobby) *CategoryUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return cuo.RemoveHobbyIDs(ids...)
}

// ClearUser clears the "user" edge to the User entity.
func (cuo *CategoryUpdateOne) ClearUser() *CategoryUpdateOne {
	cuo.mutation.ClearUser()
	return cuo
}

// Where appends a list predicates to the CategoryUpdate builder.
func (cuo *CategoryUpdateOne) Where(ps ...predicate.Category) *CategoryUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CategoryUpdateOne) Select(field string, fields ...string) *CategoryUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Category entity.
func (cuo *CategoryUpdateOne) Save(ctx context.Context) (*Category, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CategoryUpdateOne) SaveX(ctx context.Context) *Category {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CategoryUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CategoryUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *CategoryUpdateOne) sqlSave(ctx context.Context) (_node *Category, err error) {
	_spec := sqlgraph.NewUpdateSpec(category.Table, category.Columns, sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Category.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, category.FieldID)
		for _, f := range fields {
			if !category.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != category.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(category.FieldName, field.TypeString, value)
	}
	if cuo.mutation.SkillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   category.SkillsTable,
			Columns: category.SkillsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(skill.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedSkillsIDs(); len(nodes) > 0 && !cuo.mutation.SkillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   category.SkillsTable,
			Columns: category.SkillsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(skill.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.SkillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   category.SkillsTable,
			Columns: category.SkillsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(skill.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   category.TasksTable,
			Columns: category.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedTasksIDs(); len(nodes) > 0 && !cuo.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   category.TasksTable,
			Columns: category.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   category.TasksTable,
			Columns: category.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.GoalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   category.GoalsTable,
			Columns: category.GoalsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(goal.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedGoalsIDs(); len(nodes) > 0 && !cuo.mutation.GoalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   category.GoalsTable,
			Columns: category.GoalsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(goal.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.GoalsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   category.GoalsTable,
			Columns: category.GoalsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(goal.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.HobbiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   category.HobbiesTable,
			Columns: category.HobbiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hobby.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedHobbiesIDs(); len(nodes) > 0 && !cuo.mutation.HobbiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   category.HobbiesTable,
			Columns: category.HobbiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hobby.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.HobbiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   category.HobbiesTable,
			Columns: category.HobbiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hobby.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   category.UserTable,
			Columns: []string{category.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   category.UserTable,
			Columns: []string{category.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Category{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{category.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
