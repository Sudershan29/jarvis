// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/category"
	"backend/ent/predicate"
	"backend/ent/proposal"
	"backend/ent/skill"
	"backend/ent/timepreference"
	"backend/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SkillUpdate is the builder for updating Skill entities.
type SkillUpdate struct {
	config
	hooks    []Hook
	mutation *SkillMutation
}

// Where appends a list predicates to the SkillUpdate builder.
func (su *SkillUpdate) Where(ps ...predicate.Skill) *SkillUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetName sets the "name" field.
func (su *SkillUpdate) SetName(s string) *SkillUpdate {
	su.mutation.SetName(s)
	return su
}

// SetLevel sets the "level" field.
func (su *SkillUpdate) SetLevel(s string) *SkillUpdate {
	su.mutation.SetLevel(s)
	return su
}

// SetProgress sets the "progress" field.
func (su *SkillUpdate) SetProgress(i int) *SkillUpdate {
	su.mutation.ResetProgress()
	su.mutation.SetProgress(i)
	return su
}

// SetNillableProgress sets the "progress" field if the given value is not nil.
func (su *SkillUpdate) SetNillableProgress(i *int) *SkillUpdate {
	if i != nil {
		su.SetProgress(*i)
	}
	return su
}

// AddProgress adds i to the "progress" field.
func (su *SkillUpdate) AddProgress(i int) *SkillUpdate {
	su.mutation.AddProgress(i)
	return su
}

// SetDuration sets the "duration" field.
func (su *SkillUpdate) SetDuration(i int) *SkillUpdate {
	su.mutation.ResetDuration()
	su.mutation.SetDuration(i)
	return su
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (su *SkillUpdate) SetNillableDuration(i *int) *SkillUpdate {
	if i != nil {
		su.SetDuration(*i)
	}
	return su
}

// AddDuration adds i to the "duration" field.
func (su *SkillUpdate) AddDuration(i int) *SkillUpdate {
	su.mutation.AddDuration(i)
	return su
}

// SetDurationAchieved sets the "duration_achieved" field.
func (su *SkillUpdate) SetDurationAchieved(i int) *SkillUpdate {
	su.mutation.ResetDurationAchieved()
	su.mutation.SetDurationAchieved(i)
	return su
}

// SetNillableDurationAchieved sets the "duration_achieved" field if the given value is not nil.
func (su *SkillUpdate) SetNillableDurationAchieved(i *int) *SkillUpdate {
	if i != nil {
		su.SetDurationAchieved(*i)
	}
	return su
}

// AddDurationAchieved adds i to the "duration_achieved" field.
func (su *SkillUpdate) AddDurationAchieved(i int) *SkillUpdate {
	su.mutation.AddDurationAchieved(i)
	return su
}

// SetCreatedAt sets the "created_at" field.
func (su *SkillUpdate) SetCreatedAt(t time.Time) *SkillUpdate {
	su.mutation.SetCreatedAt(t)
	return su
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (su *SkillUpdate) SetNillableCreatedAt(t *time.Time) *SkillUpdate {
	if t != nil {
		su.SetCreatedAt(*t)
	}
	return su
}

// AddCategoryIDs adds the "categories" edge to the Category entity by IDs.
func (su *SkillUpdate) AddCategoryIDs(ids ...int) *SkillUpdate {
	su.mutation.AddCategoryIDs(ids...)
	return su
}

// AddCategories adds the "categories" edges to the Category entity.
func (su *SkillUpdate) AddCategories(c ...*Category) *SkillUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return su.AddCategoryIDs(ids...)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (su *SkillUpdate) SetUserID(id int) *SkillUpdate {
	su.mutation.SetUserID(id)
	return su
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (su *SkillUpdate) SetNillableUserID(id *int) *SkillUpdate {
	if id != nil {
		su = su.SetUserID(*id)
	}
	return su
}

// SetUser sets the "user" edge to the User entity.
func (su *SkillUpdate) SetUser(u *User) *SkillUpdate {
	return su.SetUserID(u.ID)
}

// AddTimePreferenceIDs adds the "time_preferences" edge to the TimePreference entity by IDs.
func (su *SkillUpdate) AddTimePreferenceIDs(ids ...int) *SkillUpdate {
	su.mutation.AddTimePreferenceIDs(ids...)
	return su
}

// AddTimePreferences adds the "time_preferences" edges to the TimePreference entity.
func (su *SkillUpdate) AddTimePreferences(t ...*TimePreference) *SkillUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return su.AddTimePreferenceIDs(ids...)
}

// AddProposalIDs adds the "proposals" edge to the Proposal entity by IDs.
func (su *SkillUpdate) AddProposalIDs(ids ...int) *SkillUpdate {
	su.mutation.AddProposalIDs(ids...)
	return su
}

// AddProposals adds the "proposals" edges to the Proposal entity.
func (su *SkillUpdate) AddProposals(p ...*Proposal) *SkillUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return su.AddProposalIDs(ids...)
}

// Mutation returns the SkillMutation object of the builder.
func (su *SkillUpdate) Mutation() *SkillMutation {
	return su.mutation
}

// ClearCategories clears all "categories" edges to the Category entity.
func (su *SkillUpdate) ClearCategories() *SkillUpdate {
	su.mutation.ClearCategories()
	return su
}

// RemoveCategoryIDs removes the "categories" edge to Category entities by IDs.
func (su *SkillUpdate) RemoveCategoryIDs(ids ...int) *SkillUpdate {
	su.mutation.RemoveCategoryIDs(ids...)
	return su
}

// RemoveCategories removes "categories" edges to Category entities.
func (su *SkillUpdate) RemoveCategories(c ...*Category) *SkillUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return su.RemoveCategoryIDs(ids...)
}

// ClearUser clears the "user" edge to the User entity.
func (su *SkillUpdate) ClearUser() *SkillUpdate {
	su.mutation.ClearUser()
	return su
}

// ClearTimePreferences clears all "time_preferences" edges to the TimePreference entity.
func (su *SkillUpdate) ClearTimePreferences() *SkillUpdate {
	su.mutation.ClearTimePreferences()
	return su
}

// RemoveTimePreferenceIDs removes the "time_preferences" edge to TimePreference entities by IDs.
func (su *SkillUpdate) RemoveTimePreferenceIDs(ids ...int) *SkillUpdate {
	su.mutation.RemoveTimePreferenceIDs(ids...)
	return su
}

// RemoveTimePreferences removes "time_preferences" edges to TimePreference entities.
func (su *SkillUpdate) RemoveTimePreferences(t ...*TimePreference) *SkillUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return su.RemoveTimePreferenceIDs(ids...)
}

// ClearProposals clears all "proposals" edges to the Proposal entity.
func (su *SkillUpdate) ClearProposals() *SkillUpdate {
	su.mutation.ClearProposals()
	return su
}

// RemoveProposalIDs removes the "proposals" edge to Proposal entities by IDs.
func (su *SkillUpdate) RemoveProposalIDs(ids ...int) *SkillUpdate {
	su.mutation.RemoveProposalIDs(ids...)
	return su
}

// RemoveProposals removes "proposals" edges to Proposal entities.
func (su *SkillUpdate) RemoveProposals(p ...*Proposal) *SkillUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return su.RemoveProposalIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SkillUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SkillUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SkillUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SkillUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *SkillUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(skill.Table, skill.Columns, sqlgraph.NewFieldSpec(skill.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(skill.FieldName, field.TypeString, value)
	}
	if value, ok := su.mutation.Level(); ok {
		_spec.SetField(skill.FieldLevel, field.TypeString, value)
	}
	if value, ok := su.mutation.Progress(); ok {
		_spec.SetField(skill.FieldProgress, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedProgress(); ok {
		_spec.AddField(skill.FieldProgress, field.TypeInt, value)
	}
	if value, ok := su.mutation.Duration(); ok {
		_spec.SetField(skill.FieldDuration, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedDuration(); ok {
		_spec.AddField(skill.FieldDuration, field.TypeInt, value)
	}
	if value, ok := su.mutation.DurationAchieved(); ok {
		_spec.SetField(skill.FieldDurationAchieved, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedDurationAchieved(); ok {
		_spec.AddField(skill.FieldDurationAchieved, field.TypeInt, value)
	}
	if value, ok := su.mutation.CreatedAt(); ok {
		_spec.SetField(skill.FieldCreatedAt, field.TypeTime, value)
	}
	if su.mutation.CategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   skill.CategoriesTable,
			Columns: skill.CategoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedCategoriesIDs(); len(nodes) > 0 && !su.mutation.CategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   skill.CategoriesTable,
			Columns: skill.CategoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.CategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   skill.CategoriesTable,
			Columns: skill.CategoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   skill.UserTable,
			Columns: []string{skill.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   skill.UserTable,
			Columns: []string{skill.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.TimePreferencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   skill.TimePreferencesTable,
			Columns: skill.TimePreferencesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timepreference.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedTimePreferencesIDs(); len(nodes) > 0 && !su.mutation.TimePreferencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   skill.TimePreferencesTable,
			Columns: skill.TimePreferencesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timepreference.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.TimePreferencesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   skill.TimePreferencesTable,
			Columns: skill.TimePreferencesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timepreference.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.ProposalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   skill.ProposalsTable,
			Columns: []string{skill.ProposalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(proposal.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedProposalsIDs(); len(nodes) > 0 && !su.mutation.ProposalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   skill.ProposalsTable,
			Columns: []string{skill.ProposalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(proposal.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ProposalsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   skill.ProposalsTable,
			Columns: []string{skill.ProposalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(proposal.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{skill.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SkillUpdateOne is the builder for updating a single Skill entity.
type SkillUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SkillMutation
}

// SetName sets the "name" field.
func (suo *SkillUpdateOne) SetName(s string) *SkillUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetLevel sets the "level" field.
func (suo *SkillUpdateOne) SetLevel(s string) *SkillUpdateOne {
	suo.mutation.SetLevel(s)
	return suo
}

// SetProgress sets the "progress" field.
func (suo *SkillUpdateOne) SetProgress(i int) *SkillUpdateOne {
	suo.mutation.ResetProgress()
	suo.mutation.SetProgress(i)
	return suo
}

// SetNillableProgress sets the "progress" field if the given value is not nil.
func (suo *SkillUpdateOne) SetNillableProgress(i *int) *SkillUpdateOne {
	if i != nil {
		suo.SetProgress(*i)
	}
	return suo
}

// AddProgress adds i to the "progress" field.
func (suo *SkillUpdateOne) AddProgress(i int) *SkillUpdateOne {
	suo.mutation.AddProgress(i)
	return suo
}

// SetDuration sets the "duration" field.
func (suo *SkillUpdateOne) SetDuration(i int) *SkillUpdateOne {
	suo.mutation.ResetDuration()
	suo.mutation.SetDuration(i)
	return suo
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (suo *SkillUpdateOne) SetNillableDuration(i *int) *SkillUpdateOne {
	if i != nil {
		suo.SetDuration(*i)
	}
	return suo
}

// AddDuration adds i to the "duration" field.
func (suo *SkillUpdateOne) AddDuration(i int) *SkillUpdateOne {
	suo.mutation.AddDuration(i)
	return suo
}

// SetDurationAchieved sets the "duration_achieved" field.
func (suo *SkillUpdateOne) SetDurationAchieved(i int) *SkillUpdateOne {
	suo.mutation.ResetDurationAchieved()
	suo.mutation.SetDurationAchieved(i)
	return suo
}

// SetNillableDurationAchieved sets the "duration_achieved" field if the given value is not nil.
func (suo *SkillUpdateOne) SetNillableDurationAchieved(i *int) *SkillUpdateOne {
	if i != nil {
		suo.SetDurationAchieved(*i)
	}
	return suo
}

// AddDurationAchieved adds i to the "duration_achieved" field.
func (suo *SkillUpdateOne) AddDurationAchieved(i int) *SkillUpdateOne {
	suo.mutation.AddDurationAchieved(i)
	return suo
}

// SetCreatedAt sets the "created_at" field.
func (suo *SkillUpdateOne) SetCreatedAt(t time.Time) *SkillUpdateOne {
	suo.mutation.SetCreatedAt(t)
	return suo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (suo *SkillUpdateOne) SetNillableCreatedAt(t *time.Time) *SkillUpdateOne {
	if t != nil {
		suo.SetCreatedAt(*t)
	}
	return suo
}

// AddCategoryIDs adds the "categories" edge to the Category entity by IDs.
func (suo *SkillUpdateOne) AddCategoryIDs(ids ...int) *SkillUpdateOne {
	suo.mutation.AddCategoryIDs(ids...)
	return suo
}

// AddCategories adds the "categories" edges to the Category entity.
func (suo *SkillUpdateOne) AddCategories(c ...*Category) *SkillUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return suo.AddCategoryIDs(ids...)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (suo *SkillUpdateOne) SetUserID(id int) *SkillUpdateOne {
	suo.mutation.SetUserID(id)
	return suo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (suo *SkillUpdateOne) SetNillableUserID(id *int) *SkillUpdateOne {
	if id != nil {
		suo = suo.SetUserID(*id)
	}
	return suo
}

// SetUser sets the "user" edge to the User entity.
func (suo *SkillUpdateOne) SetUser(u *User) *SkillUpdateOne {
	return suo.SetUserID(u.ID)
}

// AddTimePreferenceIDs adds the "time_preferences" edge to the TimePreference entity by IDs.
func (suo *SkillUpdateOne) AddTimePreferenceIDs(ids ...int) *SkillUpdateOne {
	suo.mutation.AddTimePreferenceIDs(ids...)
	return suo
}

// AddTimePreferences adds the "time_preferences" edges to the TimePreference entity.
func (suo *SkillUpdateOne) AddTimePreferences(t ...*TimePreference) *SkillUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return suo.AddTimePreferenceIDs(ids...)
}

// AddProposalIDs adds the "proposals" edge to the Proposal entity by IDs.
func (suo *SkillUpdateOne) AddProposalIDs(ids ...int) *SkillUpdateOne {
	suo.mutation.AddProposalIDs(ids...)
	return suo
}

// AddProposals adds the "proposals" edges to the Proposal entity.
func (suo *SkillUpdateOne) AddProposals(p ...*Proposal) *SkillUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return suo.AddProposalIDs(ids...)
}

// Mutation returns the SkillMutation object of the builder.
func (suo *SkillUpdateOne) Mutation() *SkillMutation {
	return suo.mutation
}

// ClearCategories clears all "categories" edges to the Category entity.
func (suo *SkillUpdateOne) ClearCategories() *SkillUpdateOne {
	suo.mutation.ClearCategories()
	return suo
}

// RemoveCategoryIDs removes the "categories" edge to Category entities by IDs.
func (suo *SkillUpdateOne) RemoveCategoryIDs(ids ...int) *SkillUpdateOne {
	suo.mutation.RemoveCategoryIDs(ids...)
	return suo
}

// RemoveCategories removes "categories" edges to Category entities.
func (suo *SkillUpdateOne) RemoveCategories(c ...*Category) *SkillUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return suo.RemoveCategoryIDs(ids...)
}

// ClearUser clears the "user" edge to the User entity.
func (suo *SkillUpdateOne) ClearUser() *SkillUpdateOne {
	suo.mutation.ClearUser()
	return suo
}

// ClearTimePreferences clears all "time_preferences" edges to the TimePreference entity.
func (suo *SkillUpdateOne) ClearTimePreferences() *SkillUpdateOne {
	suo.mutation.ClearTimePreferences()
	return suo
}

// RemoveTimePreferenceIDs removes the "time_preferences" edge to TimePreference entities by IDs.
func (suo *SkillUpdateOne) RemoveTimePreferenceIDs(ids ...int) *SkillUpdateOne {
	suo.mutation.RemoveTimePreferenceIDs(ids...)
	return suo
}

// RemoveTimePreferences removes "time_preferences" edges to TimePreference entities.
func (suo *SkillUpdateOne) RemoveTimePreferences(t ...*TimePreference) *SkillUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return suo.RemoveTimePreferenceIDs(ids...)
}

// ClearProposals clears all "proposals" edges to the Proposal entity.
func (suo *SkillUpdateOne) ClearProposals() *SkillUpdateOne {
	suo.mutation.ClearProposals()
	return suo
}

// RemoveProposalIDs removes the "proposals" edge to Proposal entities by IDs.
func (suo *SkillUpdateOne) RemoveProposalIDs(ids ...int) *SkillUpdateOne {
	suo.mutation.RemoveProposalIDs(ids...)
	return suo
}

// RemoveProposals removes "proposals" edges to Proposal entities.
func (suo *SkillUpdateOne) RemoveProposals(p ...*Proposal) *SkillUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return suo.RemoveProposalIDs(ids...)
}

// Where appends a list predicates to the SkillUpdate builder.
func (suo *SkillUpdateOne) Where(ps ...predicate.Skill) *SkillUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SkillUpdateOne) Select(field string, fields ...string) *SkillUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Skill entity.
func (suo *SkillUpdateOne) Save(ctx context.Context) (*Skill, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SkillUpdateOne) SaveX(ctx context.Context) *Skill {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SkillUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SkillUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *SkillUpdateOne) sqlSave(ctx context.Context) (_node *Skill, err error) {
	_spec := sqlgraph.NewUpdateSpec(skill.Table, skill.Columns, sqlgraph.NewFieldSpec(skill.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Skill.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, skill.FieldID)
		for _, f := range fields {
			if !skill.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != skill.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(skill.FieldName, field.TypeString, value)
	}
	if value, ok := suo.mutation.Level(); ok {
		_spec.SetField(skill.FieldLevel, field.TypeString, value)
	}
	if value, ok := suo.mutation.Progress(); ok {
		_spec.SetField(skill.FieldProgress, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedProgress(); ok {
		_spec.AddField(skill.FieldProgress, field.TypeInt, value)
	}
	if value, ok := suo.mutation.Duration(); ok {
		_spec.SetField(skill.FieldDuration, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedDuration(); ok {
		_spec.AddField(skill.FieldDuration, field.TypeInt, value)
	}
	if value, ok := suo.mutation.DurationAchieved(); ok {
		_spec.SetField(skill.FieldDurationAchieved, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedDurationAchieved(); ok {
		_spec.AddField(skill.FieldDurationAchieved, field.TypeInt, value)
	}
	if value, ok := suo.mutation.CreatedAt(); ok {
		_spec.SetField(skill.FieldCreatedAt, field.TypeTime, value)
	}
	if suo.mutation.CategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   skill.CategoriesTable,
			Columns: skill.CategoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedCategoriesIDs(); len(nodes) > 0 && !suo.mutation.CategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   skill.CategoriesTable,
			Columns: skill.CategoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.CategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   skill.CategoriesTable,
			Columns: skill.CategoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   skill.UserTable,
			Columns: []string{skill.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   skill.UserTable,
			Columns: []string{skill.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.TimePreferencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   skill.TimePreferencesTable,
			Columns: skill.TimePreferencesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timepreference.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedTimePreferencesIDs(); len(nodes) > 0 && !suo.mutation.TimePreferencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   skill.TimePreferencesTable,
			Columns: skill.TimePreferencesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timepreference.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.TimePreferencesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   skill.TimePreferencesTable,
			Columns: skill.TimePreferencesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timepreference.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.ProposalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   skill.ProposalsTable,
			Columns: []string{skill.ProposalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(proposal.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedProposalsIDs(); len(nodes) > 0 && !suo.mutation.ProposalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   skill.ProposalsTable,
			Columns: []string{skill.ProposalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(proposal.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ProposalsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   skill.ProposalsTable,
			Columns: []string{skill.ProposalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(proposal.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Skill{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{skill.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
