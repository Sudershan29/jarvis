// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/goal"
	"backend/ent/user"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Goal is the model entity for the Goal schema.
type Goal struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GoalQuery when eager-loading is set.
	Edges        GoalEdges `json:"edges"`
	user_goals   *int
	selectValues sql.SelectValues
}

// GoalEdges holds the relations/edges for other nodes in the graph.
type GoalEdges struct {
	// Categories holds the value of the categories edge.
	Categories []*Category `json:"categories,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// CategoriesOrErr returns the Categories value or an error if the edge
// was not loaded in eager-loading.
func (e GoalEdges) CategoriesOrErr() ([]*Category, error) {
	if e.loadedTypes[0] {
		return e.Categories, nil
	}
	return nil, &NotLoadedError{edge: "categories"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GoalEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Goal) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case goal.FieldID:
			values[i] = new(sql.NullInt64)
		case goal.FieldName, goal.FieldDescription:
			values[i] = new(sql.NullString)
		case goal.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case goal.ForeignKeys[0]: // user_goals
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Goal fields.
func (_go *Goal) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case goal.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_go.ID = int(value.Int64)
		case goal.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_go.Name = value.String
			}
		case goal.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				_go.Description = value.String
			}
		case goal.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_go.CreatedAt = value.Time
			}
		case goal.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_goals", value)
			} else if value.Valid {
				_go.user_goals = new(int)
				*_go.user_goals = int(value.Int64)
			}
		default:
			_go.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Goal.
// This includes values selected through modifiers, order, etc.
func (_go *Goal) Value(name string) (ent.Value, error) {
	return _go.selectValues.Get(name)
}

// QueryCategories queries the "categories" edge of the Goal entity.
func (_go *Goal) QueryCategories() *CategoryQuery {
	return NewGoalClient(_go.config).QueryCategories(_go)
}

// QueryUser queries the "user" edge of the Goal entity.
func (_go *Goal) QueryUser() *UserQuery {
	return NewGoalClient(_go.config).QueryUser(_go)
}

// Update returns a builder for updating this Goal.
// Note that you need to call Goal.Unwrap() before calling this method if this Goal
// was returned from a transaction, and the transaction was committed or rolled back.
func (_go *Goal) Update() *GoalUpdateOne {
	return NewGoalClient(_go.config).UpdateOne(_go)
}

// Unwrap unwraps the Goal entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_go *Goal) Unwrap() *Goal {
	_tx, ok := _go.config.driver.(*txDriver)
	if !ok {
		panic("ent: Goal is not a transactional entity")
	}
	_go.config.driver = _tx.drv
	return _go
}

// String implements the fmt.Stringer.
func (_go *Goal) String() string {
	var builder strings.Builder
	builder.WriteString("Goal(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _go.ID))
	builder.WriteString("name=")
	builder.WriteString(_go.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(_go.Description)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_go.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Goals is a parsable slice of Goal.
type Goals []*Goal
