// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/predicate"
	"backend/ent/preference"
	"backend/ent/user"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PreferenceUpdate is the builder for updating Preference entities.
type PreferenceUpdate struct {
	config
	hooks    []Hook
	mutation *PreferenceMutation
}

// Where appends a list predicates to the PreferenceUpdate builder.
func (pu *PreferenceUpdate) Where(ps ...predicate.Preference) *PreferenceUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetFreeWeekends sets the "free_weekends" field.
func (pu *PreferenceUpdate) SetFreeWeekends(b bool) *PreferenceUpdate {
	pu.mutation.SetFreeWeekends(b)
	return pu
}

// SetNillableFreeWeekends sets the "free_weekends" field if the given value is not nil.
func (pu *PreferenceUpdate) SetNillableFreeWeekends(b *bool) *PreferenceUpdate {
	if b != nil {
		pu.SetFreeWeekends(*b)
	}
	return pu
}

// SetWeeklyFrequency sets the "weekly_frequency" field.
func (pu *PreferenceUpdate) SetWeeklyFrequency(i int) *PreferenceUpdate {
	pu.mutation.ResetWeeklyFrequency()
	pu.mutation.SetWeeklyFrequency(i)
	return pu
}

// SetNillableWeeklyFrequency sets the "weekly_frequency" field if the given value is not nil.
func (pu *PreferenceUpdate) SetNillableWeeklyFrequency(i *int) *PreferenceUpdate {
	if i != nil {
		pu.SetWeeklyFrequency(*i)
	}
	return pu
}

// AddWeeklyFrequency adds i to the "weekly_frequency" field.
func (pu *PreferenceUpdate) AddWeeklyFrequency(i int) *PreferenceUpdate {
	pu.mutation.AddWeeklyFrequency(i)
	return pu
}

// ClearWeeklyFrequency clears the value of the "weekly_frequency" field.
func (pu *PreferenceUpdate) ClearWeeklyFrequency() *PreferenceUpdate {
	pu.mutation.ClearWeeklyFrequency()
	return pu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (pu *PreferenceUpdate) SetUserID(id int) *PreferenceUpdate {
	pu.mutation.SetUserID(id)
	return pu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (pu *PreferenceUpdate) SetNillableUserID(id *int) *PreferenceUpdate {
	if id != nil {
		pu = pu.SetUserID(*id)
	}
	return pu
}

// SetUser sets the "user" edge to the User entity.
func (pu *PreferenceUpdate) SetUser(u *User) *PreferenceUpdate {
	return pu.SetUserID(u.ID)
}

// Mutation returns the PreferenceMutation object of the builder.
func (pu *PreferenceUpdate) Mutation() *PreferenceMutation {
	return pu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (pu *PreferenceUpdate) ClearUser() *PreferenceUpdate {
	pu.mutation.ClearUser()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PreferenceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PreferenceUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PreferenceUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PreferenceUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PreferenceUpdate) check() error {
	if v, ok := pu.mutation.WeeklyFrequency(); ok {
		if err := preference.WeeklyFrequencyValidator(v); err != nil {
			return &ValidationError{Name: "weekly_frequency", err: fmt.Errorf(`ent: validator failed for field "Preference.weekly_frequency": %w`, err)}
		}
	}
	return nil
}

func (pu *PreferenceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(preference.Table, preference.Columns, sqlgraph.NewFieldSpec(preference.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.FreeWeekends(); ok {
		_spec.SetField(preference.FieldFreeWeekends, field.TypeBool, value)
	}
	if value, ok := pu.mutation.WeeklyFrequency(); ok {
		_spec.SetField(preference.FieldWeeklyFrequency, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedWeeklyFrequency(); ok {
		_spec.AddField(preference.FieldWeeklyFrequency, field.TypeInt, value)
	}
	if pu.mutation.WeeklyFrequencyCleared() {
		_spec.ClearField(preference.FieldWeeklyFrequency, field.TypeInt)
	}
	if pu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   preference.UserTable,
			Columns: []string{preference.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   preference.UserTable,
			Columns: []string{preference.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{preference.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PreferenceUpdateOne is the builder for updating a single Preference entity.
type PreferenceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PreferenceMutation
}

// SetFreeWeekends sets the "free_weekends" field.
func (puo *PreferenceUpdateOne) SetFreeWeekends(b bool) *PreferenceUpdateOne {
	puo.mutation.SetFreeWeekends(b)
	return puo
}

// SetNillableFreeWeekends sets the "free_weekends" field if the given value is not nil.
func (puo *PreferenceUpdateOne) SetNillableFreeWeekends(b *bool) *PreferenceUpdateOne {
	if b != nil {
		puo.SetFreeWeekends(*b)
	}
	return puo
}

// SetWeeklyFrequency sets the "weekly_frequency" field.
func (puo *PreferenceUpdateOne) SetWeeklyFrequency(i int) *PreferenceUpdateOne {
	puo.mutation.ResetWeeklyFrequency()
	puo.mutation.SetWeeklyFrequency(i)
	return puo
}

// SetNillableWeeklyFrequency sets the "weekly_frequency" field if the given value is not nil.
func (puo *PreferenceUpdateOne) SetNillableWeeklyFrequency(i *int) *PreferenceUpdateOne {
	if i != nil {
		puo.SetWeeklyFrequency(*i)
	}
	return puo
}

// AddWeeklyFrequency adds i to the "weekly_frequency" field.
func (puo *PreferenceUpdateOne) AddWeeklyFrequency(i int) *PreferenceUpdateOne {
	puo.mutation.AddWeeklyFrequency(i)
	return puo
}

// ClearWeeklyFrequency clears the value of the "weekly_frequency" field.
func (puo *PreferenceUpdateOne) ClearWeeklyFrequency() *PreferenceUpdateOne {
	puo.mutation.ClearWeeklyFrequency()
	return puo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (puo *PreferenceUpdateOne) SetUserID(id int) *PreferenceUpdateOne {
	puo.mutation.SetUserID(id)
	return puo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (puo *PreferenceUpdateOne) SetNillableUserID(id *int) *PreferenceUpdateOne {
	if id != nil {
		puo = puo.SetUserID(*id)
	}
	return puo
}

// SetUser sets the "user" edge to the User entity.
func (puo *PreferenceUpdateOne) SetUser(u *User) *PreferenceUpdateOne {
	return puo.SetUserID(u.ID)
}

// Mutation returns the PreferenceMutation object of the builder.
func (puo *PreferenceUpdateOne) Mutation() *PreferenceMutation {
	return puo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (puo *PreferenceUpdateOne) ClearUser() *PreferenceUpdateOne {
	puo.mutation.ClearUser()
	return puo
}

// Where appends a list predicates to the PreferenceUpdate builder.
func (puo *PreferenceUpdateOne) Where(ps ...predicate.Preference) *PreferenceUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PreferenceUpdateOne) Select(field string, fields ...string) *PreferenceUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Preference entity.
func (puo *PreferenceUpdateOne) Save(ctx context.Context) (*Preference, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PreferenceUpdateOne) SaveX(ctx context.Context) *Preference {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PreferenceUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PreferenceUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PreferenceUpdateOne) check() error {
	if v, ok := puo.mutation.WeeklyFrequency(); ok {
		if err := preference.WeeklyFrequencyValidator(v); err != nil {
			return &ValidationError{Name: "weekly_frequency", err: fmt.Errorf(`ent: validator failed for field "Preference.weekly_frequency": %w`, err)}
		}
	}
	return nil
}

func (puo *PreferenceUpdateOne) sqlSave(ctx context.Context) (_node *Preference, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(preference.Table, preference.Columns, sqlgraph.NewFieldSpec(preference.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Preference.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, preference.FieldID)
		for _, f := range fields {
			if !preference.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != preference.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.FreeWeekends(); ok {
		_spec.SetField(preference.FieldFreeWeekends, field.TypeBool, value)
	}
	if value, ok := puo.mutation.WeeklyFrequency(); ok {
		_spec.SetField(preference.FieldWeeklyFrequency, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedWeeklyFrequency(); ok {
		_spec.AddField(preference.FieldWeeklyFrequency, field.TypeInt, value)
	}
	if puo.mutation.WeeklyFrequencyCleared() {
		_spec.ClearField(preference.FieldWeeklyFrequency, field.TypeInt)
	}
	if puo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   preference.UserTable,
			Columns: []string{preference.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   preference.UserTable,
			Columns: []string{preference.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Preference{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{preference.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
