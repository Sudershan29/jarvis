// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/skill"
	"backend/ent/user"
	"backend/ent/userskill"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserSkillCreate is the builder for creating a UserSkill entity.
type UserSkillCreate struct {
	config
	mutation *UserSkillMutation
	hooks    []Hook
}

// SetLevel sets the "level" field.
func (usc *UserSkillCreate) SetLevel(u userskill.Level) *UserSkillCreate {
	usc.mutation.SetLevel(u)
	return usc
}

// SetProgress sets the "progress" field.
func (usc *UserSkillCreate) SetProgress(i int) *UserSkillCreate {
	usc.mutation.SetProgress(i)
	return usc
}

// SetNillableProgress sets the "progress" field if the given value is not nil.
func (usc *UserSkillCreate) SetNillableProgress(i *int) *UserSkillCreate {
	if i != nil {
		usc.SetProgress(*i)
	}
	return usc
}

// SetDuration sets the "duration" field.
func (usc *UserSkillCreate) SetDuration(i int) *UserSkillCreate {
	usc.mutation.SetDuration(i)
	return usc
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (usc *UserSkillCreate) SetNillableDuration(i *int) *UserSkillCreate {
	if i != nil {
		usc.SetDuration(*i)
	}
	return usc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (usc *UserSkillCreate) SetUserID(id int) *UserSkillCreate {
	usc.mutation.SetUserID(id)
	return usc
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (usc *UserSkillCreate) SetNillableUserID(id *int) *UserSkillCreate {
	if id != nil {
		usc = usc.SetUserID(*id)
	}
	return usc
}

// SetUser sets the "user" edge to the User entity.
func (usc *UserSkillCreate) SetUser(u *User) *UserSkillCreate {
	return usc.SetUserID(u.ID)
}

// SetSkillID sets the "skill" edge to the Skill entity by ID.
func (usc *UserSkillCreate) SetSkillID(id int) *UserSkillCreate {
	usc.mutation.SetSkillID(id)
	return usc
}

// SetNillableSkillID sets the "skill" edge to the Skill entity by ID if the given value is not nil.
func (usc *UserSkillCreate) SetNillableSkillID(id *int) *UserSkillCreate {
	if id != nil {
		usc = usc.SetSkillID(*id)
	}
	return usc
}

// SetSkill sets the "skill" edge to the Skill entity.
func (usc *UserSkillCreate) SetSkill(s *Skill) *UserSkillCreate {
	return usc.SetSkillID(s.ID)
}

// Mutation returns the UserSkillMutation object of the builder.
func (usc *UserSkillCreate) Mutation() *UserSkillMutation {
	return usc.mutation
}

// Save creates the UserSkill in the database.
func (usc *UserSkillCreate) Save(ctx context.Context) (*UserSkill, error) {
	usc.defaults()
	return withHooks(ctx, usc.sqlSave, usc.mutation, usc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (usc *UserSkillCreate) SaveX(ctx context.Context) *UserSkill {
	v, err := usc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (usc *UserSkillCreate) Exec(ctx context.Context) error {
	_, err := usc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (usc *UserSkillCreate) ExecX(ctx context.Context) {
	if err := usc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (usc *UserSkillCreate) defaults() {
	if _, ok := usc.mutation.Progress(); !ok {
		v := userskill.DefaultProgress
		usc.mutation.SetProgress(v)
	}
	if _, ok := usc.mutation.Duration(); !ok {
		v := userskill.DefaultDuration
		usc.mutation.SetDuration(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (usc *UserSkillCreate) check() error {
	if _, ok := usc.mutation.Level(); !ok {
		return &ValidationError{Name: "level", err: errors.New(`ent: missing required field "UserSkill.level"`)}
	}
	if v, ok := usc.mutation.Level(); ok {
		if err := userskill.LevelValidator(v); err != nil {
			return &ValidationError{Name: "level", err: fmt.Errorf(`ent: validator failed for field "UserSkill.level": %w`, err)}
		}
	}
	if _, ok := usc.mutation.Progress(); !ok {
		return &ValidationError{Name: "progress", err: errors.New(`ent: missing required field "UserSkill.progress"`)}
	}
	if _, ok := usc.mutation.Duration(); !ok {
		return &ValidationError{Name: "duration", err: errors.New(`ent: missing required field "UserSkill.duration"`)}
	}
	return nil
}

func (usc *UserSkillCreate) sqlSave(ctx context.Context) (*UserSkill, error) {
	if err := usc.check(); err != nil {
		return nil, err
	}
	_node, _spec := usc.createSpec()
	if err := sqlgraph.CreateNode(ctx, usc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	usc.mutation.id = &_node.ID
	usc.mutation.done = true
	return _node, nil
}

func (usc *UserSkillCreate) createSpec() (*UserSkill, *sqlgraph.CreateSpec) {
	var (
		_node = &UserSkill{config: usc.config}
		_spec = sqlgraph.NewCreateSpec(userskill.Table, sqlgraph.NewFieldSpec(userskill.FieldID, field.TypeInt))
	)
	if value, ok := usc.mutation.Level(); ok {
		_spec.SetField(userskill.FieldLevel, field.TypeEnum, value)
		_node.Level = value
	}
	if value, ok := usc.mutation.Progress(); ok {
		_spec.SetField(userskill.FieldProgress, field.TypeInt, value)
		_node.Progress = value
	}
	if value, ok := usc.mutation.Duration(); ok {
		_spec.SetField(userskill.FieldDuration, field.TypeInt, value)
		_node.Duration = value
	}
	if nodes := usc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userskill.UserTable,
			Columns: []string{userskill.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_skills = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := usc.mutation.SkillIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userskill.SkillTable,
			Columns: []string{userskill.SkillColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(skill.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.skill_userskills = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserSkillCreateBulk is the builder for creating many UserSkill entities in bulk.
type UserSkillCreateBulk struct {
	config
	builders []*UserSkillCreate
}

// Save creates the UserSkill entities in the database.
func (uscb *UserSkillCreateBulk) Save(ctx context.Context) ([]*UserSkill, error) {
	specs := make([]*sqlgraph.CreateSpec, len(uscb.builders))
	nodes := make([]*UserSkill, len(uscb.builders))
	mutators := make([]Mutator, len(uscb.builders))
	for i := range uscb.builders {
		func(i int, root context.Context) {
			builder := uscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserSkillMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uscb *UserSkillCreateBulk) SaveX(ctx context.Context) []*UserSkill {
	v, err := uscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uscb *UserSkillCreateBulk) Exec(ctx context.Context) error {
	_, err := uscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uscb *UserSkillCreateBulk) ExecX(ctx context.Context) {
	if err := uscb.Exec(ctx); err != nil {
		panic(err)
	}
}
