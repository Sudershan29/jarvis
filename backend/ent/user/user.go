// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldEmailAddress holds the string denoting the email_address field in the database.
	FieldEmailAddress = "email_address"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUUID holds the string denoting the uuid field in the database.
	FieldUUID = "uuid"
	// FieldPremium holds the string denoting the premium field in the database.
	FieldPremium = "premium"
	// EdgeSkills holds the string denoting the skills edge name in mutations.
	EdgeSkills = "skills"
	// EdgeTasks holds the string denoting the tasks edge name in mutations.
	EdgeTasks = "tasks"
	// EdgeMeetings holds the string denoting the meetings edge name in mutations.
	EdgeMeetings = "meetings"
	// EdgeHobbies holds the string denoting the hobbies edge name in mutations.
	EdgeHobbies = "hobbies"
	// EdgeGoals holds the string denoting the goals edge name in mutations.
	EdgeGoals = "goals"
	// EdgeCategories holds the string denoting the categories edge name in mutations.
	EdgeCategories = "categories"
	// EdgePreference holds the string denoting the preference edge name in mutations.
	EdgePreference = "preference"
	// Table holds the table name of the user in the database.
	Table = "users"
	// SkillsTable is the table that holds the skills relation/edge.
	SkillsTable = "skills"
	// SkillsInverseTable is the table name for the Skill entity.
	// It exists in this package in order to avoid circular dependency with the "skill" package.
	SkillsInverseTable = "skills"
	// SkillsColumn is the table column denoting the skills relation/edge.
	SkillsColumn = "user_skills"
	// TasksTable is the table that holds the tasks relation/edge.
	TasksTable = "tasks"
	// TasksInverseTable is the table name for the Task entity.
	// It exists in this package in order to avoid circular dependency with the "task" package.
	TasksInverseTable = "tasks"
	// TasksColumn is the table column denoting the tasks relation/edge.
	TasksColumn = "user_tasks"
	// MeetingsTable is the table that holds the meetings relation/edge.
	MeetingsTable = "meetings"
	// MeetingsInverseTable is the table name for the Meeting entity.
	// It exists in this package in order to avoid circular dependency with the "meeting" package.
	MeetingsInverseTable = "meetings"
	// MeetingsColumn is the table column denoting the meetings relation/edge.
	MeetingsColumn = "user_meetings"
	// HobbiesTable is the table that holds the hobbies relation/edge.
	HobbiesTable = "hobbies"
	// HobbiesInverseTable is the table name for the Hobby entity.
	// It exists in this package in order to avoid circular dependency with the "hobby" package.
	HobbiesInverseTable = "hobbies"
	// HobbiesColumn is the table column denoting the hobbies relation/edge.
	HobbiesColumn = "user_hobbies"
	// GoalsTable is the table that holds the goals relation/edge.
	GoalsTable = "goals"
	// GoalsInverseTable is the table name for the Goal entity.
	// It exists in this package in order to avoid circular dependency with the "goal" package.
	GoalsInverseTable = "goals"
	// GoalsColumn is the table column denoting the goals relation/edge.
	GoalsColumn = "user_goals"
	// CategoriesTable is the table that holds the categories relation/edge.
	CategoriesTable = "categories"
	// CategoriesInverseTable is the table name for the Category entity.
	// It exists in this package in order to avoid circular dependency with the "category" package.
	CategoriesInverseTable = "categories"
	// CategoriesColumn is the table column denoting the categories relation/edge.
	CategoriesColumn = "user_categories"
	// PreferenceTable is the table that holds the preference relation/edge.
	PreferenceTable = "preferences"
	// PreferenceInverseTable is the table name for the Preference entity.
	// It exists in this package in order to avoid circular dependency with the "preference" package.
	PreferenceInverseTable = "preferences"
	// PreferenceColumn is the table column denoting the preference relation/edge.
	PreferenceColumn = "user_preference"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldEmailAddress,
	FieldPassword,
	FieldCreatedAt,
	FieldUUID,
	FieldPremium,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUUID holds the default value on creation for the "uuid" field.
	DefaultUUID func() uuid.UUID
	// DefaultPremium holds the default value on creation for the "premium" field.
	DefaultPremium bool
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByEmailAddress orders the results by the email_address field.
func ByEmailAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmailAddress, opts...).ToFunc()
}

// ByPassword orders the results by the password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUUID orders the results by the uuid field.
func ByUUID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUUID, opts...).ToFunc()
}

// ByPremium orders the results by the premium field.
func ByPremium(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPremium, opts...).ToFunc()
}

// BySkillsCount orders the results by skills count.
func BySkillsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSkillsStep(), opts...)
	}
}

// BySkills orders the results by skills terms.
func BySkills(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSkillsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTasksCount orders the results by tasks count.
func ByTasksCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTasksStep(), opts...)
	}
}

// ByTasks orders the results by tasks terms.
func ByTasks(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTasksStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMeetingsCount orders the results by meetings count.
func ByMeetingsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMeetingsStep(), opts...)
	}
}

// ByMeetings orders the results by meetings terms.
func ByMeetings(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMeetingsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByHobbiesCount orders the results by hobbies count.
func ByHobbiesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newHobbiesStep(), opts...)
	}
}

// ByHobbies orders the results by hobbies terms.
func ByHobbies(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHobbiesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByGoalsCount orders the results by goals count.
func ByGoalsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newGoalsStep(), opts...)
	}
}

// ByGoals orders the results by goals terms.
func ByGoals(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGoalsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCategoriesCount orders the results by categories count.
func ByCategoriesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCategoriesStep(), opts...)
	}
}

// ByCategories orders the results by categories terms.
func ByCategories(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCategoriesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPreferenceField orders the results by preference field.
func ByPreferenceField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPreferenceStep(), sql.OrderByField(field, opts...))
	}
}
func newSkillsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SkillsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SkillsTable, SkillsColumn),
	)
}
func newTasksStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TasksInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TasksTable, TasksColumn),
	)
}
func newMeetingsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MeetingsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MeetingsTable, MeetingsColumn),
	)
}
func newHobbiesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HobbiesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, HobbiesTable, HobbiesColumn),
	)
}
func newGoalsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GoalsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, GoalsTable, GoalsColumn),
	)
}
func newCategoriesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CategoriesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CategoriesTable, CategoriesColumn),
	)
}
func newPreferenceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PreferenceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, PreferenceTable, PreferenceColumn),
	)
}
