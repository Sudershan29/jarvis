// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/predicate"
	"backend/ent/proposal"
	"backend/ent/skill"
	"backend/ent/task"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProposalUpdate is the builder for updating Proposal entities.
type ProposalUpdate struct {
	config
	hooks    []Hook
	mutation *ProposalMutation
}

// Where appends a list predicates to the ProposalUpdate builder.
func (pu *ProposalUpdate) Where(ps ...predicate.Proposal) *ProposalUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetName sets the "name" field.
func (pu *ProposalUpdate) SetName(s string) *ProposalUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetAllocatedDuration sets the "allocated_duration" field.
func (pu *ProposalUpdate) SetAllocatedDuration(i int) *ProposalUpdate {
	pu.mutation.ResetAllocatedDuration()
	pu.mutation.SetAllocatedDuration(i)
	return pu
}

// AddAllocatedDuration adds i to the "allocated_duration" field.
func (pu *ProposalUpdate) AddAllocatedDuration(i int) *ProposalUpdate {
	pu.mutation.AddAllocatedDuration(i)
	return pu
}

// SetAchievedDuration sets the "achieved_duration" field.
func (pu *ProposalUpdate) SetAchievedDuration(i int) *ProposalUpdate {
	pu.mutation.ResetAchievedDuration()
	pu.mutation.SetAchievedDuration(i)
	return pu
}

// SetNillableAchievedDuration sets the "achieved_duration" field if the given value is not nil.
func (pu *ProposalUpdate) SetNillableAchievedDuration(i *int) *ProposalUpdate {
	if i != nil {
		pu.SetAchievedDuration(*i)
	}
	return pu
}

// AddAchievedDuration adds i to the "achieved_duration" field.
func (pu *ProposalUpdate) AddAchievedDuration(i int) *ProposalUpdate {
	pu.mutation.AddAchievedDuration(i)
	return pu
}

// ClearAchievedDuration clears the value of the "achieved_duration" field.
func (pu *ProposalUpdate) ClearAchievedDuration() *ProposalUpdate {
	pu.mutation.ClearAchievedDuration()
	return pu
}

// SetStatus sets the "status" field.
func (pu *ProposalUpdate) SetStatus(pr proposal.Status) *ProposalUpdate {
	pu.mutation.SetStatus(pr)
	return pu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pu *ProposalUpdate) SetNillableStatus(pr *proposal.Status) *ProposalUpdate {
	if pr != nil {
		pu.SetStatus(*pr)
	}
	return pu
}

// SetScheduledFor sets the "scheduled_for" field.
func (pu *ProposalUpdate) SetScheduledFor(t time.Time) *ProposalUpdate {
	pu.mutation.SetScheduledFor(t)
	return pu
}

// SetCreatedAt sets the "created_at" field.
func (pu *ProposalUpdate) SetCreatedAt(t time.Time) *ProposalUpdate {
	pu.mutation.SetCreatedAt(t)
	return pu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pu *ProposalUpdate) SetNillableCreatedAt(t *time.Time) *ProposalUpdate {
	if t != nil {
		pu.SetCreatedAt(*t)
	}
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *ProposalUpdate) SetUpdatedAt(t time.Time) *ProposalUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pu *ProposalUpdate) SetNillableUpdatedAt(t *time.Time) *ProposalUpdate {
	if t != nil {
		pu.SetUpdatedAt(*t)
	}
	return pu
}

// SetTaskID sets the "task" edge to the Task entity by ID.
func (pu *ProposalUpdate) SetTaskID(id int) *ProposalUpdate {
	pu.mutation.SetTaskID(id)
	return pu
}

// SetNillableTaskID sets the "task" edge to the Task entity by ID if the given value is not nil.
func (pu *ProposalUpdate) SetNillableTaskID(id *int) *ProposalUpdate {
	if id != nil {
		pu = pu.SetTaskID(*id)
	}
	return pu
}

// SetTask sets the "task" edge to the Task entity.
func (pu *ProposalUpdate) SetTask(t *Task) *ProposalUpdate {
	return pu.SetTaskID(t.ID)
}

// SetSkillID sets the "skill" edge to the Skill entity by ID.
func (pu *ProposalUpdate) SetSkillID(id int) *ProposalUpdate {
	pu.mutation.SetSkillID(id)
	return pu
}

// SetNillableSkillID sets the "skill" edge to the Skill entity by ID if the given value is not nil.
func (pu *ProposalUpdate) SetNillableSkillID(id *int) *ProposalUpdate {
	if id != nil {
		pu = pu.SetSkillID(*id)
	}
	return pu
}

// SetSkill sets the "skill" edge to the Skill entity.
func (pu *ProposalUpdate) SetSkill(s *Skill) *ProposalUpdate {
	return pu.SetSkillID(s.ID)
}

// Mutation returns the ProposalMutation object of the builder.
func (pu *ProposalUpdate) Mutation() *ProposalMutation {
	return pu.mutation
}

// ClearTask clears the "task" edge to the Task entity.
func (pu *ProposalUpdate) ClearTask() *ProposalUpdate {
	pu.mutation.ClearTask()
	return pu
}

// ClearSkill clears the "skill" edge to the Skill entity.
func (pu *ProposalUpdate) ClearSkill() *ProposalUpdate {
	pu.mutation.ClearSkill()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProposalUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProposalUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProposalUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProposalUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *ProposalUpdate) check() error {
	if v, ok := pu.mutation.AllocatedDuration(); ok {
		if err := proposal.AllocatedDurationValidator(v); err != nil {
			return &ValidationError{Name: "allocated_duration", err: fmt.Errorf(`ent: validator failed for field "Proposal.allocated_duration": %w`, err)}
		}
	}
	if v, ok := pu.mutation.AchievedDuration(); ok {
		if err := proposal.AchievedDurationValidator(v); err != nil {
			return &ValidationError{Name: "achieved_duration", err: fmt.Errorf(`ent: validator failed for field "Proposal.achieved_duration": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Status(); ok {
		if err := proposal.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Proposal.status": %w`, err)}
		}
	}
	return nil
}

func (pu *ProposalUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(proposal.Table, proposal.Columns, sqlgraph.NewFieldSpec(proposal.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(proposal.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.AllocatedDuration(); ok {
		_spec.SetField(proposal.FieldAllocatedDuration, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedAllocatedDuration(); ok {
		_spec.AddField(proposal.FieldAllocatedDuration, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AchievedDuration(); ok {
		_spec.SetField(proposal.FieldAchievedDuration, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedAchievedDuration(); ok {
		_spec.AddField(proposal.FieldAchievedDuration, field.TypeInt, value)
	}
	if pu.mutation.AchievedDurationCleared() {
		_spec.ClearField(proposal.FieldAchievedDuration, field.TypeInt)
	}
	if value, ok := pu.mutation.Status(); ok {
		_spec.SetField(proposal.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := pu.mutation.ScheduledFor(); ok {
		_spec.SetField(proposal.FieldScheduledFor, field.TypeTime, value)
	}
	if value, ok := pu.mutation.CreatedAt(); ok {
		_spec.SetField(proposal.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(proposal.FieldUpdatedAt, field.TypeTime, value)
	}
	if pu.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   proposal.TaskTable,
			Columns: []string{proposal.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   proposal.TaskTable,
			Columns: []string{proposal.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.SkillCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   proposal.SkillTable,
			Columns: []string{proposal.SkillColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(skill.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.SkillIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   proposal.SkillTable,
			Columns: []string{proposal.SkillColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(skill.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{proposal.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// ProposalUpdateOne is the builder for updating a single Proposal entity.
type ProposalUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProposalMutation
}

// SetName sets the "name" field.
func (puo *ProposalUpdateOne) SetName(s string) *ProposalUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetAllocatedDuration sets the "allocated_duration" field.
func (puo *ProposalUpdateOne) SetAllocatedDuration(i int) *ProposalUpdateOne {
	puo.mutation.ResetAllocatedDuration()
	puo.mutation.SetAllocatedDuration(i)
	return puo
}

// AddAllocatedDuration adds i to the "allocated_duration" field.
func (puo *ProposalUpdateOne) AddAllocatedDuration(i int) *ProposalUpdateOne {
	puo.mutation.AddAllocatedDuration(i)
	return puo
}

// SetAchievedDuration sets the "achieved_duration" field.
func (puo *ProposalUpdateOne) SetAchievedDuration(i int) *ProposalUpdateOne {
	puo.mutation.ResetAchievedDuration()
	puo.mutation.SetAchievedDuration(i)
	return puo
}

// SetNillableAchievedDuration sets the "achieved_duration" field if the given value is not nil.
func (puo *ProposalUpdateOne) SetNillableAchievedDuration(i *int) *ProposalUpdateOne {
	if i != nil {
		puo.SetAchievedDuration(*i)
	}
	return puo
}

// AddAchievedDuration adds i to the "achieved_duration" field.
func (puo *ProposalUpdateOne) AddAchievedDuration(i int) *ProposalUpdateOne {
	puo.mutation.AddAchievedDuration(i)
	return puo
}

// ClearAchievedDuration clears the value of the "achieved_duration" field.
func (puo *ProposalUpdateOne) ClearAchievedDuration() *ProposalUpdateOne {
	puo.mutation.ClearAchievedDuration()
	return puo
}

// SetStatus sets the "status" field.
func (puo *ProposalUpdateOne) SetStatus(pr proposal.Status) *ProposalUpdateOne {
	puo.mutation.SetStatus(pr)
	return puo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (puo *ProposalUpdateOne) SetNillableStatus(pr *proposal.Status) *ProposalUpdateOne {
	if pr != nil {
		puo.SetStatus(*pr)
	}
	return puo
}

// SetScheduledFor sets the "scheduled_for" field.
func (puo *ProposalUpdateOne) SetScheduledFor(t time.Time) *ProposalUpdateOne {
	puo.mutation.SetScheduledFor(t)
	return puo
}

// SetCreatedAt sets the "created_at" field.
func (puo *ProposalUpdateOne) SetCreatedAt(t time.Time) *ProposalUpdateOne {
	puo.mutation.SetCreatedAt(t)
	return puo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (puo *ProposalUpdateOne) SetNillableCreatedAt(t *time.Time) *ProposalUpdateOne {
	if t != nil {
		puo.SetCreatedAt(*t)
	}
	return puo
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *ProposalUpdateOne) SetUpdatedAt(t time.Time) *ProposalUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (puo *ProposalUpdateOne) SetNillableUpdatedAt(t *time.Time) *ProposalUpdateOne {
	if t != nil {
		puo.SetUpdatedAt(*t)
	}
	return puo
}

// SetTaskID sets the "task" edge to the Task entity by ID.
func (puo *ProposalUpdateOne) SetTaskID(id int) *ProposalUpdateOne {
	puo.mutation.SetTaskID(id)
	return puo
}

// SetNillableTaskID sets the "task" edge to the Task entity by ID if the given value is not nil.
func (puo *ProposalUpdateOne) SetNillableTaskID(id *int) *ProposalUpdateOne {
	if id != nil {
		puo = puo.SetTaskID(*id)
	}
	return puo
}

// SetTask sets the "task" edge to the Task entity.
func (puo *ProposalUpdateOne) SetTask(t *Task) *ProposalUpdateOne {
	return puo.SetTaskID(t.ID)
}

// SetSkillID sets the "skill" edge to the Skill entity by ID.
func (puo *ProposalUpdateOne) SetSkillID(id int) *ProposalUpdateOne {
	puo.mutation.SetSkillID(id)
	return puo
}

// SetNillableSkillID sets the "skill" edge to the Skill entity by ID if the given value is not nil.
func (puo *ProposalUpdateOne) SetNillableSkillID(id *int) *ProposalUpdateOne {
	if id != nil {
		puo = puo.SetSkillID(*id)
	}
	return puo
}

// SetSkill sets the "skill" edge to the Skill entity.
func (puo *ProposalUpdateOne) SetSkill(s *Skill) *ProposalUpdateOne {
	return puo.SetSkillID(s.ID)
}

// Mutation returns the ProposalMutation object of the builder.
func (puo *ProposalUpdateOne) Mutation() *ProposalMutation {
	return puo.mutation
}

// ClearTask clears the "task" edge to the Task entity.
func (puo *ProposalUpdateOne) ClearTask() *ProposalUpdateOne {
	puo.mutation.ClearTask()
	return puo
}

// ClearSkill clears the "skill" edge to the Skill entity.
func (puo *ProposalUpdateOne) ClearSkill() *ProposalUpdateOne {
	puo.mutation.ClearSkill()
	return puo
}

// Where appends a list predicates to the ProposalUpdate builder.
func (puo *ProposalUpdateOne) Where(ps ...predicate.Proposal) *ProposalUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProposalUpdateOne) Select(field string, fields ...string) *ProposalUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Proposal entity.
func (puo *ProposalUpdateOne) Save(ctx context.Context) (*Proposal, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProposalUpdateOne) SaveX(ctx context.Context) *Proposal {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProposalUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProposalUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *ProposalUpdateOne) check() error {
	if v, ok := puo.mutation.AllocatedDuration(); ok {
		if err := proposal.AllocatedDurationValidator(v); err != nil {
			return &ValidationError{Name: "allocated_duration", err: fmt.Errorf(`ent: validator failed for field "Proposal.allocated_duration": %w`, err)}
		}
	}
	if v, ok := puo.mutation.AchievedDuration(); ok {
		if err := proposal.AchievedDurationValidator(v); err != nil {
			return &ValidationError{Name: "achieved_duration", err: fmt.Errorf(`ent: validator failed for field "Proposal.achieved_duration": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Status(); ok {
		if err := proposal.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Proposal.status": %w`, err)}
		}
	}
	return nil
}

func (puo *ProposalUpdateOne) sqlSave(ctx context.Context) (_node *Proposal, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(proposal.Table, proposal.Columns, sqlgraph.NewFieldSpec(proposal.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Proposal.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, proposal.FieldID)
		for _, f := range fields {
			if !proposal.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != proposal.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(proposal.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.AllocatedDuration(); ok {
		_spec.SetField(proposal.FieldAllocatedDuration, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedAllocatedDuration(); ok {
		_spec.AddField(proposal.FieldAllocatedDuration, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AchievedDuration(); ok {
		_spec.SetField(proposal.FieldAchievedDuration, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedAchievedDuration(); ok {
		_spec.AddField(proposal.FieldAchievedDuration, field.TypeInt, value)
	}
	if puo.mutation.AchievedDurationCleared() {
		_spec.ClearField(proposal.FieldAchievedDuration, field.TypeInt)
	}
	if value, ok := puo.mutation.Status(); ok {
		_spec.SetField(proposal.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := puo.mutation.ScheduledFor(); ok {
		_spec.SetField(proposal.FieldScheduledFor, field.TypeTime, value)
	}
	if value, ok := puo.mutation.CreatedAt(); ok {
		_spec.SetField(proposal.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(proposal.FieldUpdatedAt, field.TypeTime, value)
	}
	if puo.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   proposal.TaskTable,
			Columns: []string{proposal.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   proposal.TaskTable,
			Columns: []string{proposal.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.SkillCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   proposal.SkillTable,
			Columns: []string{proposal.SkillColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(skill.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.SkillIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   proposal.SkillTable,
			Columns: []string{proposal.SkillColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(skill.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Proposal{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{proposal.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
