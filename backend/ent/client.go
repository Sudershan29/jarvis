// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"backend/ent/migrate"

	"backend/ent/calendar"
	"backend/ent/category"
	"backend/ent/goal"
	"backend/ent/hobby"
	"backend/ent/meeting"
	"backend/ent/preference"
	"backend/ent/proposal"
	"backend/ent/skill"
	"backend/ent/task"
	"backend/ent/timepreference"
	"backend/ent/user"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Calendar is the client for interacting with the Calendar builders.
	Calendar *CalendarClient
	// Category is the client for interacting with the Category builders.
	Category *CategoryClient
	// Goal is the client for interacting with the Goal builders.
	Goal *GoalClient
	// Hobby is the client for interacting with the Hobby builders.
	Hobby *HobbyClient
	// Meeting is the client for interacting with the Meeting builders.
	Meeting *MeetingClient
	// Preference is the client for interacting with the Preference builders.
	Preference *PreferenceClient
	// Proposal is the client for interacting with the Proposal builders.
	Proposal *ProposalClient
	// Skill is the client for interacting with the Skill builders.
	Skill *SkillClient
	// Task is the client for interacting with the Task builders.
	Task *TaskClient
	// TimePreference is the client for interacting with the TimePreference builders.
	TimePreference *TimePreferenceClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Calendar = NewCalendarClient(c.config)
	c.Category = NewCategoryClient(c.config)
	c.Goal = NewGoalClient(c.config)
	c.Hobby = NewHobbyClient(c.config)
	c.Meeting = NewMeetingClient(c.config)
	c.Preference = NewPreferenceClient(c.config)
	c.Proposal = NewProposalClient(c.config)
	c.Skill = NewSkillClient(c.config)
	c.Task = NewTaskClient(c.config)
	c.TimePreference = NewTimePreferenceClient(c.config)
	c.User = NewUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		Calendar:       NewCalendarClient(cfg),
		Category:       NewCategoryClient(cfg),
		Goal:           NewGoalClient(cfg),
		Hobby:          NewHobbyClient(cfg),
		Meeting:        NewMeetingClient(cfg),
		Preference:     NewPreferenceClient(cfg),
		Proposal:       NewProposalClient(cfg),
		Skill:          NewSkillClient(cfg),
		Task:           NewTaskClient(cfg),
		TimePreference: NewTimePreferenceClient(cfg),
		User:           NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		Calendar:       NewCalendarClient(cfg),
		Category:       NewCategoryClient(cfg),
		Goal:           NewGoalClient(cfg),
		Hobby:          NewHobbyClient(cfg),
		Meeting:        NewMeetingClient(cfg),
		Preference:     NewPreferenceClient(cfg),
		Proposal:       NewProposalClient(cfg),
		Skill:          NewSkillClient(cfg),
		Task:           NewTaskClient(cfg),
		TimePreference: NewTimePreferenceClient(cfg),
		User:           NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Calendar.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Calendar, c.Category, c.Goal, c.Hobby, c.Meeting, c.Preference, c.Proposal,
		c.Skill, c.Task, c.TimePreference, c.User,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Calendar, c.Category, c.Goal, c.Hobby, c.Meeting, c.Preference, c.Proposal,
		c.Skill, c.Task, c.TimePreference, c.User,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *CalendarMutation:
		return c.Calendar.mutate(ctx, m)
	case *CategoryMutation:
		return c.Category.mutate(ctx, m)
	case *GoalMutation:
		return c.Goal.mutate(ctx, m)
	case *HobbyMutation:
		return c.Hobby.mutate(ctx, m)
	case *MeetingMutation:
		return c.Meeting.mutate(ctx, m)
	case *PreferenceMutation:
		return c.Preference.mutate(ctx, m)
	case *ProposalMutation:
		return c.Proposal.mutate(ctx, m)
	case *SkillMutation:
		return c.Skill.mutate(ctx, m)
	case *TaskMutation:
		return c.Task.mutate(ctx, m)
	case *TimePreferenceMutation:
		return c.TimePreference.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// CalendarClient is a client for the Calendar schema.
type CalendarClient struct {
	config
}

// NewCalendarClient returns a client for the Calendar from the given config.
func NewCalendarClient(c config) *CalendarClient {
	return &CalendarClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `calendar.Hooks(f(g(h())))`.
func (c *CalendarClient) Use(hooks ...Hook) {
	c.hooks.Calendar = append(c.hooks.Calendar, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `calendar.Intercept(f(g(h())))`.
func (c *CalendarClient) Intercept(interceptors ...Interceptor) {
	c.inters.Calendar = append(c.inters.Calendar, interceptors...)
}

// Create returns a builder for creating a Calendar entity.
func (c *CalendarClient) Create() *CalendarCreate {
	mutation := newCalendarMutation(c.config, OpCreate)
	return &CalendarCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Calendar entities.
func (c *CalendarClient) CreateBulk(builders ...*CalendarCreate) *CalendarCreateBulk {
	return &CalendarCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Calendar.
func (c *CalendarClient) Update() *CalendarUpdate {
	mutation := newCalendarMutation(c.config, OpUpdate)
	return &CalendarUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CalendarClient) UpdateOne(ca *Calendar) *CalendarUpdateOne {
	mutation := newCalendarMutation(c.config, OpUpdateOne, withCalendar(ca))
	return &CalendarUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CalendarClient) UpdateOneID(id int) *CalendarUpdateOne {
	mutation := newCalendarMutation(c.config, OpUpdateOne, withCalendarID(id))
	return &CalendarUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Calendar.
func (c *CalendarClient) Delete() *CalendarDelete {
	mutation := newCalendarMutation(c.config, OpDelete)
	return &CalendarDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CalendarClient) DeleteOne(ca *Calendar) *CalendarDeleteOne {
	return c.DeleteOneID(ca.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CalendarClient) DeleteOneID(id int) *CalendarDeleteOne {
	builder := c.Delete().Where(calendar.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CalendarDeleteOne{builder}
}

// Query returns a query builder for Calendar.
func (c *CalendarClient) Query() *CalendarQuery {
	return &CalendarQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCalendar},
		inters: c.Interceptors(),
	}
}

// Get returns a Calendar entity by its id.
func (c *CalendarClient) Get(ctx context.Context, id int) (*Calendar, error) {
	return c.Query().Where(calendar.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CalendarClient) GetX(ctx context.Context, id int) *Calendar {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Calendar.
func (c *CalendarClient) QueryUser(ca *Calendar) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(calendar.Table, calendar.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, calendar.UserTable, calendar.UserColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CalendarClient) Hooks() []Hook {
	return c.hooks.Calendar
}

// Interceptors returns the client interceptors.
func (c *CalendarClient) Interceptors() []Interceptor {
	return c.inters.Calendar
}

func (c *CalendarClient) mutate(ctx context.Context, m *CalendarMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CalendarCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CalendarUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CalendarUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CalendarDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Calendar mutation op: %q", m.Op())
	}
}

// CategoryClient is a client for the Category schema.
type CategoryClient struct {
	config
}

// NewCategoryClient returns a client for the Category from the given config.
func NewCategoryClient(c config) *CategoryClient {
	return &CategoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `category.Hooks(f(g(h())))`.
func (c *CategoryClient) Use(hooks ...Hook) {
	c.hooks.Category = append(c.hooks.Category, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `category.Intercept(f(g(h())))`.
func (c *CategoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.Category = append(c.inters.Category, interceptors...)
}

// Create returns a builder for creating a Category entity.
func (c *CategoryClient) Create() *CategoryCreate {
	mutation := newCategoryMutation(c.config, OpCreate)
	return &CategoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Category entities.
func (c *CategoryClient) CreateBulk(builders ...*CategoryCreate) *CategoryCreateBulk {
	return &CategoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Category.
func (c *CategoryClient) Update() *CategoryUpdate {
	mutation := newCategoryMutation(c.config, OpUpdate)
	return &CategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CategoryClient) UpdateOne(ca *Category) *CategoryUpdateOne {
	mutation := newCategoryMutation(c.config, OpUpdateOne, withCategory(ca))
	return &CategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CategoryClient) UpdateOneID(id int) *CategoryUpdateOne {
	mutation := newCategoryMutation(c.config, OpUpdateOne, withCategoryID(id))
	return &CategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Category.
func (c *CategoryClient) Delete() *CategoryDelete {
	mutation := newCategoryMutation(c.config, OpDelete)
	return &CategoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CategoryClient) DeleteOne(ca *Category) *CategoryDeleteOne {
	return c.DeleteOneID(ca.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CategoryClient) DeleteOneID(id int) *CategoryDeleteOne {
	builder := c.Delete().Where(category.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CategoryDeleteOne{builder}
}

// Query returns a query builder for Category.
func (c *CategoryClient) Query() *CategoryQuery {
	return &CategoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCategory},
		inters: c.Interceptors(),
	}
}

// Get returns a Category entity by its id.
func (c *CategoryClient) Get(ctx context.Context, id int) (*Category, error) {
	return c.Query().Where(category.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CategoryClient) GetX(ctx context.Context, id int) *Category {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySkills queries the skills edge of a Category.
func (c *CategoryClient) QuerySkills(ca *Category) *SkillQuery {
	query := (&SkillClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(category.Table, category.FieldID, id),
			sqlgraph.To(skill.Table, skill.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, category.SkillsTable, category.SkillsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTasks queries the tasks edge of a Category.
func (c *CategoryClient) QueryTasks(ca *Category) *TaskQuery {
	query := (&TaskClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(category.Table, category.FieldID, id),
			sqlgraph.To(task.Table, task.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, category.TasksTable, category.TasksPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGoals queries the goals edge of a Category.
func (c *CategoryClient) QueryGoals(ca *Category) *GoalQuery {
	query := (&GoalClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(category.Table, category.FieldID, id),
			sqlgraph.To(goal.Table, goal.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, category.GoalsTable, category.GoalsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHobbies queries the hobbies edge of a Category.
func (c *CategoryClient) QueryHobbies(ca *Category) *HobbyQuery {
	query := (&HobbyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(category.Table, category.FieldID, id),
			sqlgraph.To(hobby.Table, hobby.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, category.HobbiesTable, category.HobbiesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a Category.
func (c *CategoryClient) QueryUser(ca *Category) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(category.Table, category.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, category.UserTable, category.UserColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CategoryClient) Hooks() []Hook {
	return c.hooks.Category
}

// Interceptors returns the client interceptors.
func (c *CategoryClient) Interceptors() []Interceptor {
	return c.inters.Category
}

func (c *CategoryClient) mutate(ctx context.Context, m *CategoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CategoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CategoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Category mutation op: %q", m.Op())
	}
}

// GoalClient is a client for the Goal schema.
type GoalClient struct {
	config
}

// NewGoalClient returns a client for the Goal from the given config.
func NewGoalClient(c config) *GoalClient {
	return &GoalClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `goal.Hooks(f(g(h())))`.
func (c *GoalClient) Use(hooks ...Hook) {
	c.hooks.Goal = append(c.hooks.Goal, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `goal.Intercept(f(g(h())))`.
func (c *GoalClient) Intercept(interceptors ...Interceptor) {
	c.inters.Goal = append(c.inters.Goal, interceptors...)
}

// Create returns a builder for creating a Goal entity.
func (c *GoalClient) Create() *GoalCreate {
	mutation := newGoalMutation(c.config, OpCreate)
	return &GoalCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Goal entities.
func (c *GoalClient) CreateBulk(builders ...*GoalCreate) *GoalCreateBulk {
	return &GoalCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Goal.
func (c *GoalClient) Update() *GoalUpdate {
	mutation := newGoalMutation(c.config, OpUpdate)
	return &GoalUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GoalClient) UpdateOne(_go *Goal) *GoalUpdateOne {
	mutation := newGoalMutation(c.config, OpUpdateOne, withGoal(_go))
	return &GoalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GoalClient) UpdateOneID(id int) *GoalUpdateOne {
	mutation := newGoalMutation(c.config, OpUpdateOne, withGoalID(id))
	return &GoalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Goal.
func (c *GoalClient) Delete() *GoalDelete {
	mutation := newGoalMutation(c.config, OpDelete)
	return &GoalDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GoalClient) DeleteOne(_go *Goal) *GoalDeleteOne {
	return c.DeleteOneID(_go.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GoalClient) DeleteOneID(id int) *GoalDeleteOne {
	builder := c.Delete().Where(goal.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GoalDeleteOne{builder}
}

// Query returns a query builder for Goal.
func (c *GoalClient) Query() *GoalQuery {
	return &GoalQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeGoal},
		inters: c.Interceptors(),
	}
}

// Get returns a Goal entity by its id.
func (c *GoalClient) Get(ctx context.Context, id int) (*Goal, error) {
	return c.Query().Where(goal.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GoalClient) GetX(ctx context.Context, id int) *Goal {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCategories queries the categories edge of a Goal.
func (c *GoalClient) QueryCategories(_go *Goal) *CategoryQuery {
	query := (&CategoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _go.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(goal.Table, goal.FieldID, id),
			sqlgraph.To(category.Table, category.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, goal.CategoriesTable, goal.CategoriesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(_go.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a Goal.
func (c *GoalClient) QueryUser(_go *Goal) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _go.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(goal.Table, goal.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, goal.UserTable, goal.UserColumn),
		)
		fromV = sqlgraph.Neighbors(_go.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GoalClient) Hooks() []Hook {
	return c.hooks.Goal
}

// Interceptors returns the client interceptors.
func (c *GoalClient) Interceptors() []Interceptor {
	return c.inters.Goal
}

func (c *GoalClient) mutate(ctx context.Context, m *GoalMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&GoalCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&GoalUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&GoalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&GoalDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Goal mutation op: %q", m.Op())
	}
}

// HobbyClient is a client for the Hobby schema.
type HobbyClient struct {
	config
}

// NewHobbyClient returns a client for the Hobby from the given config.
func NewHobbyClient(c config) *HobbyClient {
	return &HobbyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `hobby.Hooks(f(g(h())))`.
func (c *HobbyClient) Use(hooks ...Hook) {
	c.hooks.Hobby = append(c.hooks.Hobby, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `hobby.Intercept(f(g(h())))`.
func (c *HobbyClient) Intercept(interceptors ...Interceptor) {
	c.inters.Hobby = append(c.inters.Hobby, interceptors...)
}

// Create returns a builder for creating a Hobby entity.
func (c *HobbyClient) Create() *HobbyCreate {
	mutation := newHobbyMutation(c.config, OpCreate)
	return &HobbyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Hobby entities.
func (c *HobbyClient) CreateBulk(builders ...*HobbyCreate) *HobbyCreateBulk {
	return &HobbyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Hobby.
func (c *HobbyClient) Update() *HobbyUpdate {
	mutation := newHobbyMutation(c.config, OpUpdate)
	return &HobbyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HobbyClient) UpdateOne(h *Hobby) *HobbyUpdateOne {
	mutation := newHobbyMutation(c.config, OpUpdateOne, withHobby(h))
	return &HobbyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HobbyClient) UpdateOneID(id int) *HobbyUpdateOne {
	mutation := newHobbyMutation(c.config, OpUpdateOne, withHobbyID(id))
	return &HobbyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Hobby.
func (c *HobbyClient) Delete() *HobbyDelete {
	mutation := newHobbyMutation(c.config, OpDelete)
	return &HobbyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *HobbyClient) DeleteOne(h *Hobby) *HobbyDeleteOne {
	return c.DeleteOneID(h.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *HobbyClient) DeleteOneID(id int) *HobbyDeleteOne {
	builder := c.Delete().Where(hobby.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HobbyDeleteOne{builder}
}

// Query returns a query builder for Hobby.
func (c *HobbyClient) Query() *HobbyQuery {
	return &HobbyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeHobby},
		inters: c.Interceptors(),
	}
}

// Get returns a Hobby entity by its id.
func (c *HobbyClient) Get(ctx context.Context, id int) (*Hobby, error) {
	return c.Query().Where(hobby.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HobbyClient) GetX(ctx context.Context, id int) *Hobby {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCategories queries the categories edge of a Hobby.
func (c *HobbyClient) QueryCategories(h *Hobby) *CategoryQuery {
	query := (&CategoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := h.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hobby.Table, hobby.FieldID, id),
			sqlgraph.To(category.Table, category.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, hobby.CategoriesTable, hobby.CategoriesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(h.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a Hobby.
func (c *HobbyClient) QueryUser(h *Hobby) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := h.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hobby.Table, hobby.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hobby.UserTable, hobby.UserColumn),
		)
		fromV = sqlgraph.Neighbors(h.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *HobbyClient) Hooks() []Hook {
	return c.hooks.Hobby
}

// Interceptors returns the client interceptors.
func (c *HobbyClient) Interceptors() []Interceptor {
	return c.inters.Hobby
}

func (c *HobbyClient) mutate(ctx context.Context, m *HobbyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&HobbyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&HobbyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&HobbyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&HobbyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Hobby mutation op: %q", m.Op())
	}
}

// MeetingClient is a client for the Meeting schema.
type MeetingClient struct {
	config
}

// NewMeetingClient returns a client for the Meeting from the given config.
func NewMeetingClient(c config) *MeetingClient {
	return &MeetingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `meeting.Hooks(f(g(h())))`.
func (c *MeetingClient) Use(hooks ...Hook) {
	c.hooks.Meeting = append(c.hooks.Meeting, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `meeting.Intercept(f(g(h())))`.
func (c *MeetingClient) Intercept(interceptors ...Interceptor) {
	c.inters.Meeting = append(c.inters.Meeting, interceptors...)
}

// Create returns a builder for creating a Meeting entity.
func (c *MeetingClient) Create() *MeetingCreate {
	mutation := newMeetingMutation(c.config, OpCreate)
	return &MeetingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Meeting entities.
func (c *MeetingClient) CreateBulk(builders ...*MeetingCreate) *MeetingCreateBulk {
	return &MeetingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Meeting.
func (c *MeetingClient) Update() *MeetingUpdate {
	mutation := newMeetingMutation(c.config, OpUpdate)
	return &MeetingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MeetingClient) UpdateOne(m *Meeting) *MeetingUpdateOne {
	mutation := newMeetingMutation(c.config, OpUpdateOne, withMeeting(m))
	return &MeetingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MeetingClient) UpdateOneID(id int) *MeetingUpdateOne {
	mutation := newMeetingMutation(c.config, OpUpdateOne, withMeetingID(id))
	return &MeetingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Meeting.
func (c *MeetingClient) Delete() *MeetingDelete {
	mutation := newMeetingMutation(c.config, OpDelete)
	return &MeetingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MeetingClient) DeleteOne(m *Meeting) *MeetingDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MeetingClient) DeleteOneID(id int) *MeetingDeleteOne {
	builder := c.Delete().Where(meeting.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MeetingDeleteOne{builder}
}

// Query returns a query builder for Meeting.
func (c *MeetingClient) Query() *MeetingQuery {
	return &MeetingQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMeeting},
		inters: c.Interceptors(),
	}
}

// Get returns a Meeting entity by its id.
func (c *MeetingClient) Get(ctx context.Context, id int) (*Meeting, error) {
	return c.Query().Where(meeting.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MeetingClient) GetX(ctx context.Context, id int) *Meeting {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Meeting.
func (c *MeetingClient) QueryUser(m *Meeting) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(meeting.Table, meeting.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, meeting.UserTable, meeting.UserColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MeetingClient) Hooks() []Hook {
	return c.hooks.Meeting
}

// Interceptors returns the client interceptors.
func (c *MeetingClient) Interceptors() []Interceptor {
	return c.inters.Meeting
}

func (c *MeetingClient) mutate(ctx context.Context, m *MeetingMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MeetingCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MeetingUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MeetingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MeetingDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Meeting mutation op: %q", m.Op())
	}
}

// PreferenceClient is a client for the Preference schema.
type PreferenceClient struct {
	config
}

// NewPreferenceClient returns a client for the Preference from the given config.
func NewPreferenceClient(c config) *PreferenceClient {
	return &PreferenceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `preference.Hooks(f(g(h())))`.
func (c *PreferenceClient) Use(hooks ...Hook) {
	c.hooks.Preference = append(c.hooks.Preference, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `preference.Intercept(f(g(h())))`.
func (c *PreferenceClient) Intercept(interceptors ...Interceptor) {
	c.inters.Preference = append(c.inters.Preference, interceptors...)
}

// Create returns a builder for creating a Preference entity.
func (c *PreferenceClient) Create() *PreferenceCreate {
	mutation := newPreferenceMutation(c.config, OpCreate)
	return &PreferenceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Preference entities.
func (c *PreferenceClient) CreateBulk(builders ...*PreferenceCreate) *PreferenceCreateBulk {
	return &PreferenceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Preference.
func (c *PreferenceClient) Update() *PreferenceUpdate {
	mutation := newPreferenceMutation(c.config, OpUpdate)
	return &PreferenceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PreferenceClient) UpdateOne(pr *Preference) *PreferenceUpdateOne {
	mutation := newPreferenceMutation(c.config, OpUpdateOne, withPreference(pr))
	return &PreferenceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PreferenceClient) UpdateOneID(id int) *PreferenceUpdateOne {
	mutation := newPreferenceMutation(c.config, OpUpdateOne, withPreferenceID(id))
	return &PreferenceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Preference.
func (c *PreferenceClient) Delete() *PreferenceDelete {
	mutation := newPreferenceMutation(c.config, OpDelete)
	return &PreferenceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PreferenceClient) DeleteOne(pr *Preference) *PreferenceDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PreferenceClient) DeleteOneID(id int) *PreferenceDeleteOne {
	builder := c.Delete().Where(preference.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PreferenceDeleteOne{builder}
}

// Query returns a query builder for Preference.
func (c *PreferenceClient) Query() *PreferenceQuery {
	return &PreferenceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePreference},
		inters: c.Interceptors(),
	}
}

// Get returns a Preference entity by its id.
func (c *PreferenceClient) Get(ctx context.Context, id int) (*Preference, error) {
	return c.Query().Where(preference.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PreferenceClient) GetX(ctx context.Context, id int) *Preference {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Preference.
func (c *PreferenceClient) QueryUser(pr *Preference) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(preference.Table, preference.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, preference.UserTable, preference.UserColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PreferenceClient) Hooks() []Hook {
	return c.hooks.Preference
}

// Interceptors returns the client interceptors.
func (c *PreferenceClient) Interceptors() []Interceptor {
	return c.inters.Preference
}

func (c *PreferenceClient) mutate(ctx context.Context, m *PreferenceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PreferenceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PreferenceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PreferenceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PreferenceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Preference mutation op: %q", m.Op())
	}
}

// ProposalClient is a client for the Proposal schema.
type ProposalClient struct {
	config
}

// NewProposalClient returns a client for the Proposal from the given config.
func NewProposalClient(c config) *ProposalClient {
	return &ProposalClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `proposal.Hooks(f(g(h())))`.
func (c *ProposalClient) Use(hooks ...Hook) {
	c.hooks.Proposal = append(c.hooks.Proposal, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `proposal.Intercept(f(g(h())))`.
func (c *ProposalClient) Intercept(interceptors ...Interceptor) {
	c.inters.Proposal = append(c.inters.Proposal, interceptors...)
}

// Create returns a builder for creating a Proposal entity.
func (c *ProposalClient) Create() *ProposalCreate {
	mutation := newProposalMutation(c.config, OpCreate)
	return &ProposalCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Proposal entities.
func (c *ProposalClient) CreateBulk(builders ...*ProposalCreate) *ProposalCreateBulk {
	return &ProposalCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Proposal.
func (c *ProposalClient) Update() *ProposalUpdate {
	mutation := newProposalMutation(c.config, OpUpdate)
	return &ProposalUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProposalClient) UpdateOne(pr *Proposal) *ProposalUpdateOne {
	mutation := newProposalMutation(c.config, OpUpdateOne, withProposal(pr))
	return &ProposalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProposalClient) UpdateOneID(id int) *ProposalUpdateOne {
	mutation := newProposalMutation(c.config, OpUpdateOne, withProposalID(id))
	return &ProposalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Proposal.
func (c *ProposalClient) Delete() *ProposalDelete {
	mutation := newProposalMutation(c.config, OpDelete)
	return &ProposalDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProposalClient) DeleteOne(pr *Proposal) *ProposalDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProposalClient) DeleteOneID(id int) *ProposalDeleteOne {
	builder := c.Delete().Where(proposal.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProposalDeleteOne{builder}
}

// Query returns a query builder for Proposal.
func (c *ProposalClient) Query() *ProposalQuery {
	return &ProposalQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProposal},
		inters: c.Interceptors(),
	}
}

// Get returns a Proposal entity by its id.
func (c *ProposalClient) Get(ctx context.Context, id int) (*Proposal, error) {
	return c.Query().Where(proposal.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProposalClient) GetX(ctx context.Context, id int) *Proposal {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTask queries the task edge of a Proposal.
func (c *ProposalClient) QueryTask(pr *Proposal) *TaskQuery {
	query := (&TaskClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(proposal.Table, proposal.FieldID, id),
			sqlgraph.To(task.Table, task.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, proposal.TaskTable, proposal.TaskColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySkill queries the skill edge of a Proposal.
func (c *ProposalClient) QuerySkill(pr *Proposal) *SkillQuery {
	query := (&SkillClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(proposal.Table, proposal.FieldID, id),
			sqlgraph.To(skill.Table, skill.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, proposal.SkillTable, proposal.SkillColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProposalClient) Hooks() []Hook {
	return c.hooks.Proposal
}

// Interceptors returns the client interceptors.
func (c *ProposalClient) Interceptors() []Interceptor {
	return c.inters.Proposal
}

func (c *ProposalClient) mutate(ctx context.Context, m *ProposalMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProposalCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProposalUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProposalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProposalDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Proposal mutation op: %q", m.Op())
	}
}

// SkillClient is a client for the Skill schema.
type SkillClient struct {
	config
}

// NewSkillClient returns a client for the Skill from the given config.
func NewSkillClient(c config) *SkillClient {
	return &SkillClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `skill.Hooks(f(g(h())))`.
func (c *SkillClient) Use(hooks ...Hook) {
	c.hooks.Skill = append(c.hooks.Skill, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `skill.Intercept(f(g(h())))`.
func (c *SkillClient) Intercept(interceptors ...Interceptor) {
	c.inters.Skill = append(c.inters.Skill, interceptors...)
}

// Create returns a builder for creating a Skill entity.
func (c *SkillClient) Create() *SkillCreate {
	mutation := newSkillMutation(c.config, OpCreate)
	return &SkillCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Skill entities.
func (c *SkillClient) CreateBulk(builders ...*SkillCreate) *SkillCreateBulk {
	return &SkillCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Skill.
func (c *SkillClient) Update() *SkillUpdate {
	mutation := newSkillMutation(c.config, OpUpdate)
	return &SkillUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SkillClient) UpdateOne(s *Skill) *SkillUpdateOne {
	mutation := newSkillMutation(c.config, OpUpdateOne, withSkill(s))
	return &SkillUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SkillClient) UpdateOneID(id int) *SkillUpdateOne {
	mutation := newSkillMutation(c.config, OpUpdateOne, withSkillID(id))
	return &SkillUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Skill.
func (c *SkillClient) Delete() *SkillDelete {
	mutation := newSkillMutation(c.config, OpDelete)
	return &SkillDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SkillClient) DeleteOne(s *Skill) *SkillDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SkillClient) DeleteOneID(id int) *SkillDeleteOne {
	builder := c.Delete().Where(skill.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SkillDeleteOne{builder}
}

// Query returns a query builder for Skill.
func (c *SkillClient) Query() *SkillQuery {
	return &SkillQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSkill},
		inters: c.Interceptors(),
	}
}

// Get returns a Skill entity by its id.
func (c *SkillClient) Get(ctx context.Context, id int) (*Skill, error) {
	return c.Query().Where(skill.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SkillClient) GetX(ctx context.Context, id int) *Skill {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCategories queries the categories edge of a Skill.
func (c *SkillClient) QueryCategories(s *Skill) *CategoryQuery {
	query := (&CategoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(skill.Table, skill.FieldID, id),
			sqlgraph.To(category.Table, category.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, skill.CategoriesTable, skill.CategoriesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a Skill.
func (c *SkillClient) QueryUser(s *Skill) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(skill.Table, skill.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, skill.UserTable, skill.UserColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTimePreferences queries the time_preferences edge of a Skill.
func (c *SkillClient) QueryTimePreferences(s *Skill) *TimePreferenceQuery {
	query := (&TimePreferenceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(skill.Table, skill.FieldID, id),
			sqlgraph.To(timepreference.Table, timepreference.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, skill.TimePreferencesTable, skill.TimePreferencesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProposals queries the proposals edge of a Skill.
func (c *SkillClient) QueryProposals(s *Skill) *ProposalQuery {
	query := (&ProposalClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(skill.Table, skill.FieldID, id),
			sqlgraph.To(proposal.Table, proposal.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, skill.ProposalsTable, skill.ProposalsColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SkillClient) Hooks() []Hook {
	return c.hooks.Skill
}

// Interceptors returns the client interceptors.
func (c *SkillClient) Interceptors() []Interceptor {
	return c.inters.Skill
}

func (c *SkillClient) mutate(ctx context.Context, m *SkillMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SkillCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SkillUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SkillUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SkillDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Skill mutation op: %q", m.Op())
	}
}

// TaskClient is a client for the Task schema.
type TaskClient struct {
	config
}

// NewTaskClient returns a client for the Task from the given config.
func NewTaskClient(c config) *TaskClient {
	return &TaskClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `task.Hooks(f(g(h())))`.
func (c *TaskClient) Use(hooks ...Hook) {
	c.hooks.Task = append(c.hooks.Task, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `task.Intercept(f(g(h())))`.
func (c *TaskClient) Intercept(interceptors ...Interceptor) {
	c.inters.Task = append(c.inters.Task, interceptors...)
}

// Create returns a builder for creating a Task entity.
func (c *TaskClient) Create() *TaskCreate {
	mutation := newTaskMutation(c.config, OpCreate)
	return &TaskCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Task entities.
func (c *TaskClient) CreateBulk(builders ...*TaskCreate) *TaskCreateBulk {
	return &TaskCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Task.
func (c *TaskClient) Update() *TaskUpdate {
	mutation := newTaskMutation(c.config, OpUpdate)
	return &TaskUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TaskClient) UpdateOne(t *Task) *TaskUpdateOne {
	mutation := newTaskMutation(c.config, OpUpdateOne, withTask(t))
	return &TaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TaskClient) UpdateOneID(id int) *TaskUpdateOne {
	mutation := newTaskMutation(c.config, OpUpdateOne, withTaskID(id))
	return &TaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Task.
func (c *TaskClient) Delete() *TaskDelete {
	mutation := newTaskMutation(c.config, OpDelete)
	return &TaskDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TaskClient) DeleteOne(t *Task) *TaskDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TaskClient) DeleteOneID(id int) *TaskDeleteOne {
	builder := c.Delete().Where(task.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TaskDeleteOne{builder}
}

// Query returns a query builder for Task.
func (c *TaskClient) Query() *TaskQuery {
	return &TaskQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTask},
		inters: c.Interceptors(),
	}
}

// Get returns a Task entity by its id.
func (c *TaskClient) Get(ctx context.Context, id int) (*Task, error) {
	return c.Query().Where(task.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TaskClient) GetX(ctx context.Context, id int) *Task {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCategories queries the categories edge of a Task.
func (c *TaskClient) QueryCategories(t *Task) *CategoryQuery {
	query := (&CategoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(task.Table, task.FieldID, id),
			sqlgraph.To(category.Table, category.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, task.CategoriesTable, task.CategoriesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a Task.
func (c *TaskClient) QueryUser(t *Task) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(task.Table, task.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, task.UserTable, task.UserColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTimePreferences queries the time_preferences edge of a Task.
func (c *TaskClient) QueryTimePreferences(t *Task) *TimePreferenceQuery {
	query := (&TimePreferenceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(task.Table, task.FieldID, id),
			sqlgraph.To(timepreference.Table, timepreference.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, task.TimePreferencesTable, task.TimePreferencesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProposals queries the proposals edge of a Task.
func (c *TaskClient) QueryProposals(t *Task) *ProposalQuery {
	query := (&ProposalClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(task.Table, task.FieldID, id),
			sqlgraph.To(proposal.Table, proposal.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, task.ProposalsTable, task.ProposalsColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TaskClient) Hooks() []Hook {
	return c.hooks.Task
}

// Interceptors returns the client interceptors.
func (c *TaskClient) Interceptors() []Interceptor {
	return c.inters.Task
}

func (c *TaskClient) mutate(ctx context.Context, m *TaskMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TaskCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TaskUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TaskDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Task mutation op: %q", m.Op())
	}
}

// TimePreferenceClient is a client for the TimePreference schema.
type TimePreferenceClient struct {
	config
}

// NewTimePreferenceClient returns a client for the TimePreference from the given config.
func NewTimePreferenceClient(c config) *TimePreferenceClient {
	return &TimePreferenceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `timepreference.Hooks(f(g(h())))`.
func (c *TimePreferenceClient) Use(hooks ...Hook) {
	c.hooks.TimePreference = append(c.hooks.TimePreference, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `timepreference.Intercept(f(g(h())))`.
func (c *TimePreferenceClient) Intercept(interceptors ...Interceptor) {
	c.inters.TimePreference = append(c.inters.TimePreference, interceptors...)
}

// Create returns a builder for creating a TimePreference entity.
func (c *TimePreferenceClient) Create() *TimePreferenceCreate {
	mutation := newTimePreferenceMutation(c.config, OpCreate)
	return &TimePreferenceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TimePreference entities.
func (c *TimePreferenceClient) CreateBulk(builders ...*TimePreferenceCreate) *TimePreferenceCreateBulk {
	return &TimePreferenceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TimePreference.
func (c *TimePreferenceClient) Update() *TimePreferenceUpdate {
	mutation := newTimePreferenceMutation(c.config, OpUpdate)
	return &TimePreferenceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TimePreferenceClient) UpdateOne(tp *TimePreference) *TimePreferenceUpdateOne {
	mutation := newTimePreferenceMutation(c.config, OpUpdateOne, withTimePreference(tp))
	return &TimePreferenceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TimePreferenceClient) UpdateOneID(id int) *TimePreferenceUpdateOne {
	mutation := newTimePreferenceMutation(c.config, OpUpdateOne, withTimePreferenceID(id))
	return &TimePreferenceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TimePreference.
func (c *TimePreferenceClient) Delete() *TimePreferenceDelete {
	mutation := newTimePreferenceMutation(c.config, OpDelete)
	return &TimePreferenceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TimePreferenceClient) DeleteOne(tp *TimePreference) *TimePreferenceDeleteOne {
	return c.DeleteOneID(tp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TimePreferenceClient) DeleteOneID(id int) *TimePreferenceDeleteOne {
	builder := c.Delete().Where(timepreference.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TimePreferenceDeleteOne{builder}
}

// Query returns a query builder for TimePreference.
func (c *TimePreferenceClient) Query() *TimePreferenceQuery {
	return &TimePreferenceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTimePreference},
		inters: c.Interceptors(),
	}
}

// Get returns a TimePreference entity by its id.
func (c *TimePreferenceClient) Get(ctx context.Context, id int) (*TimePreference, error) {
	return c.Query().Where(timepreference.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TimePreferenceClient) GetX(ctx context.Context, id int) *TimePreference {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySkills queries the skills edge of a TimePreference.
func (c *TimePreferenceClient) QuerySkills(tp *TimePreference) *SkillQuery {
	query := (&SkillClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := tp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(timepreference.Table, timepreference.FieldID, id),
			sqlgraph.To(skill.Table, skill.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, timepreference.SkillsTable, timepreference.SkillsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(tp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTasks queries the tasks edge of a TimePreference.
func (c *TimePreferenceClient) QueryTasks(tp *TimePreference) *TaskQuery {
	query := (&TaskClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := tp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(timepreference.Table, timepreference.FieldID, id),
			sqlgraph.To(task.Table, task.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, timepreference.TasksTable, timepreference.TasksPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(tp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TimePreferenceClient) Hooks() []Hook {
	return c.hooks.TimePreference
}

// Interceptors returns the client interceptors.
func (c *TimePreferenceClient) Interceptors() []Interceptor {
	return c.inters.TimePreference
}

func (c *TimePreferenceClient) mutate(ctx context.Context, m *TimePreferenceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TimePreferenceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TimePreferenceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TimePreferenceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TimePreferenceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown TimePreference mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySkills queries the skills edge of a User.
func (c *UserClient) QuerySkills(u *User) *SkillQuery {
	query := (&SkillClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(skill.Table, skill.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.SkillsTable, user.SkillsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCalendars queries the calendars edge of a User.
func (c *UserClient) QueryCalendars(u *User) *CalendarQuery {
	query := (&CalendarClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(calendar.Table, calendar.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.CalendarsTable, user.CalendarsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTasks queries the tasks edge of a User.
func (c *UserClient) QueryTasks(u *User) *TaskQuery {
	query := (&TaskClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(task.Table, task.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.TasksTable, user.TasksColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMeetings queries the meetings edge of a User.
func (c *UserClient) QueryMeetings(u *User) *MeetingQuery {
	query := (&MeetingClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(meeting.Table, meeting.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.MeetingsTable, user.MeetingsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHobbies queries the hobbies edge of a User.
func (c *UserClient) QueryHobbies(u *User) *HobbyQuery {
	query := (&HobbyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(hobby.Table, hobby.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.HobbiesTable, user.HobbiesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGoals queries the goals edge of a User.
func (c *UserClient) QueryGoals(u *User) *GoalQuery {
	query := (&GoalClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(goal.Table, goal.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.GoalsTable, user.GoalsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCategories queries the categories edge of a User.
func (c *UserClient) QueryCategories(u *User) *CategoryQuery {
	query := (&CategoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(category.Table, category.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.CategoriesTable, user.CategoriesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPreference queries the preference edge of a User.
func (c *UserClient) QueryPreference(u *User) *PreferenceQuery {
	query := (&PreferenceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(preference.Table, preference.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, user.PreferenceTable, user.PreferenceColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Calendar, Category, Goal, Hobby, Meeting, Preference, Proposal, Skill, Task,
		TimePreference, User []ent.Hook
	}
	inters struct {
		Calendar, Category, Goal, Hobby, Meeting, Preference, Proposal, Skill, Task,
		TimePreference, User []ent.Interceptor
	}
)
