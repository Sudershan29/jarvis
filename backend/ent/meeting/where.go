// Code generated by ent, DO NOT EDIT.

package meeting

import (
	"backend/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Meeting {
	return predicate.Meeting(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Meeting {
	return predicate.Meeting(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Meeting {
	return predicate.Meeting(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Meeting {
	return predicate.Meeting(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Meeting {
	return predicate.Meeting(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Meeting {
	return predicate.Meeting(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Meeting {
	return predicate.Meeting(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Meeting {
	return predicate.Meeting(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Meeting {
	return predicate.Meeting(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Meeting {
	return predicate.Meeting(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Meeting {
	return predicate.Meeting(sql.FieldEQ(FieldDescription, v))
}

// Where applies equality check predicate on the "where" field. It's identical to WhereEQ.
func Where(v string) predicate.Meeting {
	return predicate.Meeting(sql.FieldEQ(FieldWhere, v))
}

// Whom applies equality check predicate on the "whom" field. It's identical to WhomEQ.
func Whom(v string) predicate.Meeting {
	return predicate.Meeting(sql.FieldEQ(FieldWhom, v))
}

// Duration applies equality check predicate on the "duration" field. It's identical to DurationEQ.
func Duration(v int) predicate.Meeting {
	return predicate.Meeting(sql.FieldEQ(FieldDuration, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Meeting {
	return predicate.Meeting(sql.FieldEQ(FieldCreatedAt, v))
}

// When applies equality check predicate on the "when" field. It's identical to WhenEQ.
func When(v time.Time) predicate.Meeting {
	return predicate.Meeting(sql.FieldEQ(FieldWhen, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Meeting {
	return predicate.Meeting(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Meeting {
	return predicate.Meeting(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Meeting {
	return predicate.Meeting(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Meeting {
	return predicate.Meeting(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Meeting {
	return predicate.Meeting(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Meeting {
	return predicate.Meeting(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Meeting {
	return predicate.Meeting(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Meeting {
	return predicate.Meeting(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Meeting {
	return predicate.Meeting(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Meeting {
	return predicate.Meeting(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Meeting {
	return predicate.Meeting(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Meeting {
	return predicate.Meeting(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Meeting {
	return predicate.Meeting(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Meeting {
	return predicate.Meeting(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Meeting {
	return predicate.Meeting(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Meeting {
	return predicate.Meeting(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Meeting {
	return predicate.Meeting(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Meeting {
	return predicate.Meeting(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Meeting {
	return predicate.Meeting(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Meeting {
	return predicate.Meeting(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Meeting {
	return predicate.Meeting(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Meeting {
	return predicate.Meeting(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Meeting {
	return predicate.Meeting(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Meeting {
	return predicate.Meeting(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Meeting {
	return predicate.Meeting(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Meeting {
	return predicate.Meeting(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Meeting {
	return predicate.Meeting(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Meeting {
	return predicate.Meeting(sql.FieldContainsFold(FieldDescription, v))
}

// WhereEQ applies the EQ predicate on the "where" field.
func WhereEQ(v string) predicate.Meeting {
	return predicate.Meeting(sql.FieldEQ(FieldWhere, v))
}

// WhereNEQ applies the NEQ predicate on the "where" field.
func WhereNEQ(v string) predicate.Meeting {
	return predicate.Meeting(sql.FieldNEQ(FieldWhere, v))
}

// WhereIn applies the In predicate on the "where" field.
func WhereIn(vs ...string) predicate.Meeting {
	return predicate.Meeting(sql.FieldIn(FieldWhere, vs...))
}

// WhereNotIn applies the NotIn predicate on the "where" field.
func WhereNotIn(vs ...string) predicate.Meeting {
	return predicate.Meeting(sql.FieldNotIn(FieldWhere, vs...))
}

// WhereGT applies the GT predicate on the "where" field.
func WhereGT(v string) predicate.Meeting {
	return predicate.Meeting(sql.FieldGT(FieldWhere, v))
}

// WhereGTE applies the GTE predicate on the "where" field.
func WhereGTE(v string) predicate.Meeting {
	return predicate.Meeting(sql.FieldGTE(FieldWhere, v))
}

// WhereLT applies the LT predicate on the "where" field.
func WhereLT(v string) predicate.Meeting {
	return predicate.Meeting(sql.FieldLT(FieldWhere, v))
}

// WhereLTE applies the LTE predicate on the "where" field.
func WhereLTE(v string) predicate.Meeting {
	return predicate.Meeting(sql.FieldLTE(FieldWhere, v))
}

// WhereContains applies the Contains predicate on the "where" field.
func WhereContains(v string) predicate.Meeting {
	return predicate.Meeting(sql.FieldContains(FieldWhere, v))
}

// WhereHasPrefix applies the HasPrefix predicate on the "where" field.
func WhereHasPrefix(v string) predicate.Meeting {
	return predicate.Meeting(sql.FieldHasPrefix(FieldWhere, v))
}

// WhereHasSuffix applies the HasSuffix predicate on the "where" field.
func WhereHasSuffix(v string) predicate.Meeting {
	return predicate.Meeting(sql.FieldHasSuffix(FieldWhere, v))
}

// WhereIsNil applies the IsNil predicate on the "where" field.
func WhereIsNil() predicate.Meeting {
	return predicate.Meeting(sql.FieldIsNull(FieldWhere))
}

// WhereNotNil applies the NotNil predicate on the "where" field.
func WhereNotNil() predicate.Meeting {
	return predicate.Meeting(sql.FieldNotNull(FieldWhere))
}

// WhereEqualFold applies the EqualFold predicate on the "where" field.
func WhereEqualFold(v string) predicate.Meeting {
	return predicate.Meeting(sql.FieldEqualFold(FieldWhere, v))
}

// WhereContainsFold applies the ContainsFold predicate on the "where" field.
func WhereContainsFold(v string) predicate.Meeting {
	return predicate.Meeting(sql.FieldContainsFold(FieldWhere, v))
}

// WhomEQ applies the EQ predicate on the "whom" field.
func WhomEQ(v string) predicate.Meeting {
	return predicate.Meeting(sql.FieldEQ(FieldWhom, v))
}

// WhomNEQ applies the NEQ predicate on the "whom" field.
func WhomNEQ(v string) predicate.Meeting {
	return predicate.Meeting(sql.FieldNEQ(FieldWhom, v))
}

// WhomIn applies the In predicate on the "whom" field.
func WhomIn(vs ...string) predicate.Meeting {
	return predicate.Meeting(sql.FieldIn(FieldWhom, vs...))
}

// WhomNotIn applies the NotIn predicate on the "whom" field.
func WhomNotIn(vs ...string) predicate.Meeting {
	return predicate.Meeting(sql.FieldNotIn(FieldWhom, vs...))
}

// WhomGT applies the GT predicate on the "whom" field.
func WhomGT(v string) predicate.Meeting {
	return predicate.Meeting(sql.FieldGT(FieldWhom, v))
}

// WhomGTE applies the GTE predicate on the "whom" field.
func WhomGTE(v string) predicate.Meeting {
	return predicate.Meeting(sql.FieldGTE(FieldWhom, v))
}

// WhomLT applies the LT predicate on the "whom" field.
func WhomLT(v string) predicate.Meeting {
	return predicate.Meeting(sql.FieldLT(FieldWhom, v))
}

// WhomLTE applies the LTE predicate on the "whom" field.
func WhomLTE(v string) predicate.Meeting {
	return predicate.Meeting(sql.FieldLTE(FieldWhom, v))
}

// WhomContains applies the Contains predicate on the "whom" field.
func WhomContains(v string) predicate.Meeting {
	return predicate.Meeting(sql.FieldContains(FieldWhom, v))
}

// WhomHasPrefix applies the HasPrefix predicate on the "whom" field.
func WhomHasPrefix(v string) predicate.Meeting {
	return predicate.Meeting(sql.FieldHasPrefix(FieldWhom, v))
}

// WhomHasSuffix applies the HasSuffix predicate on the "whom" field.
func WhomHasSuffix(v string) predicate.Meeting {
	return predicate.Meeting(sql.FieldHasSuffix(FieldWhom, v))
}

// WhomIsNil applies the IsNil predicate on the "whom" field.
func WhomIsNil() predicate.Meeting {
	return predicate.Meeting(sql.FieldIsNull(FieldWhom))
}

// WhomNotNil applies the NotNil predicate on the "whom" field.
func WhomNotNil() predicate.Meeting {
	return predicate.Meeting(sql.FieldNotNull(FieldWhom))
}

// WhomEqualFold applies the EqualFold predicate on the "whom" field.
func WhomEqualFold(v string) predicate.Meeting {
	return predicate.Meeting(sql.FieldEqualFold(FieldWhom, v))
}

// WhomContainsFold applies the ContainsFold predicate on the "whom" field.
func WhomContainsFold(v string) predicate.Meeting {
	return predicate.Meeting(sql.FieldContainsFold(FieldWhom, v))
}

// DurationEQ applies the EQ predicate on the "duration" field.
func DurationEQ(v int) predicate.Meeting {
	return predicate.Meeting(sql.FieldEQ(FieldDuration, v))
}

// DurationNEQ applies the NEQ predicate on the "duration" field.
func DurationNEQ(v int) predicate.Meeting {
	return predicate.Meeting(sql.FieldNEQ(FieldDuration, v))
}

// DurationIn applies the In predicate on the "duration" field.
func DurationIn(vs ...int) predicate.Meeting {
	return predicate.Meeting(sql.FieldIn(FieldDuration, vs...))
}

// DurationNotIn applies the NotIn predicate on the "duration" field.
func DurationNotIn(vs ...int) predicate.Meeting {
	return predicate.Meeting(sql.FieldNotIn(FieldDuration, vs...))
}

// DurationGT applies the GT predicate on the "duration" field.
func DurationGT(v int) predicate.Meeting {
	return predicate.Meeting(sql.FieldGT(FieldDuration, v))
}

// DurationGTE applies the GTE predicate on the "duration" field.
func DurationGTE(v int) predicate.Meeting {
	return predicate.Meeting(sql.FieldGTE(FieldDuration, v))
}

// DurationLT applies the LT predicate on the "duration" field.
func DurationLT(v int) predicate.Meeting {
	return predicate.Meeting(sql.FieldLT(FieldDuration, v))
}

// DurationLTE applies the LTE predicate on the "duration" field.
func DurationLTE(v int) predicate.Meeting {
	return predicate.Meeting(sql.FieldLTE(FieldDuration, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Meeting {
	return predicate.Meeting(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Meeting {
	return predicate.Meeting(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Meeting {
	return predicate.Meeting(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Meeting {
	return predicate.Meeting(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Meeting {
	return predicate.Meeting(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Meeting {
	return predicate.Meeting(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Meeting {
	return predicate.Meeting(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Meeting {
	return predicate.Meeting(sql.FieldLTE(FieldCreatedAt, v))
}

// WhenEQ applies the EQ predicate on the "when" field.
func WhenEQ(v time.Time) predicate.Meeting {
	return predicate.Meeting(sql.FieldEQ(FieldWhen, v))
}

// WhenNEQ applies the NEQ predicate on the "when" field.
func WhenNEQ(v time.Time) predicate.Meeting {
	return predicate.Meeting(sql.FieldNEQ(FieldWhen, v))
}

// WhenIn applies the In predicate on the "when" field.
func WhenIn(vs ...time.Time) predicate.Meeting {
	return predicate.Meeting(sql.FieldIn(FieldWhen, vs...))
}

// WhenNotIn applies the NotIn predicate on the "when" field.
func WhenNotIn(vs ...time.Time) predicate.Meeting {
	return predicate.Meeting(sql.FieldNotIn(FieldWhen, vs...))
}

// WhenGT applies the GT predicate on the "when" field.
func WhenGT(v time.Time) predicate.Meeting {
	return predicate.Meeting(sql.FieldGT(FieldWhen, v))
}

// WhenGTE applies the GTE predicate on the "when" field.
func WhenGTE(v time.Time) predicate.Meeting {
	return predicate.Meeting(sql.FieldGTE(FieldWhen, v))
}

// WhenLT applies the LT predicate on the "when" field.
func WhenLT(v time.Time) predicate.Meeting {
	return predicate.Meeting(sql.FieldLT(FieldWhen, v))
}

// WhenLTE applies the LTE predicate on the "when" field.
func WhenLTE(v time.Time) predicate.Meeting {
	return predicate.Meeting(sql.FieldLTE(FieldWhen, v))
}

// WhenIsNil applies the IsNil predicate on the "when" field.
func WhenIsNil() predicate.Meeting {
	return predicate.Meeting(sql.FieldIsNull(FieldWhen))
}

// WhenNotNil applies the NotNil predicate on the "when" field.
func WhenNotNil() predicate.Meeting {
	return predicate.Meeting(sql.FieldNotNull(FieldWhen))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Meeting {
	return predicate.Meeting(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Meeting {
	return predicate.Meeting(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Meeting) predicate.Meeting {
	return predicate.Meeting(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Meeting) predicate.Meeting {
	return predicate.Meeting(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Meeting) predicate.Meeting {
	return predicate.Meeting(func(s *sql.Selector) {
		p(s.Not())
	})
}
