// Code generated by ent, DO NOT EDIT.

package proposal

import (
	"backend/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Proposal {
	return predicate.Proposal(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Proposal {
	return predicate.Proposal(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Proposal {
	return predicate.Proposal(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Proposal {
	return predicate.Proposal(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Proposal {
	return predicate.Proposal(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Proposal {
	return predicate.Proposal(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Proposal {
	return predicate.Proposal(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Proposal {
	return predicate.Proposal(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Proposal {
	return predicate.Proposal(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Proposal {
	return predicate.Proposal(sql.FieldEQ(FieldName, v))
}

// AllocatedDuration applies equality check predicate on the "allocated_duration" field. It's identical to AllocatedDurationEQ.
func AllocatedDuration(v int) predicate.Proposal {
	return predicate.Proposal(sql.FieldEQ(FieldAllocatedDuration, v))
}

// AchievedDuration applies equality check predicate on the "achieved_duration" field. It's identical to AchievedDurationEQ.
func AchievedDuration(v int) predicate.Proposal {
	return predicate.Proposal(sql.FieldEQ(FieldAchievedDuration, v))
}

// ScheduledFor applies equality check predicate on the "scheduled_for" field. It's identical to ScheduledForEQ.
func ScheduledFor(v time.Time) predicate.Proposal {
	return predicate.Proposal(sql.FieldEQ(FieldScheduledFor, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Proposal {
	return predicate.Proposal(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Proposal {
	return predicate.Proposal(sql.FieldEQ(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Proposal {
	return predicate.Proposal(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Proposal {
	return predicate.Proposal(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Proposal {
	return predicate.Proposal(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Proposal {
	return predicate.Proposal(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Proposal {
	return predicate.Proposal(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Proposal {
	return predicate.Proposal(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Proposal {
	return predicate.Proposal(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Proposal {
	return predicate.Proposal(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Proposal {
	return predicate.Proposal(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Proposal {
	return predicate.Proposal(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Proposal {
	return predicate.Proposal(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Proposal {
	return predicate.Proposal(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Proposal {
	return predicate.Proposal(sql.FieldContainsFold(FieldName, v))
}

// AllocatedDurationEQ applies the EQ predicate on the "allocated_duration" field.
func AllocatedDurationEQ(v int) predicate.Proposal {
	return predicate.Proposal(sql.FieldEQ(FieldAllocatedDuration, v))
}

// AllocatedDurationNEQ applies the NEQ predicate on the "allocated_duration" field.
func AllocatedDurationNEQ(v int) predicate.Proposal {
	return predicate.Proposal(sql.FieldNEQ(FieldAllocatedDuration, v))
}

// AllocatedDurationIn applies the In predicate on the "allocated_duration" field.
func AllocatedDurationIn(vs ...int) predicate.Proposal {
	return predicate.Proposal(sql.FieldIn(FieldAllocatedDuration, vs...))
}

// AllocatedDurationNotIn applies the NotIn predicate on the "allocated_duration" field.
func AllocatedDurationNotIn(vs ...int) predicate.Proposal {
	return predicate.Proposal(sql.FieldNotIn(FieldAllocatedDuration, vs...))
}

// AllocatedDurationGT applies the GT predicate on the "allocated_duration" field.
func AllocatedDurationGT(v int) predicate.Proposal {
	return predicate.Proposal(sql.FieldGT(FieldAllocatedDuration, v))
}

// AllocatedDurationGTE applies the GTE predicate on the "allocated_duration" field.
func AllocatedDurationGTE(v int) predicate.Proposal {
	return predicate.Proposal(sql.FieldGTE(FieldAllocatedDuration, v))
}

// AllocatedDurationLT applies the LT predicate on the "allocated_duration" field.
func AllocatedDurationLT(v int) predicate.Proposal {
	return predicate.Proposal(sql.FieldLT(FieldAllocatedDuration, v))
}

// AllocatedDurationLTE applies the LTE predicate on the "allocated_duration" field.
func AllocatedDurationLTE(v int) predicate.Proposal {
	return predicate.Proposal(sql.FieldLTE(FieldAllocatedDuration, v))
}

// AchievedDurationEQ applies the EQ predicate on the "achieved_duration" field.
func AchievedDurationEQ(v int) predicate.Proposal {
	return predicate.Proposal(sql.FieldEQ(FieldAchievedDuration, v))
}

// AchievedDurationNEQ applies the NEQ predicate on the "achieved_duration" field.
func AchievedDurationNEQ(v int) predicate.Proposal {
	return predicate.Proposal(sql.FieldNEQ(FieldAchievedDuration, v))
}

// AchievedDurationIn applies the In predicate on the "achieved_duration" field.
func AchievedDurationIn(vs ...int) predicate.Proposal {
	return predicate.Proposal(sql.FieldIn(FieldAchievedDuration, vs...))
}

// AchievedDurationNotIn applies the NotIn predicate on the "achieved_duration" field.
func AchievedDurationNotIn(vs ...int) predicate.Proposal {
	return predicate.Proposal(sql.FieldNotIn(FieldAchievedDuration, vs...))
}

// AchievedDurationGT applies the GT predicate on the "achieved_duration" field.
func AchievedDurationGT(v int) predicate.Proposal {
	return predicate.Proposal(sql.FieldGT(FieldAchievedDuration, v))
}

// AchievedDurationGTE applies the GTE predicate on the "achieved_duration" field.
func AchievedDurationGTE(v int) predicate.Proposal {
	return predicate.Proposal(sql.FieldGTE(FieldAchievedDuration, v))
}

// AchievedDurationLT applies the LT predicate on the "achieved_duration" field.
func AchievedDurationLT(v int) predicate.Proposal {
	return predicate.Proposal(sql.FieldLT(FieldAchievedDuration, v))
}

// AchievedDurationLTE applies the LTE predicate on the "achieved_duration" field.
func AchievedDurationLTE(v int) predicate.Proposal {
	return predicate.Proposal(sql.FieldLTE(FieldAchievedDuration, v))
}

// AchievedDurationIsNil applies the IsNil predicate on the "achieved_duration" field.
func AchievedDurationIsNil() predicate.Proposal {
	return predicate.Proposal(sql.FieldIsNull(FieldAchievedDuration))
}

// AchievedDurationNotNil applies the NotNil predicate on the "achieved_duration" field.
func AchievedDurationNotNil() predicate.Proposal {
	return predicate.Proposal(sql.FieldNotNull(FieldAchievedDuration))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Proposal {
	return predicate.Proposal(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Proposal {
	return predicate.Proposal(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Proposal {
	return predicate.Proposal(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Proposal {
	return predicate.Proposal(sql.FieldNotIn(FieldStatus, vs...))
}

// ScheduledForEQ applies the EQ predicate on the "scheduled_for" field.
func ScheduledForEQ(v time.Time) predicate.Proposal {
	return predicate.Proposal(sql.FieldEQ(FieldScheduledFor, v))
}

// ScheduledForNEQ applies the NEQ predicate on the "scheduled_for" field.
func ScheduledForNEQ(v time.Time) predicate.Proposal {
	return predicate.Proposal(sql.FieldNEQ(FieldScheduledFor, v))
}

// ScheduledForIn applies the In predicate on the "scheduled_for" field.
func ScheduledForIn(vs ...time.Time) predicate.Proposal {
	return predicate.Proposal(sql.FieldIn(FieldScheduledFor, vs...))
}

// ScheduledForNotIn applies the NotIn predicate on the "scheduled_for" field.
func ScheduledForNotIn(vs ...time.Time) predicate.Proposal {
	return predicate.Proposal(sql.FieldNotIn(FieldScheduledFor, vs...))
}

// ScheduledForGT applies the GT predicate on the "scheduled_for" field.
func ScheduledForGT(v time.Time) predicate.Proposal {
	return predicate.Proposal(sql.FieldGT(FieldScheduledFor, v))
}

// ScheduledForGTE applies the GTE predicate on the "scheduled_for" field.
func ScheduledForGTE(v time.Time) predicate.Proposal {
	return predicate.Proposal(sql.FieldGTE(FieldScheduledFor, v))
}

// ScheduledForLT applies the LT predicate on the "scheduled_for" field.
func ScheduledForLT(v time.Time) predicate.Proposal {
	return predicate.Proposal(sql.FieldLT(FieldScheduledFor, v))
}

// ScheduledForLTE applies the LTE predicate on the "scheduled_for" field.
func ScheduledForLTE(v time.Time) predicate.Proposal {
	return predicate.Proposal(sql.FieldLTE(FieldScheduledFor, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Proposal {
	return predicate.Proposal(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Proposal {
	return predicate.Proposal(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Proposal {
	return predicate.Proposal(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Proposal {
	return predicate.Proposal(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Proposal {
	return predicate.Proposal(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Proposal {
	return predicate.Proposal(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Proposal {
	return predicate.Proposal(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Proposal {
	return predicate.Proposal(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Proposal {
	return predicate.Proposal(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Proposal {
	return predicate.Proposal(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Proposal {
	return predicate.Proposal(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Proposal {
	return predicate.Proposal(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Proposal {
	return predicate.Proposal(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Proposal {
	return predicate.Proposal(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Proposal {
	return predicate.Proposal(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Proposal {
	return predicate.Proposal(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasTask applies the HasEdge predicate on the "task" edge.
func HasTask() predicate.Proposal {
	return predicate.Proposal(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TaskTable, TaskColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTaskWith applies the HasEdge predicate on the "task" edge with a given conditions (other predicates).
func HasTaskWith(preds ...predicate.Task) predicate.Proposal {
	return predicate.Proposal(func(s *sql.Selector) {
		step := newTaskStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSkill applies the HasEdge predicate on the "skill" edge.
func HasSkill() predicate.Proposal {
	return predicate.Proposal(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SkillTable, SkillColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSkillWith applies the HasEdge predicate on the "skill" edge with a given conditions (other predicates).
func HasSkillWith(preds ...predicate.Skill) predicate.Proposal {
	return predicate.Proposal(func(s *sql.Selector) {
		step := newSkillStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Proposal) predicate.Proposal {
	return predicate.Proposal(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Proposal) predicate.Proposal {
	return predicate.Proposal(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Proposal) predicate.Proposal {
	return predicate.Proposal(func(s *sql.Selector) {
		p(s.Not())
	})
}
