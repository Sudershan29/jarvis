// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/predicate"
	"backend/ent/skill"
	"backend/ent/user"
	"backend/ent/userskill"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserSkillUpdate is the builder for updating UserSkill entities.
type UserSkillUpdate struct {
	config
	hooks    []Hook
	mutation *UserSkillMutation
}

// Where appends a list predicates to the UserSkillUpdate builder.
func (usu *UserSkillUpdate) Where(ps ...predicate.UserSkill) *UserSkillUpdate {
	usu.mutation.Where(ps...)
	return usu
}

// SetLevel sets the "level" field.
func (usu *UserSkillUpdate) SetLevel(u userskill.Level) *UserSkillUpdate {
	usu.mutation.SetLevel(u)
	return usu
}

// SetProgress sets the "progress" field.
func (usu *UserSkillUpdate) SetProgress(i int) *UserSkillUpdate {
	usu.mutation.ResetProgress()
	usu.mutation.SetProgress(i)
	return usu
}

// SetNillableProgress sets the "progress" field if the given value is not nil.
func (usu *UserSkillUpdate) SetNillableProgress(i *int) *UserSkillUpdate {
	if i != nil {
		usu.SetProgress(*i)
	}
	return usu
}

// AddProgress adds i to the "progress" field.
func (usu *UserSkillUpdate) AddProgress(i int) *UserSkillUpdate {
	usu.mutation.AddProgress(i)
	return usu
}

// SetDuration sets the "duration" field.
func (usu *UserSkillUpdate) SetDuration(i int) *UserSkillUpdate {
	usu.mutation.ResetDuration()
	usu.mutation.SetDuration(i)
	return usu
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (usu *UserSkillUpdate) SetNillableDuration(i *int) *UserSkillUpdate {
	if i != nil {
		usu.SetDuration(*i)
	}
	return usu
}

// AddDuration adds i to the "duration" field.
func (usu *UserSkillUpdate) AddDuration(i int) *UserSkillUpdate {
	usu.mutation.AddDuration(i)
	return usu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (usu *UserSkillUpdate) SetUserID(id int) *UserSkillUpdate {
	usu.mutation.SetUserID(id)
	return usu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (usu *UserSkillUpdate) SetNillableUserID(id *int) *UserSkillUpdate {
	if id != nil {
		usu = usu.SetUserID(*id)
	}
	return usu
}

// SetUser sets the "user" edge to the User entity.
func (usu *UserSkillUpdate) SetUser(u *User) *UserSkillUpdate {
	return usu.SetUserID(u.ID)
}

// SetSkillID sets the "skill" edge to the Skill entity by ID.
func (usu *UserSkillUpdate) SetSkillID(id int) *UserSkillUpdate {
	usu.mutation.SetSkillID(id)
	return usu
}

// SetNillableSkillID sets the "skill" edge to the Skill entity by ID if the given value is not nil.
func (usu *UserSkillUpdate) SetNillableSkillID(id *int) *UserSkillUpdate {
	if id != nil {
		usu = usu.SetSkillID(*id)
	}
	return usu
}

// SetSkill sets the "skill" edge to the Skill entity.
func (usu *UserSkillUpdate) SetSkill(s *Skill) *UserSkillUpdate {
	return usu.SetSkillID(s.ID)
}

// Mutation returns the UserSkillMutation object of the builder.
func (usu *UserSkillUpdate) Mutation() *UserSkillMutation {
	return usu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (usu *UserSkillUpdate) ClearUser() *UserSkillUpdate {
	usu.mutation.ClearUser()
	return usu
}

// ClearSkill clears the "skill" edge to the Skill entity.
func (usu *UserSkillUpdate) ClearSkill() *UserSkillUpdate {
	usu.mutation.ClearSkill()
	return usu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (usu *UserSkillUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, usu.sqlSave, usu.mutation, usu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (usu *UserSkillUpdate) SaveX(ctx context.Context) int {
	affected, err := usu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (usu *UserSkillUpdate) Exec(ctx context.Context) error {
	_, err := usu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (usu *UserSkillUpdate) ExecX(ctx context.Context) {
	if err := usu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (usu *UserSkillUpdate) check() error {
	if v, ok := usu.mutation.Level(); ok {
		if err := userskill.LevelValidator(v); err != nil {
			return &ValidationError{Name: "level", err: fmt.Errorf(`ent: validator failed for field "UserSkill.level": %w`, err)}
		}
	}
	return nil
}

func (usu *UserSkillUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := usu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(userskill.Table, userskill.Columns, sqlgraph.NewFieldSpec(userskill.FieldID, field.TypeInt))
	if ps := usu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := usu.mutation.Level(); ok {
		_spec.SetField(userskill.FieldLevel, field.TypeEnum, value)
	}
	if value, ok := usu.mutation.Progress(); ok {
		_spec.SetField(userskill.FieldProgress, field.TypeInt, value)
	}
	if value, ok := usu.mutation.AddedProgress(); ok {
		_spec.AddField(userskill.FieldProgress, field.TypeInt, value)
	}
	if value, ok := usu.mutation.Duration(); ok {
		_spec.SetField(userskill.FieldDuration, field.TypeInt, value)
	}
	if value, ok := usu.mutation.AddedDuration(); ok {
		_spec.AddField(userskill.FieldDuration, field.TypeInt, value)
	}
	if usu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userskill.UserTable,
			Columns: []string{userskill.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := usu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userskill.UserTable,
			Columns: []string{userskill.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if usu.mutation.SkillCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userskill.SkillTable,
			Columns: []string{userskill.SkillColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(skill.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := usu.mutation.SkillIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userskill.SkillTable,
			Columns: []string{userskill.SkillColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(skill.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, usu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userskill.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	usu.mutation.done = true
	return n, nil
}

// UserSkillUpdateOne is the builder for updating a single UserSkill entity.
type UserSkillUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserSkillMutation
}

// SetLevel sets the "level" field.
func (usuo *UserSkillUpdateOne) SetLevel(u userskill.Level) *UserSkillUpdateOne {
	usuo.mutation.SetLevel(u)
	return usuo
}

// SetProgress sets the "progress" field.
func (usuo *UserSkillUpdateOne) SetProgress(i int) *UserSkillUpdateOne {
	usuo.mutation.ResetProgress()
	usuo.mutation.SetProgress(i)
	return usuo
}

// SetNillableProgress sets the "progress" field if the given value is not nil.
func (usuo *UserSkillUpdateOne) SetNillableProgress(i *int) *UserSkillUpdateOne {
	if i != nil {
		usuo.SetProgress(*i)
	}
	return usuo
}

// AddProgress adds i to the "progress" field.
func (usuo *UserSkillUpdateOne) AddProgress(i int) *UserSkillUpdateOne {
	usuo.mutation.AddProgress(i)
	return usuo
}

// SetDuration sets the "duration" field.
func (usuo *UserSkillUpdateOne) SetDuration(i int) *UserSkillUpdateOne {
	usuo.mutation.ResetDuration()
	usuo.mutation.SetDuration(i)
	return usuo
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (usuo *UserSkillUpdateOne) SetNillableDuration(i *int) *UserSkillUpdateOne {
	if i != nil {
		usuo.SetDuration(*i)
	}
	return usuo
}

// AddDuration adds i to the "duration" field.
func (usuo *UserSkillUpdateOne) AddDuration(i int) *UserSkillUpdateOne {
	usuo.mutation.AddDuration(i)
	return usuo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (usuo *UserSkillUpdateOne) SetUserID(id int) *UserSkillUpdateOne {
	usuo.mutation.SetUserID(id)
	return usuo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (usuo *UserSkillUpdateOne) SetNillableUserID(id *int) *UserSkillUpdateOne {
	if id != nil {
		usuo = usuo.SetUserID(*id)
	}
	return usuo
}

// SetUser sets the "user" edge to the User entity.
func (usuo *UserSkillUpdateOne) SetUser(u *User) *UserSkillUpdateOne {
	return usuo.SetUserID(u.ID)
}

// SetSkillID sets the "skill" edge to the Skill entity by ID.
func (usuo *UserSkillUpdateOne) SetSkillID(id int) *UserSkillUpdateOne {
	usuo.mutation.SetSkillID(id)
	return usuo
}

// SetNillableSkillID sets the "skill" edge to the Skill entity by ID if the given value is not nil.
func (usuo *UserSkillUpdateOne) SetNillableSkillID(id *int) *UserSkillUpdateOne {
	if id != nil {
		usuo = usuo.SetSkillID(*id)
	}
	return usuo
}

// SetSkill sets the "skill" edge to the Skill entity.
func (usuo *UserSkillUpdateOne) SetSkill(s *Skill) *UserSkillUpdateOne {
	return usuo.SetSkillID(s.ID)
}

// Mutation returns the UserSkillMutation object of the builder.
func (usuo *UserSkillUpdateOne) Mutation() *UserSkillMutation {
	return usuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (usuo *UserSkillUpdateOne) ClearUser() *UserSkillUpdateOne {
	usuo.mutation.ClearUser()
	return usuo
}

// ClearSkill clears the "skill" edge to the Skill entity.
func (usuo *UserSkillUpdateOne) ClearSkill() *UserSkillUpdateOne {
	usuo.mutation.ClearSkill()
	return usuo
}

// Where appends a list predicates to the UserSkillUpdate builder.
func (usuo *UserSkillUpdateOne) Where(ps ...predicate.UserSkill) *UserSkillUpdateOne {
	usuo.mutation.Where(ps...)
	return usuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (usuo *UserSkillUpdateOne) Select(field string, fields ...string) *UserSkillUpdateOne {
	usuo.fields = append([]string{field}, fields...)
	return usuo
}

// Save executes the query and returns the updated UserSkill entity.
func (usuo *UserSkillUpdateOne) Save(ctx context.Context) (*UserSkill, error) {
	return withHooks(ctx, usuo.sqlSave, usuo.mutation, usuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (usuo *UserSkillUpdateOne) SaveX(ctx context.Context) *UserSkill {
	node, err := usuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (usuo *UserSkillUpdateOne) Exec(ctx context.Context) error {
	_, err := usuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (usuo *UserSkillUpdateOne) ExecX(ctx context.Context) {
	if err := usuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (usuo *UserSkillUpdateOne) check() error {
	if v, ok := usuo.mutation.Level(); ok {
		if err := userskill.LevelValidator(v); err != nil {
			return &ValidationError{Name: "level", err: fmt.Errorf(`ent: validator failed for field "UserSkill.level": %w`, err)}
		}
	}
	return nil
}

func (usuo *UserSkillUpdateOne) sqlSave(ctx context.Context) (_node *UserSkill, err error) {
	if err := usuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(userskill.Table, userskill.Columns, sqlgraph.NewFieldSpec(userskill.FieldID, field.TypeInt))
	id, ok := usuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserSkill.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := usuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userskill.FieldID)
		for _, f := range fields {
			if !userskill.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userskill.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := usuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := usuo.mutation.Level(); ok {
		_spec.SetField(userskill.FieldLevel, field.TypeEnum, value)
	}
	if value, ok := usuo.mutation.Progress(); ok {
		_spec.SetField(userskill.FieldProgress, field.TypeInt, value)
	}
	if value, ok := usuo.mutation.AddedProgress(); ok {
		_spec.AddField(userskill.FieldProgress, field.TypeInt, value)
	}
	if value, ok := usuo.mutation.Duration(); ok {
		_spec.SetField(userskill.FieldDuration, field.TypeInt, value)
	}
	if value, ok := usuo.mutation.AddedDuration(); ok {
		_spec.AddField(userskill.FieldDuration, field.TypeInt, value)
	}
	if usuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userskill.UserTable,
			Columns: []string{userskill.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := usuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userskill.UserTable,
			Columns: []string{userskill.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if usuo.mutation.SkillCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userskill.SkillTable,
			Columns: []string{userskill.SkillColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(skill.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := usuo.mutation.SkillIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userskill.SkillTable,
			Columns: []string{userskill.SkillColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(skill.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserSkill{config: usuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, usuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userskill.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	usuo.mutation.done = true
	return _node, nil
}
