// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/preference"
	"backend/ent/user"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Preference is the model entity for the Preference schema.
type Preference struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// FreeWeekends holds the value of the "free_weekends" field.
	FreeWeekends bool `json:"free_weekends,omitempty"`
	// WeeklyFrequency holds the value of the "weekly_frequency" field.
	WeeklyFrequency int `json:"weekly_frequency,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PreferenceQuery when eager-loading is set.
	Edges           PreferenceEdges `json:"edges"`
	user_preference *int
	selectValues    sql.SelectValues
}

// PreferenceEdges holds the relations/edges for other nodes in the graph.
type PreferenceEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PreferenceEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Preference) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case preference.FieldFreeWeekends:
			values[i] = new(sql.NullBool)
		case preference.FieldID, preference.FieldWeeklyFrequency:
			values[i] = new(sql.NullInt64)
		case preference.ForeignKeys[0]: // user_preference
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Preference fields.
func (pr *Preference) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case preference.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int(value.Int64)
		case preference.FieldFreeWeekends:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field free_weekends", values[i])
			} else if value.Valid {
				pr.FreeWeekends = value.Bool
			}
		case preference.FieldWeeklyFrequency:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field weekly_frequency", values[i])
			} else if value.Valid {
				pr.WeeklyFrequency = int(value.Int64)
			}
		case preference.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_preference", value)
			} else if value.Valid {
				pr.user_preference = new(int)
				*pr.user_preference = int(value.Int64)
			}
		default:
			pr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Preference.
// This includes values selected through modifiers, order, etc.
func (pr *Preference) Value(name string) (ent.Value, error) {
	return pr.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Preference entity.
func (pr *Preference) QueryUser() *UserQuery {
	return NewPreferenceClient(pr.config).QueryUser(pr)
}

// Update returns a builder for updating this Preference.
// Note that you need to call Preference.Unwrap() before calling this method if this Preference
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Preference) Update() *PreferenceUpdateOne {
	return NewPreferenceClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the Preference entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Preference) Unwrap() *Preference {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Preference is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Preference) String() string {
	var builder strings.Builder
	builder.WriteString("Preference(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("free_weekends=")
	builder.WriteString(fmt.Sprintf("%v", pr.FreeWeekends))
	builder.WriteString(", ")
	builder.WriteString("weekly_frequency=")
	builder.WriteString(fmt.Sprintf("%v", pr.WeeklyFrequency))
	builder.WriteByte(')')
	return builder.String()
}

// Preferences is a parsable slice of Preference.
type Preferences []*Preference
