// Code generated by ent, DO NOT EDIT.

package preference

import (
	"backend/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Preference {
	return predicate.Preference(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Preference {
	return predicate.Preference(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Preference {
	return predicate.Preference(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Preference {
	return predicate.Preference(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Preference {
	return predicate.Preference(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Preference {
	return predicate.Preference(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Preference {
	return predicate.Preference(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Preference {
	return predicate.Preference(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Preference {
	return predicate.Preference(sql.FieldLTE(FieldID, id))
}

// FreeWeekends applies equality check predicate on the "free_weekends" field. It's identical to FreeWeekendsEQ.
func FreeWeekends(v bool) predicate.Preference {
	return predicate.Preference(sql.FieldEQ(FieldFreeWeekends, v))
}

// WeeklyFrequency applies equality check predicate on the "weekly_frequency" field. It's identical to WeeklyFrequencyEQ.
func WeeklyFrequency(v int) predicate.Preference {
	return predicate.Preference(sql.FieldEQ(FieldWeeklyFrequency, v))
}

// FreeWeekendsEQ applies the EQ predicate on the "free_weekends" field.
func FreeWeekendsEQ(v bool) predicate.Preference {
	return predicate.Preference(sql.FieldEQ(FieldFreeWeekends, v))
}

// FreeWeekendsNEQ applies the NEQ predicate on the "free_weekends" field.
func FreeWeekendsNEQ(v bool) predicate.Preference {
	return predicate.Preference(sql.FieldNEQ(FieldFreeWeekends, v))
}

// WeeklyFrequencyEQ applies the EQ predicate on the "weekly_frequency" field.
func WeeklyFrequencyEQ(v int) predicate.Preference {
	return predicate.Preference(sql.FieldEQ(FieldWeeklyFrequency, v))
}

// WeeklyFrequencyNEQ applies the NEQ predicate on the "weekly_frequency" field.
func WeeklyFrequencyNEQ(v int) predicate.Preference {
	return predicate.Preference(sql.FieldNEQ(FieldWeeklyFrequency, v))
}

// WeeklyFrequencyIn applies the In predicate on the "weekly_frequency" field.
func WeeklyFrequencyIn(vs ...int) predicate.Preference {
	return predicate.Preference(sql.FieldIn(FieldWeeklyFrequency, vs...))
}

// WeeklyFrequencyNotIn applies the NotIn predicate on the "weekly_frequency" field.
func WeeklyFrequencyNotIn(vs ...int) predicate.Preference {
	return predicate.Preference(sql.FieldNotIn(FieldWeeklyFrequency, vs...))
}

// WeeklyFrequencyGT applies the GT predicate on the "weekly_frequency" field.
func WeeklyFrequencyGT(v int) predicate.Preference {
	return predicate.Preference(sql.FieldGT(FieldWeeklyFrequency, v))
}

// WeeklyFrequencyGTE applies the GTE predicate on the "weekly_frequency" field.
func WeeklyFrequencyGTE(v int) predicate.Preference {
	return predicate.Preference(sql.FieldGTE(FieldWeeklyFrequency, v))
}

// WeeklyFrequencyLT applies the LT predicate on the "weekly_frequency" field.
func WeeklyFrequencyLT(v int) predicate.Preference {
	return predicate.Preference(sql.FieldLT(FieldWeeklyFrequency, v))
}

// WeeklyFrequencyLTE applies the LTE predicate on the "weekly_frequency" field.
func WeeklyFrequencyLTE(v int) predicate.Preference {
	return predicate.Preference(sql.FieldLTE(FieldWeeklyFrequency, v))
}

// WeeklyFrequencyIsNil applies the IsNil predicate on the "weekly_frequency" field.
func WeeklyFrequencyIsNil() predicate.Preference {
	return predicate.Preference(sql.FieldIsNull(FieldWeeklyFrequency))
}

// WeeklyFrequencyNotNil applies the NotNil predicate on the "weekly_frequency" field.
func WeeklyFrequencyNotNil() predicate.Preference {
	return predicate.Preference(sql.FieldNotNull(FieldWeeklyFrequency))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Preference {
	return predicate.Preference(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Preference {
	return predicate.Preference(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Preference) predicate.Preference {
	return predicate.Preference(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Preference) predicate.Preference {
	return predicate.Preference(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Preference) predicate.Preference {
	return predicate.Preference(func(s *sql.Selector) {
		p(s.Not())
	})
}
