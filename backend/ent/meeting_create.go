// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/meeting"
	"backend/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MeetingCreate is the builder for creating a Meeting entity.
type MeetingCreate struct {
	config
	mutation *MeetingMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (mc *MeetingCreate) SetName(s string) *MeetingCreate {
	mc.mutation.SetName(s)
	return mc
}

// SetDescription sets the "description" field.
func (mc *MeetingCreate) SetDescription(s string) *MeetingCreate {
	mc.mutation.SetDescription(s)
	return mc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (mc *MeetingCreate) SetNillableDescription(s *string) *MeetingCreate {
	if s != nil {
		mc.SetDescription(*s)
	}
	return mc
}

// SetWhere sets the "where" field.
func (mc *MeetingCreate) SetWhere(s string) *MeetingCreate {
	mc.mutation.SetWhere(s)
	return mc
}

// SetNillableWhere sets the "where" field if the given value is not nil.
func (mc *MeetingCreate) SetNillableWhere(s *string) *MeetingCreate {
	if s != nil {
		mc.SetWhere(*s)
	}
	return mc
}

// SetWhom sets the "whom" field.
func (mc *MeetingCreate) SetWhom(s string) *MeetingCreate {
	mc.mutation.SetWhom(s)
	return mc
}

// SetNillableWhom sets the "whom" field if the given value is not nil.
func (mc *MeetingCreate) SetNillableWhom(s *string) *MeetingCreate {
	if s != nil {
		mc.SetWhom(*s)
	}
	return mc
}

// SetDuration sets the "duration" field.
func (mc *MeetingCreate) SetDuration(i int) *MeetingCreate {
	mc.mutation.SetDuration(i)
	return mc
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (mc *MeetingCreate) SetNillableDuration(i *int) *MeetingCreate {
	if i != nil {
		mc.SetDuration(*i)
	}
	return mc
}

// SetCreatedAt sets the "created_at" field.
func (mc *MeetingCreate) SetCreatedAt(t time.Time) *MeetingCreate {
	mc.mutation.SetCreatedAt(t)
	return mc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mc *MeetingCreate) SetNillableCreatedAt(t *time.Time) *MeetingCreate {
	if t != nil {
		mc.SetCreatedAt(*t)
	}
	return mc
}

// SetWhen sets the "when" field.
func (mc *MeetingCreate) SetWhen(t time.Time) *MeetingCreate {
	mc.mutation.SetWhen(t)
	return mc
}

// SetNillableWhen sets the "when" field if the given value is not nil.
func (mc *MeetingCreate) SetNillableWhen(t *time.Time) *MeetingCreate {
	if t != nil {
		mc.SetWhen(*t)
	}
	return mc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (mc *MeetingCreate) SetUserID(id int) *MeetingCreate {
	mc.mutation.SetUserID(id)
	return mc
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (mc *MeetingCreate) SetNillableUserID(id *int) *MeetingCreate {
	if id != nil {
		mc = mc.SetUserID(*id)
	}
	return mc
}

// SetUser sets the "user" edge to the User entity.
func (mc *MeetingCreate) SetUser(u *User) *MeetingCreate {
	return mc.SetUserID(u.ID)
}

// Mutation returns the MeetingMutation object of the builder.
func (mc *MeetingCreate) Mutation() *MeetingMutation {
	return mc.mutation
}

// Save creates the Meeting in the database.
func (mc *MeetingCreate) Save(ctx context.Context) (*Meeting, error) {
	mc.defaults()
	return withHooks(ctx, mc.sqlSave, mc.mutation, mc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MeetingCreate) SaveX(ctx context.Context) *Meeting {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MeetingCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MeetingCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mc *MeetingCreate) defaults() {
	if _, ok := mc.mutation.Duration(); !ok {
		v := meeting.DefaultDuration
		mc.mutation.SetDuration(v)
	}
	if _, ok := mc.mutation.CreatedAt(); !ok {
		v := meeting.DefaultCreatedAt()
		mc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MeetingCreate) check() error {
	if _, ok := mc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Meeting.name"`)}
	}
	if _, ok := mc.mutation.Duration(); !ok {
		return &ValidationError{Name: "duration", err: errors.New(`ent: missing required field "Meeting.duration"`)}
	}
	if _, ok := mc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Meeting.created_at"`)}
	}
	return nil
}

func (mc *MeetingCreate) sqlSave(ctx context.Context) (*Meeting, error) {
	if err := mc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	mc.mutation.id = &_node.ID
	mc.mutation.done = true
	return _node, nil
}

func (mc *MeetingCreate) createSpec() (*Meeting, *sqlgraph.CreateSpec) {
	var (
		_node = &Meeting{config: mc.config}
		_spec = sqlgraph.NewCreateSpec(meeting.Table, sqlgraph.NewFieldSpec(meeting.FieldID, field.TypeInt))
	)
	if value, ok := mc.mutation.Name(); ok {
		_spec.SetField(meeting.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := mc.mutation.Description(); ok {
		_spec.SetField(meeting.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := mc.mutation.GetWhere(); ok {
		_spec.SetField(meeting.FieldWhere, field.TypeString, value)
		_node.Where = value
	}
	if value, ok := mc.mutation.Whom(); ok {
		_spec.SetField(meeting.FieldWhom, field.TypeString, value)
		_node.Whom = value
	}
	if value, ok := mc.mutation.Duration(); ok {
		_spec.SetField(meeting.FieldDuration, field.TypeInt, value)
		_node.Duration = value
	}
	if value, ok := mc.mutation.CreatedAt(); ok {
		_spec.SetField(meeting.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := mc.mutation.When(); ok {
		_spec.SetField(meeting.FieldWhen, field.TypeTime, value)
		_node.When = value
	}
	if nodes := mc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   meeting.UserTable,
			Columns: []string{meeting.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_meetings = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MeetingCreateBulk is the builder for creating many Meeting entities in bulk.
type MeetingCreateBulk struct {
	config
	builders []*MeetingCreate
}

// Save creates the Meeting entities in the database.
func (mcb *MeetingCreateBulk) Save(ctx context.Context) ([]*Meeting, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Meeting, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MeetingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MeetingCreateBulk) SaveX(ctx context.Context) []*Meeting {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MeetingCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MeetingCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}
