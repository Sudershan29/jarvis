// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/skill"
	"backend/ent/user"
	"backend/ent/userskill"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// UserSkill is the model entity for the UserSkill schema.
type UserSkill struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Level holds the value of the "level" field.
	Level userskill.Level `json:"level,omitempty"`
	// Progress holds the value of the "progress" field.
	Progress int `json:"progress,omitempty"`
	// Duration holds the value of the "duration" field.
	Duration int `json:"duration,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserSkillQuery when eager-loading is set.
	Edges            UserSkillEdges `json:"edges"`
	skill_userskills *int
	user_skills      *int
	selectValues     sql.SelectValues
}

// UserSkillEdges holds the relations/edges for other nodes in the graph.
type UserSkillEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Skill holds the value of the skill edge.
	Skill *Skill `json:"skill,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserSkillEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// SkillOrErr returns the Skill value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserSkillEdges) SkillOrErr() (*Skill, error) {
	if e.loadedTypes[1] {
		if e.Skill == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: skill.Label}
		}
		return e.Skill, nil
	}
	return nil, &NotLoadedError{edge: "skill"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserSkill) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userskill.FieldID, userskill.FieldProgress, userskill.FieldDuration:
			values[i] = new(sql.NullInt64)
		case userskill.FieldLevel:
			values[i] = new(sql.NullString)
		case userskill.ForeignKeys[0]: // skill_userskills
			values[i] = new(sql.NullInt64)
		case userskill.ForeignKeys[1]: // user_skills
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserSkill fields.
func (us *UserSkill) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userskill.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			us.ID = int(value.Int64)
		case userskill.FieldLevel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field level", values[i])
			} else if value.Valid {
				us.Level = userskill.Level(value.String)
			}
		case userskill.FieldProgress:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field progress", values[i])
			} else if value.Valid {
				us.Progress = int(value.Int64)
			}
		case userskill.FieldDuration:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field duration", values[i])
			} else if value.Valid {
				us.Duration = int(value.Int64)
			}
		case userskill.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field skill_userskills", value)
			} else if value.Valid {
				us.skill_userskills = new(int)
				*us.skill_userskills = int(value.Int64)
			}
		case userskill.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_skills", value)
			} else if value.Valid {
				us.user_skills = new(int)
				*us.user_skills = int(value.Int64)
			}
		default:
			us.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserSkill.
// This includes values selected through modifiers, order, etc.
func (us *UserSkill) Value(name string) (ent.Value, error) {
	return us.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the UserSkill entity.
func (us *UserSkill) QueryUser() *UserQuery {
	return NewUserSkillClient(us.config).QueryUser(us)
}

// QuerySkill queries the "skill" edge of the UserSkill entity.
func (us *UserSkill) QuerySkill() *SkillQuery {
	return NewUserSkillClient(us.config).QuerySkill(us)
}

// Update returns a builder for updating this UserSkill.
// Note that you need to call UserSkill.Unwrap() before calling this method if this UserSkill
// was returned from a transaction, and the transaction was committed or rolled back.
func (us *UserSkill) Update() *UserSkillUpdateOne {
	return NewUserSkillClient(us.config).UpdateOne(us)
}

// Unwrap unwraps the UserSkill entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (us *UserSkill) Unwrap() *UserSkill {
	_tx, ok := us.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserSkill is not a transactional entity")
	}
	us.config.driver = _tx.drv
	return us
}

// String implements the fmt.Stringer.
func (us *UserSkill) String() string {
	var builder strings.Builder
	builder.WriteString("UserSkill(")
	builder.WriteString(fmt.Sprintf("id=%v, ", us.ID))
	builder.WriteString("level=")
	builder.WriteString(fmt.Sprintf("%v", us.Level))
	builder.WriteString(", ")
	builder.WriteString("progress=")
	builder.WriteString(fmt.Sprintf("%v", us.Progress))
	builder.WriteString(", ")
	builder.WriteString("duration=")
	builder.WriteString(fmt.Sprintf("%v", us.Duration))
	builder.WriteByte(')')
	return builder.String()
}

// UserSkills is a parsable slice of UserSkill.
type UserSkills []*UserSkill
