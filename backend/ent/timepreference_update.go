// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/predicate"
	"backend/ent/skill"
	"backend/ent/task"
	"backend/ent/timepreference"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TimePreferenceUpdate is the builder for updating TimePreference entities.
type TimePreferenceUpdate struct {
	config
	hooks    []Hook
	mutation *TimePreferenceMutation
}

// Where appends a list predicates to the TimePreferenceUpdate builder.
func (tpu *TimePreferenceUpdate) Where(ps ...predicate.TimePreference) *TimePreferenceUpdate {
	tpu.mutation.Where(ps...)
	return tpu
}

// SetDay sets the "day" field.
func (tpu *TimePreferenceUpdate) SetDay(s string) *TimePreferenceUpdate {
	tpu.mutation.SetDay(s)
	return tpu
}

// AddSkillIDs adds the "skills" edge to the Skill entity by IDs.
func (tpu *TimePreferenceUpdate) AddSkillIDs(ids ...int) *TimePreferenceUpdate {
	tpu.mutation.AddSkillIDs(ids...)
	return tpu
}

// AddSkills adds the "skills" edges to the Skill entity.
func (tpu *TimePreferenceUpdate) AddSkills(s ...*Skill) *TimePreferenceUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tpu.AddSkillIDs(ids...)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (tpu *TimePreferenceUpdate) AddTaskIDs(ids ...int) *TimePreferenceUpdate {
	tpu.mutation.AddTaskIDs(ids...)
	return tpu
}

// AddTasks adds the "tasks" edges to the Task entity.
func (tpu *TimePreferenceUpdate) AddTasks(t ...*Task) *TimePreferenceUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tpu.AddTaskIDs(ids...)
}

// Mutation returns the TimePreferenceMutation object of the builder.
func (tpu *TimePreferenceUpdate) Mutation() *TimePreferenceMutation {
	return tpu.mutation
}

// ClearSkills clears all "skills" edges to the Skill entity.
func (tpu *TimePreferenceUpdate) ClearSkills() *TimePreferenceUpdate {
	tpu.mutation.ClearSkills()
	return tpu
}

// RemoveSkillIDs removes the "skills" edge to Skill entities by IDs.
func (tpu *TimePreferenceUpdate) RemoveSkillIDs(ids ...int) *TimePreferenceUpdate {
	tpu.mutation.RemoveSkillIDs(ids...)
	return tpu
}

// RemoveSkills removes "skills" edges to Skill entities.
func (tpu *TimePreferenceUpdate) RemoveSkills(s ...*Skill) *TimePreferenceUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tpu.RemoveSkillIDs(ids...)
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (tpu *TimePreferenceUpdate) ClearTasks() *TimePreferenceUpdate {
	tpu.mutation.ClearTasks()
	return tpu
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (tpu *TimePreferenceUpdate) RemoveTaskIDs(ids ...int) *TimePreferenceUpdate {
	tpu.mutation.RemoveTaskIDs(ids...)
	return tpu
}

// RemoveTasks removes "tasks" edges to Task entities.
func (tpu *TimePreferenceUpdate) RemoveTasks(t ...*Task) *TimePreferenceUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tpu.RemoveTaskIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tpu *TimePreferenceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tpu.sqlSave, tpu.mutation, tpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tpu *TimePreferenceUpdate) SaveX(ctx context.Context) int {
	affected, err := tpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tpu *TimePreferenceUpdate) Exec(ctx context.Context) error {
	_, err := tpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tpu *TimePreferenceUpdate) ExecX(ctx context.Context) {
	if err := tpu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tpu *TimePreferenceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(timepreference.Table, timepreference.Columns, sqlgraph.NewFieldSpec(timepreference.FieldID, field.TypeInt))
	if ps := tpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tpu.mutation.Day(); ok {
		_spec.SetField(timepreference.FieldDay, field.TypeString, value)
	}
	if tpu.mutation.SkillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   timepreference.SkillsTable,
			Columns: timepreference.SkillsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(skill.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpu.mutation.RemovedSkillsIDs(); len(nodes) > 0 && !tpu.mutation.SkillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   timepreference.SkillsTable,
			Columns: timepreference.SkillsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(skill.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpu.mutation.SkillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   timepreference.SkillsTable,
			Columns: timepreference.SkillsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(skill.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tpu.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   timepreference.TasksTable,
			Columns: timepreference.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpu.mutation.RemovedTasksIDs(); len(nodes) > 0 && !tpu.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   timepreference.TasksTable,
			Columns: timepreference.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpu.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   timepreference.TasksTable,
			Columns: timepreference.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{timepreference.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tpu.mutation.done = true
	return n, nil
}

// TimePreferenceUpdateOne is the builder for updating a single TimePreference entity.
type TimePreferenceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TimePreferenceMutation
}

// SetDay sets the "day" field.
func (tpuo *TimePreferenceUpdateOne) SetDay(s string) *TimePreferenceUpdateOne {
	tpuo.mutation.SetDay(s)
	return tpuo
}

// AddSkillIDs adds the "skills" edge to the Skill entity by IDs.
func (tpuo *TimePreferenceUpdateOne) AddSkillIDs(ids ...int) *TimePreferenceUpdateOne {
	tpuo.mutation.AddSkillIDs(ids...)
	return tpuo
}

// AddSkills adds the "skills" edges to the Skill entity.
func (tpuo *TimePreferenceUpdateOne) AddSkills(s ...*Skill) *TimePreferenceUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tpuo.AddSkillIDs(ids...)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (tpuo *TimePreferenceUpdateOne) AddTaskIDs(ids ...int) *TimePreferenceUpdateOne {
	tpuo.mutation.AddTaskIDs(ids...)
	return tpuo
}

// AddTasks adds the "tasks" edges to the Task entity.
func (tpuo *TimePreferenceUpdateOne) AddTasks(t ...*Task) *TimePreferenceUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tpuo.AddTaskIDs(ids...)
}

// Mutation returns the TimePreferenceMutation object of the builder.
func (tpuo *TimePreferenceUpdateOne) Mutation() *TimePreferenceMutation {
	return tpuo.mutation
}

// ClearSkills clears all "skills" edges to the Skill entity.
func (tpuo *TimePreferenceUpdateOne) ClearSkills() *TimePreferenceUpdateOne {
	tpuo.mutation.ClearSkills()
	return tpuo
}

// RemoveSkillIDs removes the "skills" edge to Skill entities by IDs.
func (tpuo *TimePreferenceUpdateOne) RemoveSkillIDs(ids ...int) *TimePreferenceUpdateOne {
	tpuo.mutation.RemoveSkillIDs(ids...)
	return tpuo
}

// RemoveSkills removes "skills" edges to Skill entities.
func (tpuo *TimePreferenceUpdateOne) RemoveSkills(s ...*Skill) *TimePreferenceUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tpuo.RemoveSkillIDs(ids...)
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (tpuo *TimePreferenceUpdateOne) ClearTasks() *TimePreferenceUpdateOne {
	tpuo.mutation.ClearTasks()
	return tpuo
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (tpuo *TimePreferenceUpdateOne) RemoveTaskIDs(ids ...int) *TimePreferenceUpdateOne {
	tpuo.mutation.RemoveTaskIDs(ids...)
	return tpuo
}

// RemoveTasks removes "tasks" edges to Task entities.
func (tpuo *TimePreferenceUpdateOne) RemoveTasks(t ...*Task) *TimePreferenceUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tpuo.RemoveTaskIDs(ids...)
}

// Where appends a list predicates to the TimePreferenceUpdate builder.
func (tpuo *TimePreferenceUpdateOne) Where(ps ...predicate.TimePreference) *TimePreferenceUpdateOne {
	tpuo.mutation.Where(ps...)
	return tpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tpuo *TimePreferenceUpdateOne) Select(field string, fields ...string) *TimePreferenceUpdateOne {
	tpuo.fields = append([]string{field}, fields...)
	return tpuo
}

// Save executes the query and returns the updated TimePreference entity.
func (tpuo *TimePreferenceUpdateOne) Save(ctx context.Context) (*TimePreference, error) {
	return withHooks(ctx, tpuo.sqlSave, tpuo.mutation, tpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tpuo *TimePreferenceUpdateOne) SaveX(ctx context.Context) *TimePreference {
	node, err := tpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tpuo *TimePreferenceUpdateOne) Exec(ctx context.Context) error {
	_, err := tpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tpuo *TimePreferenceUpdateOne) ExecX(ctx context.Context) {
	if err := tpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tpuo *TimePreferenceUpdateOne) sqlSave(ctx context.Context) (_node *TimePreference, err error) {
	_spec := sqlgraph.NewUpdateSpec(timepreference.Table, timepreference.Columns, sqlgraph.NewFieldSpec(timepreference.FieldID, field.TypeInt))
	id, ok := tpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TimePreference.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, timepreference.FieldID)
		for _, f := range fields {
			if !timepreference.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != timepreference.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tpuo.mutation.Day(); ok {
		_spec.SetField(timepreference.FieldDay, field.TypeString, value)
	}
	if tpuo.mutation.SkillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   timepreference.SkillsTable,
			Columns: timepreference.SkillsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(skill.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpuo.mutation.RemovedSkillsIDs(); len(nodes) > 0 && !tpuo.mutation.SkillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   timepreference.SkillsTable,
			Columns: timepreference.SkillsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(skill.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpuo.mutation.SkillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   timepreference.SkillsTable,
			Columns: timepreference.SkillsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(skill.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tpuo.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   timepreference.TasksTable,
			Columns: timepreference.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpuo.mutation.RemovedTasksIDs(); len(nodes) > 0 && !tpuo.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   timepreference.TasksTable,
			Columns: timepreference.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpuo.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   timepreference.TasksTable,
			Columns: timepreference.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TimePreference{config: tpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{timepreference.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tpuo.mutation.done = true
	return _node, nil
}
