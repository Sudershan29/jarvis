// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/calendar"
	"backend/ent/category"
	"backend/ent/goal"
	"backend/ent/hobby"
	"backend/ent/meeting"
	"backend/ent/predicate"
	"backend/ent/preference"
	"backend/ent/proposal"
	"backend/ent/skill"
	"backend/ent/task"
	"backend/ent/timepreference"
	"backend/ent/user"
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCalendar       = "Calendar"
	TypeCategory       = "Category"
	TypeGoal           = "Goal"
	TypeHobby          = "Hobby"
	TypeMeeting        = "Meeting"
	TypePreference     = "Preference"
	TypeProposal       = "Proposal"
	TypeSkill          = "Skill"
	TypeTask           = "Task"
	TypeTimePreference = "TimePreference"
	TypeUser           = "User"
)

// CalendarMutation represents an operation that mutates the Calendar nodes in the graph.
type CalendarMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	_type         *string
	token         *string
	created_at    *time.Time
	clearedFields map[string]struct{}
	user          *int
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*Calendar, error)
	predicates    []predicate.Calendar
}

var _ ent.Mutation = (*CalendarMutation)(nil)

// calendarOption allows management of the mutation configuration using functional options.
type calendarOption func(*CalendarMutation)

// newCalendarMutation creates new mutation for the Calendar entity.
func newCalendarMutation(c config, op Op, opts ...calendarOption) *CalendarMutation {
	m := &CalendarMutation{
		config:        c,
		op:            op,
		typ:           TypeCalendar,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCalendarID sets the ID field of the mutation.
func withCalendarID(id int) calendarOption {
	return func(m *CalendarMutation) {
		var (
			err   error
			once  sync.Once
			value *Calendar
		)
		m.oldValue = func(ctx context.Context) (*Calendar, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Calendar.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCalendar sets the old Calendar of the mutation.
func withCalendar(node *Calendar) calendarOption {
	return func(m *CalendarMutation) {
		m.oldValue = func(context.Context) (*Calendar, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CalendarMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CalendarMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CalendarMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CalendarMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Calendar.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *CalendarMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *CalendarMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Calendar entity.
// If the Calendar object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CalendarMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *CalendarMutation) ResetName() {
	m.name = nil
}

// SetType sets the "type" field.
func (m *CalendarMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *CalendarMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Calendar entity.
// If the Calendar object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CalendarMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *CalendarMutation) ResetType() {
	m._type = nil
}

// SetToken sets the "token" field.
func (m *CalendarMutation) SetToken(s string) {
	m.token = &s
}

// Token returns the value of the "token" field in the mutation.
func (m *CalendarMutation) Token() (r string, exists bool) {
	v := m.token
	if v == nil {
		return
	}
	return *v, true
}

// OldToken returns the old "token" field's value of the Calendar entity.
// If the Calendar object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CalendarMutation) OldToken(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldToken: %w", err)
	}
	return oldValue.Token, nil
}

// ClearToken clears the value of the "token" field.
func (m *CalendarMutation) ClearToken() {
	m.token = nil
	m.clearedFields[calendar.FieldToken] = struct{}{}
}

// TokenCleared returns if the "token" field was cleared in this mutation.
func (m *CalendarMutation) TokenCleared() bool {
	_, ok := m.clearedFields[calendar.FieldToken]
	return ok
}

// ResetToken resets all changes to the "token" field.
func (m *CalendarMutation) ResetToken() {
	m.token = nil
	delete(m.clearedFields, calendar.FieldToken)
}

// SetCreatedAt sets the "created_at" field.
func (m *CalendarMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CalendarMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Calendar entity.
// If the Calendar object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CalendarMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CalendarMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *CalendarMutation) SetUserID(id int) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *CalendarMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *CalendarMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *CalendarMutation) UserID() (id int, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *CalendarMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *CalendarMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the CalendarMutation builder.
func (m *CalendarMutation) Where(ps ...predicate.Calendar) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CalendarMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CalendarMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Calendar, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CalendarMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CalendarMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Calendar).
func (m *CalendarMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CalendarMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.name != nil {
		fields = append(fields, calendar.FieldName)
	}
	if m._type != nil {
		fields = append(fields, calendar.FieldType)
	}
	if m.token != nil {
		fields = append(fields, calendar.FieldToken)
	}
	if m.created_at != nil {
		fields = append(fields, calendar.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CalendarMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case calendar.FieldName:
		return m.Name()
	case calendar.FieldType:
		return m.GetType()
	case calendar.FieldToken:
		return m.Token()
	case calendar.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CalendarMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case calendar.FieldName:
		return m.OldName(ctx)
	case calendar.FieldType:
		return m.OldType(ctx)
	case calendar.FieldToken:
		return m.OldToken(ctx)
	case calendar.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Calendar field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CalendarMutation) SetField(name string, value ent.Value) error {
	switch name {
	case calendar.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case calendar.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case calendar.FieldToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetToken(v)
		return nil
	case calendar.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Calendar field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CalendarMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CalendarMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CalendarMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Calendar numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CalendarMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(calendar.FieldToken) {
		fields = append(fields, calendar.FieldToken)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CalendarMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CalendarMutation) ClearField(name string) error {
	switch name {
	case calendar.FieldToken:
		m.ClearToken()
		return nil
	}
	return fmt.Errorf("unknown Calendar nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CalendarMutation) ResetField(name string) error {
	switch name {
	case calendar.FieldName:
		m.ResetName()
		return nil
	case calendar.FieldType:
		m.ResetType()
		return nil
	case calendar.FieldToken:
		m.ResetToken()
		return nil
	case calendar.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Calendar field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CalendarMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user != nil {
		edges = append(edges, calendar.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CalendarMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case calendar.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CalendarMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CalendarMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CalendarMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser {
		edges = append(edges, calendar.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CalendarMutation) EdgeCleared(name string) bool {
	switch name {
	case calendar.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CalendarMutation) ClearEdge(name string) error {
	switch name {
	case calendar.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Calendar unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CalendarMutation) ResetEdge(name string) error {
	switch name {
	case calendar.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown Calendar edge %s", name)
}

// CategoryMutation represents an operation that mutates the Category nodes in the graph.
type CategoryMutation struct {
	config
	op             Op
	typ            string
	id             *int
	name           *string
	clearedFields  map[string]struct{}
	skills         map[int]struct{}
	removedskills  map[int]struct{}
	clearedskills  bool
	tasks          map[int]struct{}
	removedtasks   map[int]struct{}
	clearedtasks   bool
	goals          map[int]struct{}
	removedgoals   map[int]struct{}
	clearedgoals   bool
	hobbies        map[int]struct{}
	removedhobbies map[int]struct{}
	clearedhobbies bool
	user           *int
	cleareduser    bool
	done           bool
	oldValue       func(context.Context) (*Category, error)
	predicates     []predicate.Category
}

var _ ent.Mutation = (*CategoryMutation)(nil)

// categoryOption allows management of the mutation configuration using functional options.
type categoryOption func(*CategoryMutation)

// newCategoryMutation creates new mutation for the Category entity.
func newCategoryMutation(c config, op Op, opts ...categoryOption) *CategoryMutation {
	m := &CategoryMutation{
		config:        c,
		op:            op,
		typ:           TypeCategory,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCategoryID sets the ID field of the mutation.
func withCategoryID(id int) categoryOption {
	return func(m *CategoryMutation) {
		var (
			err   error
			once  sync.Once
			value *Category
		)
		m.oldValue = func(ctx context.Context) (*Category, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Category.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCategory sets the old Category of the mutation.
func withCategory(node *Category) categoryOption {
	return func(m *CategoryMutation) {
		m.oldValue = func(context.Context) (*Category, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CategoryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CategoryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CategoryMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CategoryMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Category.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *CategoryMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *CategoryMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Category entity.
// If the Category object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CategoryMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *CategoryMutation) ResetName() {
	m.name = nil
}

// AddSkillIDs adds the "skills" edge to the Skill entity by ids.
func (m *CategoryMutation) AddSkillIDs(ids ...int) {
	if m.skills == nil {
		m.skills = make(map[int]struct{})
	}
	for i := range ids {
		m.skills[ids[i]] = struct{}{}
	}
}

// ClearSkills clears the "skills" edge to the Skill entity.
func (m *CategoryMutation) ClearSkills() {
	m.clearedskills = true
}

// SkillsCleared reports if the "skills" edge to the Skill entity was cleared.
func (m *CategoryMutation) SkillsCleared() bool {
	return m.clearedskills
}

// RemoveSkillIDs removes the "skills" edge to the Skill entity by IDs.
func (m *CategoryMutation) RemoveSkillIDs(ids ...int) {
	if m.removedskills == nil {
		m.removedskills = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.skills, ids[i])
		m.removedskills[ids[i]] = struct{}{}
	}
}

// RemovedSkills returns the removed IDs of the "skills" edge to the Skill entity.
func (m *CategoryMutation) RemovedSkillsIDs() (ids []int) {
	for id := range m.removedskills {
		ids = append(ids, id)
	}
	return
}

// SkillsIDs returns the "skills" edge IDs in the mutation.
func (m *CategoryMutation) SkillsIDs() (ids []int) {
	for id := range m.skills {
		ids = append(ids, id)
	}
	return
}

// ResetSkills resets all changes to the "skills" edge.
func (m *CategoryMutation) ResetSkills() {
	m.skills = nil
	m.clearedskills = false
	m.removedskills = nil
}

// AddTaskIDs adds the "tasks" edge to the Task entity by ids.
func (m *CategoryMutation) AddTaskIDs(ids ...int) {
	if m.tasks == nil {
		m.tasks = make(map[int]struct{})
	}
	for i := range ids {
		m.tasks[ids[i]] = struct{}{}
	}
}

// ClearTasks clears the "tasks" edge to the Task entity.
func (m *CategoryMutation) ClearTasks() {
	m.clearedtasks = true
}

// TasksCleared reports if the "tasks" edge to the Task entity was cleared.
func (m *CategoryMutation) TasksCleared() bool {
	return m.clearedtasks
}

// RemoveTaskIDs removes the "tasks" edge to the Task entity by IDs.
func (m *CategoryMutation) RemoveTaskIDs(ids ...int) {
	if m.removedtasks == nil {
		m.removedtasks = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.tasks, ids[i])
		m.removedtasks[ids[i]] = struct{}{}
	}
}

// RemovedTasks returns the removed IDs of the "tasks" edge to the Task entity.
func (m *CategoryMutation) RemovedTasksIDs() (ids []int) {
	for id := range m.removedtasks {
		ids = append(ids, id)
	}
	return
}

// TasksIDs returns the "tasks" edge IDs in the mutation.
func (m *CategoryMutation) TasksIDs() (ids []int) {
	for id := range m.tasks {
		ids = append(ids, id)
	}
	return
}

// ResetTasks resets all changes to the "tasks" edge.
func (m *CategoryMutation) ResetTasks() {
	m.tasks = nil
	m.clearedtasks = false
	m.removedtasks = nil
}

// AddGoalIDs adds the "goals" edge to the Goal entity by ids.
func (m *CategoryMutation) AddGoalIDs(ids ...int) {
	if m.goals == nil {
		m.goals = make(map[int]struct{})
	}
	for i := range ids {
		m.goals[ids[i]] = struct{}{}
	}
}

// ClearGoals clears the "goals" edge to the Goal entity.
func (m *CategoryMutation) ClearGoals() {
	m.clearedgoals = true
}

// GoalsCleared reports if the "goals" edge to the Goal entity was cleared.
func (m *CategoryMutation) GoalsCleared() bool {
	return m.clearedgoals
}

// RemoveGoalIDs removes the "goals" edge to the Goal entity by IDs.
func (m *CategoryMutation) RemoveGoalIDs(ids ...int) {
	if m.removedgoals == nil {
		m.removedgoals = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.goals, ids[i])
		m.removedgoals[ids[i]] = struct{}{}
	}
}

// RemovedGoals returns the removed IDs of the "goals" edge to the Goal entity.
func (m *CategoryMutation) RemovedGoalsIDs() (ids []int) {
	for id := range m.removedgoals {
		ids = append(ids, id)
	}
	return
}

// GoalsIDs returns the "goals" edge IDs in the mutation.
func (m *CategoryMutation) GoalsIDs() (ids []int) {
	for id := range m.goals {
		ids = append(ids, id)
	}
	return
}

// ResetGoals resets all changes to the "goals" edge.
func (m *CategoryMutation) ResetGoals() {
	m.goals = nil
	m.clearedgoals = false
	m.removedgoals = nil
}

// AddHobbyIDs adds the "hobbies" edge to the Hobby entity by ids.
func (m *CategoryMutation) AddHobbyIDs(ids ...int) {
	if m.hobbies == nil {
		m.hobbies = make(map[int]struct{})
	}
	for i := range ids {
		m.hobbies[ids[i]] = struct{}{}
	}
}

// ClearHobbies clears the "hobbies" edge to the Hobby entity.
func (m *CategoryMutation) ClearHobbies() {
	m.clearedhobbies = true
}

// HobbiesCleared reports if the "hobbies" edge to the Hobby entity was cleared.
func (m *CategoryMutation) HobbiesCleared() bool {
	return m.clearedhobbies
}

// RemoveHobbyIDs removes the "hobbies" edge to the Hobby entity by IDs.
func (m *CategoryMutation) RemoveHobbyIDs(ids ...int) {
	if m.removedhobbies == nil {
		m.removedhobbies = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.hobbies, ids[i])
		m.removedhobbies[ids[i]] = struct{}{}
	}
}

// RemovedHobbies returns the removed IDs of the "hobbies" edge to the Hobby entity.
func (m *CategoryMutation) RemovedHobbiesIDs() (ids []int) {
	for id := range m.removedhobbies {
		ids = append(ids, id)
	}
	return
}

// HobbiesIDs returns the "hobbies" edge IDs in the mutation.
func (m *CategoryMutation) HobbiesIDs() (ids []int) {
	for id := range m.hobbies {
		ids = append(ids, id)
	}
	return
}

// ResetHobbies resets all changes to the "hobbies" edge.
func (m *CategoryMutation) ResetHobbies() {
	m.hobbies = nil
	m.clearedhobbies = false
	m.removedhobbies = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *CategoryMutation) SetUserID(id int) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *CategoryMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *CategoryMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *CategoryMutation) UserID() (id int, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *CategoryMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *CategoryMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the CategoryMutation builder.
func (m *CategoryMutation) Where(ps ...predicate.Category) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CategoryMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CategoryMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Category, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CategoryMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CategoryMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Category).
func (m *CategoryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CategoryMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, category.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CategoryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case category.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CategoryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case category.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Category field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CategoryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case category.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Category field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CategoryMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CategoryMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CategoryMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Category numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CategoryMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CategoryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CategoryMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Category nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CategoryMutation) ResetField(name string) error {
	switch name {
	case category.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Category field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CategoryMutation) AddedEdges() []string {
	edges := make([]string, 0, 5)
	if m.skills != nil {
		edges = append(edges, category.EdgeSkills)
	}
	if m.tasks != nil {
		edges = append(edges, category.EdgeTasks)
	}
	if m.goals != nil {
		edges = append(edges, category.EdgeGoals)
	}
	if m.hobbies != nil {
		edges = append(edges, category.EdgeHobbies)
	}
	if m.user != nil {
		edges = append(edges, category.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CategoryMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case category.EdgeSkills:
		ids := make([]ent.Value, 0, len(m.skills))
		for id := range m.skills {
			ids = append(ids, id)
		}
		return ids
	case category.EdgeTasks:
		ids := make([]ent.Value, 0, len(m.tasks))
		for id := range m.tasks {
			ids = append(ids, id)
		}
		return ids
	case category.EdgeGoals:
		ids := make([]ent.Value, 0, len(m.goals))
		for id := range m.goals {
			ids = append(ids, id)
		}
		return ids
	case category.EdgeHobbies:
		ids := make([]ent.Value, 0, len(m.hobbies))
		for id := range m.hobbies {
			ids = append(ids, id)
		}
		return ids
	case category.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CategoryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 5)
	if m.removedskills != nil {
		edges = append(edges, category.EdgeSkills)
	}
	if m.removedtasks != nil {
		edges = append(edges, category.EdgeTasks)
	}
	if m.removedgoals != nil {
		edges = append(edges, category.EdgeGoals)
	}
	if m.removedhobbies != nil {
		edges = append(edges, category.EdgeHobbies)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CategoryMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case category.EdgeSkills:
		ids := make([]ent.Value, 0, len(m.removedskills))
		for id := range m.removedskills {
			ids = append(ids, id)
		}
		return ids
	case category.EdgeTasks:
		ids := make([]ent.Value, 0, len(m.removedtasks))
		for id := range m.removedtasks {
			ids = append(ids, id)
		}
		return ids
	case category.EdgeGoals:
		ids := make([]ent.Value, 0, len(m.removedgoals))
		for id := range m.removedgoals {
			ids = append(ids, id)
		}
		return ids
	case category.EdgeHobbies:
		ids := make([]ent.Value, 0, len(m.removedhobbies))
		for id := range m.removedhobbies {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CategoryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 5)
	if m.clearedskills {
		edges = append(edges, category.EdgeSkills)
	}
	if m.clearedtasks {
		edges = append(edges, category.EdgeTasks)
	}
	if m.clearedgoals {
		edges = append(edges, category.EdgeGoals)
	}
	if m.clearedhobbies {
		edges = append(edges, category.EdgeHobbies)
	}
	if m.cleareduser {
		edges = append(edges, category.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CategoryMutation) EdgeCleared(name string) bool {
	switch name {
	case category.EdgeSkills:
		return m.clearedskills
	case category.EdgeTasks:
		return m.clearedtasks
	case category.EdgeGoals:
		return m.clearedgoals
	case category.EdgeHobbies:
		return m.clearedhobbies
	case category.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CategoryMutation) ClearEdge(name string) error {
	switch name {
	case category.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Category unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CategoryMutation) ResetEdge(name string) error {
	switch name {
	case category.EdgeSkills:
		m.ResetSkills()
		return nil
	case category.EdgeTasks:
		m.ResetTasks()
		return nil
	case category.EdgeGoals:
		m.ResetGoals()
		return nil
	case category.EdgeHobbies:
		m.ResetHobbies()
		return nil
	case category.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown Category edge %s", name)
}

// GoalMutation represents an operation that mutates the Goal nodes in the graph.
type GoalMutation struct {
	config
	op                Op
	typ               string
	id                *int
	name              *string
	description       *string
	created_at        *time.Time
	clearedFields     map[string]struct{}
	categories        map[int]struct{}
	removedcategories map[int]struct{}
	clearedcategories bool
	user              *int
	cleareduser       bool
	done              bool
	oldValue          func(context.Context) (*Goal, error)
	predicates        []predicate.Goal
}

var _ ent.Mutation = (*GoalMutation)(nil)

// goalOption allows management of the mutation configuration using functional options.
type goalOption func(*GoalMutation)

// newGoalMutation creates new mutation for the Goal entity.
func newGoalMutation(c config, op Op, opts ...goalOption) *GoalMutation {
	m := &GoalMutation{
		config:        c,
		op:            op,
		typ:           TypeGoal,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGoalID sets the ID field of the mutation.
func withGoalID(id int) goalOption {
	return func(m *GoalMutation) {
		var (
			err   error
			once  sync.Once
			value *Goal
		)
		m.oldValue = func(ctx context.Context) (*Goal, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Goal.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGoal sets the old Goal of the mutation.
func withGoal(node *Goal) goalOption {
	return func(m *GoalMutation) {
		m.oldValue = func(context.Context) (*Goal, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GoalMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GoalMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GoalMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GoalMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Goal.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *GoalMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *GoalMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Goal entity.
// If the Goal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoalMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *GoalMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *GoalMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *GoalMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Goal entity.
// If the Goal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoalMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *GoalMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[goal.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *GoalMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[goal.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *GoalMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, goal.FieldDescription)
}

// SetCreatedAt sets the "created_at" field.
func (m *GoalMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *GoalMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Goal entity.
// If the Goal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoalMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *GoalMutation) ResetCreatedAt() {
	m.created_at = nil
}

// AddCategoryIDs adds the "categories" edge to the Category entity by ids.
func (m *GoalMutation) AddCategoryIDs(ids ...int) {
	if m.categories == nil {
		m.categories = make(map[int]struct{})
	}
	for i := range ids {
		m.categories[ids[i]] = struct{}{}
	}
}

// ClearCategories clears the "categories" edge to the Category entity.
func (m *GoalMutation) ClearCategories() {
	m.clearedcategories = true
}

// CategoriesCleared reports if the "categories" edge to the Category entity was cleared.
func (m *GoalMutation) CategoriesCleared() bool {
	return m.clearedcategories
}

// RemoveCategoryIDs removes the "categories" edge to the Category entity by IDs.
func (m *GoalMutation) RemoveCategoryIDs(ids ...int) {
	if m.removedcategories == nil {
		m.removedcategories = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.categories, ids[i])
		m.removedcategories[ids[i]] = struct{}{}
	}
}

// RemovedCategories returns the removed IDs of the "categories" edge to the Category entity.
func (m *GoalMutation) RemovedCategoriesIDs() (ids []int) {
	for id := range m.removedcategories {
		ids = append(ids, id)
	}
	return
}

// CategoriesIDs returns the "categories" edge IDs in the mutation.
func (m *GoalMutation) CategoriesIDs() (ids []int) {
	for id := range m.categories {
		ids = append(ids, id)
	}
	return
}

// ResetCategories resets all changes to the "categories" edge.
func (m *GoalMutation) ResetCategories() {
	m.categories = nil
	m.clearedcategories = false
	m.removedcategories = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *GoalMutation) SetUserID(id int) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *GoalMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *GoalMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *GoalMutation) UserID() (id int, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *GoalMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *GoalMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the GoalMutation builder.
func (m *GoalMutation) Where(ps ...predicate.Goal) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the GoalMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *GoalMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Goal, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *GoalMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *GoalMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Goal).
func (m *GoalMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GoalMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.name != nil {
		fields = append(fields, goal.FieldName)
	}
	if m.description != nil {
		fields = append(fields, goal.FieldDescription)
	}
	if m.created_at != nil {
		fields = append(fields, goal.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GoalMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case goal.FieldName:
		return m.Name()
	case goal.FieldDescription:
		return m.Description()
	case goal.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GoalMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case goal.FieldName:
		return m.OldName(ctx)
	case goal.FieldDescription:
		return m.OldDescription(ctx)
	case goal.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Goal field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GoalMutation) SetField(name string, value ent.Value) error {
	switch name {
	case goal.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case goal.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case goal.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Goal field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GoalMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GoalMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GoalMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Goal numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GoalMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(goal.FieldDescription) {
		fields = append(fields, goal.FieldDescription)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GoalMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GoalMutation) ClearField(name string) error {
	switch name {
	case goal.FieldDescription:
		m.ClearDescription()
		return nil
	}
	return fmt.Errorf("unknown Goal nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GoalMutation) ResetField(name string) error {
	switch name {
	case goal.FieldName:
		m.ResetName()
		return nil
	case goal.FieldDescription:
		m.ResetDescription()
		return nil
	case goal.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Goal field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GoalMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.categories != nil {
		edges = append(edges, goal.EdgeCategories)
	}
	if m.user != nil {
		edges = append(edges, goal.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GoalMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case goal.EdgeCategories:
		ids := make([]ent.Value, 0, len(m.categories))
		for id := range m.categories {
			ids = append(ids, id)
		}
		return ids
	case goal.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GoalMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedcategories != nil {
		edges = append(edges, goal.EdgeCategories)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GoalMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case goal.EdgeCategories:
		ids := make([]ent.Value, 0, len(m.removedcategories))
		for id := range m.removedcategories {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GoalMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedcategories {
		edges = append(edges, goal.EdgeCategories)
	}
	if m.cleareduser {
		edges = append(edges, goal.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GoalMutation) EdgeCleared(name string) bool {
	switch name {
	case goal.EdgeCategories:
		return m.clearedcategories
	case goal.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GoalMutation) ClearEdge(name string) error {
	switch name {
	case goal.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Goal unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GoalMutation) ResetEdge(name string) error {
	switch name {
	case goal.EdgeCategories:
		m.ResetCategories()
		return nil
	case goal.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown Goal edge %s", name)
}

// HobbyMutation represents an operation that mutates the Hobby nodes in the graph.
type HobbyMutation struct {
	config
	op                Op
	typ               string
	id                *int
	name              *string
	description       *string
	created_at        *time.Time
	clearedFields     map[string]struct{}
	categories        map[int]struct{}
	removedcategories map[int]struct{}
	clearedcategories bool
	user              *int
	cleareduser       bool
	done              bool
	oldValue          func(context.Context) (*Hobby, error)
	predicates        []predicate.Hobby
}

var _ ent.Mutation = (*HobbyMutation)(nil)

// hobbyOption allows management of the mutation configuration using functional options.
type hobbyOption func(*HobbyMutation)

// newHobbyMutation creates new mutation for the Hobby entity.
func newHobbyMutation(c config, op Op, opts ...hobbyOption) *HobbyMutation {
	m := &HobbyMutation{
		config:        c,
		op:            op,
		typ:           TypeHobby,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withHobbyID sets the ID field of the mutation.
func withHobbyID(id int) hobbyOption {
	return func(m *HobbyMutation) {
		var (
			err   error
			once  sync.Once
			value *Hobby
		)
		m.oldValue = func(ctx context.Context) (*Hobby, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Hobby.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withHobby sets the old Hobby of the mutation.
func withHobby(node *Hobby) hobbyOption {
	return func(m *HobbyMutation) {
		m.oldValue = func(context.Context) (*Hobby, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m HobbyMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m HobbyMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *HobbyMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *HobbyMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Hobby.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *HobbyMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *HobbyMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Hobby entity.
// If the Hobby object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HobbyMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *HobbyMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *HobbyMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *HobbyMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Hobby entity.
// If the Hobby object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HobbyMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *HobbyMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[hobby.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *HobbyMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[hobby.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *HobbyMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, hobby.FieldDescription)
}

// SetCreatedAt sets the "created_at" field.
func (m *HobbyMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *HobbyMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Hobby entity.
// If the Hobby object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HobbyMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *HobbyMutation) ResetCreatedAt() {
	m.created_at = nil
}

// AddCategoryIDs adds the "categories" edge to the Category entity by ids.
func (m *HobbyMutation) AddCategoryIDs(ids ...int) {
	if m.categories == nil {
		m.categories = make(map[int]struct{})
	}
	for i := range ids {
		m.categories[ids[i]] = struct{}{}
	}
}

// ClearCategories clears the "categories" edge to the Category entity.
func (m *HobbyMutation) ClearCategories() {
	m.clearedcategories = true
}

// CategoriesCleared reports if the "categories" edge to the Category entity was cleared.
func (m *HobbyMutation) CategoriesCleared() bool {
	return m.clearedcategories
}

// RemoveCategoryIDs removes the "categories" edge to the Category entity by IDs.
func (m *HobbyMutation) RemoveCategoryIDs(ids ...int) {
	if m.removedcategories == nil {
		m.removedcategories = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.categories, ids[i])
		m.removedcategories[ids[i]] = struct{}{}
	}
}

// RemovedCategories returns the removed IDs of the "categories" edge to the Category entity.
func (m *HobbyMutation) RemovedCategoriesIDs() (ids []int) {
	for id := range m.removedcategories {
		ids = append(ids, id)
	}
	return
}

// CategoriesIDs returns the "categories" edge IDs in the mutation.
func (m *HobbyMutation) CategoriesIDs() (ids []int) {
	for id := range m.categories {
		ids = append(ids, id)
	}
	return
}

// ResetCategories resets all changes to the "categories" edge.
func (m *HobbyMutation) ResetCategories() {
	m.categories = nil
	m.clearedcategories = false
	m.removedcategories = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *HobbyMutation) SetUserID(id int) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *HobbyMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *HobbyMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *HobbyMutation) UserID() (id int, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *HobbyMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *HobbyMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the HobbyMutation builder.
func (m *HobbyMutation) Where(ps ...predicate.Hobby) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the HobbyMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *HobbyMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Hobby, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *HobbyMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *HobbyMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Hobby).
func (m *HobbyMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *HobbyMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.name != nil {
		fields = append(fields, hobby.FieldName)
	}
	if m.description != nil {
		fields = append(fields, hobby.FieldDescription)
	}
	if m.created_at != nil {
		fields = append(fields, hobby.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *HobbyMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case hobby.FieldName:
		return m.Name()
	case hobby.FieldDescription:
		return m.Description()
	case hobby.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *HobbyMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case hobby.FieldName:
		return m.OldName(ctx)
	case hobby.FieldDescription:
		return m.OldDescription(ctx)
	case hobby.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Hobby field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HobbyMutation) SetField(name string, value ent.Value) error {
	switch name {
	case hobby.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case hobby.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case hobby.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Hobby field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *HobbyMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *HobbyMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HobbyMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Hobby numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *HobbyMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(hobby.FieldDescription) {
		fields = append(fields, hobby.FieldDescription)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *HobbyMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *HobbyMutation) ClearField(name string) error {
	switch name {
	case hobby.FieldDescription:
		m.ClearDescription()
		return nil
	}
	return fmt.Errorf("unknown Hobby nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *HobbyMutation) ResetField(name string) error {
	switch name {
	case hobby.FieldName:
		m.ResetName()
		return nil
	case hobby.FieldDescription:
		m.ResetDescription()
		return nil
	case hobby.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Hobby field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *HobbyMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.categories != nil {
		edges = append(edges, hobby.EdgeCategories)
	}
	if m.user != nil {
		edges = append(edges, hobby.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *HobbyMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case hobby.EdgeCategories:
		ids := make([]ent.Value, 0, len(m.categories))
		for id := range m.categories {
			ids = append(ids, id)
		}
		return ids
	case hobby.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *HobbyMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedcategories != nil {
		edges = append(edges, hobby.EdgeCategories)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *HobbyMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case hobby.EdgeCategories:
		ids := make([]ent.Value, 0, len(m.removedcategories))
		for id := range m.removedcategories {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *HobbyMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedcategories {
		edges = append(edges, hobby.EdgeCategories)
	}
	if m.cleareduser {
		edges = append(edges, hobby.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *HobbyMutation) EdgeCleared(name string) bool {
	switch name {
	case hobby.EdgeCategories:
		return m.clearedcategories
	case hobby.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *HobbyMutation) ClearEdge(name string) error {
	switch name {
	case hobby.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Hobby unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *HobbyMutation) ResetEdge(name string) error {
	switch name {
	case hobby.EdgeCategories:
		m.ResetCategories()
		return nil
	case hobby.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown Hobby edge %s", name)
}

// MeetingMutation represents an operation that mutates the Meeting nodes in the graph.
type MeetingMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	description   *string
	where         *string
	whom          *string
	duration      *int
	addduration   *int
	created_at    *time.Time
	when          *time.Time
	clearedFields map[string]struct{}
	user          *int
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*Meeting, error)
	predicates    []predicate.Meeting
}

var _ ent.Mutation = (*MeetingMutation)(nil)

// meetingOption allows management of the mutation configuration using functional options.
type meetingOption func(*MeetingMutation)

// newMeetingMutation creates new mutation for the Meeting entity.
func newMeetingMutation(c config, op Op, opts ...meetingOption) *MeetingMutation {
	m := &MeetingMutation{
		config:        c,
		op:            op,
		typ:           TypeMeeting,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMeetingID sets the ID field of the mutation.
func withMeetingID(id int) meetingOption {
	return func(m *MeetingMutation) {
		var (
			err   error
			once  sync.Once
			value *Meeting
		)
		m.oldValue = func(ctx context.Context) (*Meeting, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Meeting.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMeeting sets the old Meeting of the mutation.
func withMeeting(node *Meeting) meetingOption {
	return func(m *MeetingMutation) {
		m.oldValue = func(context.Context) (*Meeting, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MeetingMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MeetingMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MeetingMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MeetingMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Meeting.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *MeetingMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *MeetingMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Meeting entity.
// If the Meeting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MeetingMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *MeetingMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *MeetingMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *MeetingMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Meeting entity.
// If the Meeting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MeetingMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *MeetingMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[meeting.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *MeetingMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[meeting.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *MeetingMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, meeting.FieldDescription)
}

// SetWhere sets the "where" field.
func (m *MeetingMutation) SetWhere(s string) {
	m.where = &s
}

// GetWhere returns the value of the "where" field in the mutation.
func (m *MeetingMutation) GetWhere() (r string, exists bool) {
	v := m.where
	if v == nil {
		return
	}
	return *v, true
}

// OldWhere returns the old "where" field's value of the Meeting entity.
// If the Meeting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MeetingMutation) OldWhere(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWhere is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWhere requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWhere: %w", err)
	}
	return oldValue.Where, nil
}

// ClearWhere clears the value of the "where" field.
func (m *MeetingMutation) ClearWhere() {
	m.where = nil
	m.clearedFields[meeting.FieldWhere] = struct{}{}
}

// WhereCleared returns if the "where" field was cleared in this mutation.
func (m *MeetingMutation) WhereCleared() bool {
	_, ok := m.clearedFields[meeting.FieldWhere]
	return ok
}

// ResetWhere resets all changes to the "where" field.
func (m *MeetingMutation) ResetWhere() {
	m.where = nil
	delete(m.clearedFields, meeting.FieldWhere)
}

// SetWhom sets the "whom" field.
func (m *MeetingMutation) SetWhom(s string) {
	m.whom = &s
}

// Whom returns the value of the "whom" field in the mutation.
func (m *MeetingMutation) Whom() (r string, exists bool) {
	v := m.whom
	if v == nil {
		return
	}
	return *v, true
}

// OldWhom returns the old "whom" field's value of the Meeting entity.
// If the Meeting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MeetingMutation) OldWhom(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWhom is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWhom requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWhom: %w", err)
	}
	return oldValue.Whom, nil
}

// ClearWhom clears the value of the "whom" field.
func (m *MeetingMutation) ClearWhom() {
	m.whom = nil
	m.clearedFields[meeting.FieldWhom] = struct{}{}
}

// WhomCleared returns if the "whom" field was cleared in this mutation.
func (m *MeetingMutation) WhomCleared() bool {
	_, ok := m.clearedFields[meeting.FieldWhom]
	return ok
}

// ResetWhom resets all changes to the "whom" field.
func (m *MeetingMutation) ResetWhom() {
	m.whom = nil
	delete(m.clearedFields, meeting.FieldWhom)
}

// SetDuration sets the "duration" field.
func (m *MeetingMutation) SetDuration(i int) {
	m.duration = &i
	m.addduration = nil
}

// Duration returns the value of the "duration" field in the mutation.
func (m *MeetingMutation) Duration() (r int, exists bool) {
	v := m.duration
	if v == nil {
		return
	}
	return *v, true
}

// OldDuration returns the old "duration" field's value of the Meeting entity.
// If the Meeting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MeetingMutation) OldDuration(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDuration is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDuration requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDuration: %w", err)
	}
	return oldValue.Duration, nil
}

// AddDuration adds i to the "duration" field.
func (m *MeetingMutation) AddDuration(i int) {
	if m.addduration != nil {
		*m.addduration += i
	} else {
		m.addduration = &i
	}
}

// AddedDuration returns the value that was added to the "duration" field in this mutation.
func (m *MeetingMutation) AddedDuration() (r int, exists bool) {
	v := m.addduration
	if v == nil {
		return
	}
	return *v, true
}

// ResetDuration resets all changes to the "duration" field.
func (m *MeetingMutation) ResetDuration() {
	m.duration = nil
	m.addduration = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *MeetingMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *MeetingMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Meeting entity.
// If the Meeting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MeetingMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *MeetingMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetWhen sets the "when" field.
func (m *MeetingMutation) SetWhen(t time.Time) {
	m.when = &t
}

// When returns the value of the "when" field in the mutation.
func (m *MeetingMutation) When() (r time.Time, exists bool) {
	v := m.when
	if v == nil {
		return
	}
	return *v, true
}

// OldWhen returns the old "when" field's value of the Meeting entity.
// If the Meeting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MeetingMutation) OldWhen(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWhen is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWhen requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWhen: %w", err)
	}
	return oldValue.When, nil
}

// ClearWhen clears the value of the "when" field.
func (m *MeetingMutation) ClearWhen() {
	m.when = nil
	m.clearedFields[meeting.FieldWhen] = struct{}{}
}

// WhenCleared returns if the "when" field was cleared in this mutation.
func (m *MeetingMutation) WhenCleared() bool {
	_, ok := m.clearedFields[meeting.FieldWhen]
	return ok
}

// ResetWhen resets all changes to the "when" field.
func (m *MeetingMutation) ResetWhen() {
	m.when = nil
	delete(m.clearedFields, meeting.FieldWhen)
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *MeetingMutation) SetUserID(id int) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *MeetingMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *MeetingMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *MeetingMutation) UserID() (id int, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *MeetingMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *MeetingMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the MeetingMutation builder.
func (m *MeetingMutation) Where(ps ...predicate.Meeting) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MeetingMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MeetingMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Meeting, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MeetingMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MeetingMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Meeting).
func (m *MeetingMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MeetingMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.name != nil {
		fields = append(fields, meeting.FieldName)
	}
	if m.description != nil {
		fields = append(fields, meeting.FieldDescription)
	}
	if m.where != nil {
		fields = append(fields, meeting.FieldWhere)
	}
	if m.whom != nil {
		fields = append(fields, meeting.FieldWhom)
	}
	if m.duration != nil {
		fields = append(fields, meeting.FieldDuration)
	}
	if m.created_at != nil {
		fields = append(fields, meeting.FieldCreatedAt)
	}
	if m.when != nil {
		fields = append(fields, meeting.FieldWhen)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MeetingMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case meeting.FieldName:
		return m.Name()
	case meeting.FieldDescription:
		return m.Description()
	case meeting.FieldWhere:
		return m.GetWhere()
	case meeting.FieldWhom:
		return m.Whom()
	case meeting.FieldDuration:
		return m.Duration()
	case meeting.FieldCreatedAt:
		return m.CreatedAt()
	case meeting.FieldWhen:
		return m.When()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MeetingMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case meeting.FieldName:
		return m.OldName(ctx)
	case meeting.FieldDescription:
		return m.OldDescription(ctx)
	case meeting.FieldWhere:
		return m.OldWhere(ctx)
	case meeting.FieldWhom:
		return m.OldWhom(ctx)
	case meeting.FieldDuration:
		return m.OldDuration(ctx)
	case meeting.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case meeting.FieldWhen:
		return m.OldWhen(ctx)
	}
	return nil, fmt.Errorf("unknown Meeting field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MeetingMutation) SetField(name string, value ent.Value) error {
	switch name {
	case meeting.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case meeting.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case meeting.FieldWhere:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWhere(v)
		return nil
	case meeting.FieldWhom:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWhom(v)
		return nil
	case meeting.FieldDuration:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDuration(v)
		return nil
	case meeting.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case meeting.FieldWhen:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWhen(v)
		return nil
	}
	return fmt.Errorf("unknown Meeting field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MeetingMutation) AddedFields() []string {
	var fields []string
	if m.addduration != nil {
		fields = append(fields, meeting.FieldDuration)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MeetingMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case meeting.FieldDuration:
		return m.AddedDuration()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MeetingMutation) AddField(name string, value ent.Value) error {
	switch name {
	case meeting.FieldDuration:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDuration(v)
		return nil
	}
	return fmt.Errorf("unknown Meeting numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MeetingMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(meeting.FieldDescription) {
		fields = append(fields, meeting.FieldDescription)
	}
	if m.FieldCleared(meeting.FieldWhere) {
		fields = append(fields, meeting.FieldWhere)
	}
	if m.FieldCleared(meeting.FieldWhom) {
		fields = append(fields, meeting.FieldWhom)
	}
	if m.FieldCleared(meeting.FieldWhen) {
		fields = append(fields, meeting.FieldWhen)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MeetingMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MeetingMutation) ClearField(name string) error {
	switch name {
	case meeting.FieldDescription:
		m.ClearDescription()
		return nil
	case meeting.FieldWhere:
		m.ClearWhere()
		return nil
	case meeting.FieldWhom:
		m.ClearWhom()
		return nil
	case meeting.FieldWhen:
		m.ClearWhen()
		return nil
	}
	return fmt.Errorf("unknown Meeting nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MeetingMutation) ResetField(name string) error {
	switch name {
	case meeting.FieldName:
		m.ResetName()
		return nil
	case meeting.FieldDescription:
		m.ResetDescription()
		return nil
	case meeting.FieldWhere:
		m.ResetWhere()
		return nil
	case meeting.FieldWhom:
		m.ResetWhom()
		return nil
	case meeting.FieldDuration:
		m.ResetDuration()
		return nil
	case meeting.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case meeting.FieldWhen:
		m.ResetWhen()
		return nil
	}
	return fmt.Errorf("unknown Meeting field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MeetingMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user != nil {
		edges = append(edges, meeting.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MeetingMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case meeting.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MeetingMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MeetingMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MeetingMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser {
		edges = append(edges, meeting.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MeetingMutation) EdgeCleared(name string) bool {
	switch name {
	case meeting.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MeetingMutation) ClearEdge(name string) error {
	switch name {
	case meeting.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Meeting unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MeetingMutation) ResetEdge(name string) error {
	switch name {
	case meeting.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown Meeting edge %s", name)
}

// PreferenceMutation represents an operation that mutates the Preference nodes in the graph.
type PreferenceMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	free_weekends       *bool
	weekly_frequency    *int
	addweekly_frequency *int
	clearedFields       map[string]struct{}
	user                *int
	cleareduser         bool
	done                bool
	oldValue            func(context.Context) (*Preference, error)
	predicates          []predicate.Preference
}

var _ ent.Mutation = (*PreferenceMutation)(nil)

// preferenceOption allows management of the mutation configuration using functional options.
type preferenceOption func(*PreferenceMutation)

// newPreferenceMutation creates new mutation for the Preference entity.
func newPreferenceMutation(c config, op Op, opts ...preferenceOption) *PreferenceMutation {
	m := &PreferenceMutation{
		config:        c,
		op:            op,
		typ:           TypePreference,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPreferenceID sets the ID field of the mutation.
func withPreferenceID(id int) preferenceOption {
	return func(m *PreferenceMutation) {
		var (
			err   error
			once  sync.Once
			value *Preference
		)
		m.oldValue = func(ctx context.Context) (*Preference, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Preference.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPreference sets the old Preference of the mutation.
func withPreference(node *Preference) preferenceOption {
	return func(m *PreferenceMutation) {
		m.oldValue = func(context.Context) (*Preference, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PreferenceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PreferenceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PreferenceMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PreferenceMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Preference.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFreeWeekends sets the "free_weekends" field.
func (m *PreferenceMutation) SetFreeWeekends(b bool) {
	m.free_weekends = &b
}

// FreeWeekends returns the value of the "free_weekends" field in the mutation.
func (m *PreferenceMutation) FreeWeekends() (r bool, exists bool) {
	v := m.free_weekends
	if v == nil {
		return
	}
	return *v, true
}

// OldFreeWeekends returns the old "free_weekends" field's value of the Preference entity.
// If the Preference object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PreferenceMutation) OldFreeWeekends(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFreeWeekends is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFreeWeekends requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFreeWeekends: %w", err)
	}
	return oldValue.FreeWeekends, nil
}

// ResetFreeWeekends resets all changes to the "free_weekends" field.
func (m *PreferenceMutation) ResetFreeWeekends() {
	m.free_weekends = nil
}

// SetWeeklyFrequency sets the "weekly_frequency" field.
func (m *PreferenceMutation) SetWeeklyFrequency(i int) {
	m.weekly_frequency = &i
	m.addweekly_frequency = nil
}

// WeeklyFrequency returns the value of the "weekly_frequency" field in the mutation.
func (m *PreferenceMutation) WeeklyFrequency() (r int, exists bool) {
	v := m.weekly_frequency
	if v == nil {
		return
	}
	return *v, true
}

// OldWeeklyFrequency returns the old "weekly_frequency" field's value of the Preference entity.
// If the Preference object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PreferenceMutation) OldWeeklyFrequency(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWeeklyFrequency is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWeeklyFrequency requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWeeklyFrequency: %w", err)
	}
	return oldValue.WeeklyFrequency, nil
}

// AddWeeklyFrequency adds i to the "weekly_frequency" field.
func (m *PreferenceMutation) AddWeeklyFrequency(i int) {
	if m.addweekly_frequency != nil {
		*m.addweekly_frequency += i
	} else {
		m.addweekly_frequency = &i
	}
}

// AddedWeeklyFrequency returns the value that was added to the "weekly_frequency" field in this mutation.
func (m *PreferenceMutation) AddedWeeklyFrequency() (r int, exists bool) {
	v := m.addweekly_frequency
	if v == nil {
		return
	}
	return *v, true
}

// ClearWeeklyFrequency clears the value of the "weekly_frequency" field.
func (m *PreferenceMutation) ClearWeeklyFrequency() {
	m.weekly_frequency = nil
	m.addweekly_frequency = nil
	m.clearedFields[preference.FieldWeeklyFrequency] = struct{}{}
}

// WeeklyFrequencyCleared returns if the "weekly_frequency" field was cleared in this mutation.
func (m *PreferenceMutation) WeeklyFrequencyCleared() bool {
	_, ok := m.clearedFields[preference.FieldWeeklyFrequency]
	return ok
}

// ResetWeeklyFrequency resets all changes to the "weekly_frequency" field.
func (m *PreferenceMutation) ResetWeeklyFrequency() {
	m.weekly_frequency = nil
	m.addweekly_frequency = nil
	delete(m.clearedFields, preference.FieldWeeklyFrequency)
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *PreferenceMutation) SetUserID(id int) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *PreferenceMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *PreferenceMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *PreferenceMutation) UserID() (id int, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *PreferenceMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *PreferenceMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the PreferenceMutation builder.
func (m *PreferenceMutation) Where(ps ...predicate.Preference) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PreferenceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PreferenceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Preference, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PreferenceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PreferenceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Preference).
func (m *PreferenceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PreferenceMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.free_weekends != nil {
		fields = append(fields, preference.FieldFreeWeekends)
	}
	if m.weekly_frequency != nil {
		fields = append(fields, preference.FieldWeeklyFrequency)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PreferenceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case preference.FieldFreeWeekends:
		return m.FreeWeekends()
	case preference.FieldWeeklyFrequency:
		return m.WeeklyFrequency()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PreferenceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case preference.FieldFreeWeekends:
		return m.OldFreeWeekends(ctx)
	case preference.FieldWeeklyFrequency:
		return m.OldWeeklyFrequency(ctx)
	}
	return nil, fmt.Errorf("unknown Preference field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PreferenceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case preference.FieldFreeWeekends:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFreeWeekends(v)
		return nil
	case preference.FieldWeeklyFrequency:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWeeklyFrequency(v)
		return nil
	}
	return fmt.Errorf("unknown Preference field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PreferenceMutation) AddedFields() []string {
	var fields []string
	if m.addweekly_frequency != nil {
		fields = append(fields, preference.FieldWeeklyFrequency)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PreferenceMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case preference.FieldWeeklyFrequency:
		return m.AddedWeeklyFrequency()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PreferenceMutation) AddField(name string, value ent.Value) error {
	switch name {
	case preference.FieldWeeklyFrequency:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddWeeklyFrequency(v)
		return nil
	}
	return fmt.Errorf("unknown Preference numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PreferenceMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(preference.FieldWeeklyFrequency) {
		fields = append(fields, preference.FieldWeeklyFrequency)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PreferenceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PreferenceMutation) ClearField(name string) error {
	switch name {
	case preference.FieldWeeklyFrequency:
		m.ClearWeeklyFrequency()
		return nil
	}
	return fmt.Errorf("unknown Preference nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PreferenceMutation) ResetField(name string) error {
	switch name {
	case preference.FieldFreeWeekends:
		m.ResetFreeWeekends()
		return nil
	case preference.FieldWeeklyFrequency:
		m.ResetWeeklyFrequency()
		return nil
	}
	return fmt.Errorf("unknown Preference field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PreferenceMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user != nil {
		edges = append(edges, preference.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PreferenceMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case preference.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PreferenceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PreferenceMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PreferenceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser {
		edges = append(edges, preference.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PreferenceMutation) EdgeCleared(name string) bool {
	switch name {
	case preference.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PreferenceMutation) ClearEdge(name string) error {
	switch name {
	case preference.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Preference unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PreferenceMutation) ResetEdge(name string) error {
	switch name {
	case preference.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown Preference edge %s", name)
}

// ProposalMutation represents an operation that mutates the Proposal nodes in the graph.
type ProposalMutation struct {
	config
	op                    Op
	typ                   string
	id                    *int
	name                  *string
	allocated_duration    *int
	addallocated_duration *int
	achieved_duration     *int
	addachieved_duration  *int
	status                *proposal.Status
	scheduled_for         *time.Time
	created_at            *time.Time
	updated_at            *time.Time
	clearedFields         map[string]struct{}
	task                  *int
	clearedtask           bool
	skill                 *int
	clearedskill          bool
	done                  bool
	oldValue              func(context.Context) (*Proposal, error)
	predicates            []predicate.Proposal
}

var _ ent.Mutation = (*ProposalMutation)(nil)

// proposalOption allows management of the mutation configuration using functional options.
type proposalOption func(*ProposalMutation)

// newProposalMutation creates new mutation for the Proposal entity.
func newProposalMutation(c config, op Op, opts ...proposalOption) *ProposalMutation {
	m := &ProposalMutation{
		config:        c,
		op:            op,
		typ:           TypeProposal,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProposalID sets the ID field of the mutation.
func withProposalID(id int) proposalOption {
	return func(m *ProposalMutation) {
		var (
			err   error
			once  sync.Once
			value *Proposal
		)
		m.oldValue = func(ctx context.Context) (*Proposal, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Proposal.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProposal sets the old Proposal of the mutation.
func withProposal(node *Proposal) proposalOption {
	return func(m *ProposalMutation) {
		m.oldValue = func(context.Context) (*Proposal, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProposalMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProposalMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProposalMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProposalMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Proposal.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *ProposalMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ProposalMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Proposal entity.
// If the Proposal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProposalMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ProposalMutation) ResetName() {
	m.name = nil
}

// SetAllocatedDuration sets the "allocated_duration" field.
func (m *ProposalMutation) SetAllocatedDuration(i int) {
	m.allocated_duration = &i
	m.addallocated_duration = nil
}

// AllocatedDuration returns the value of the "allocated_duration" field in the mutation.
func (m *ProposalMutation) AllocatedDuration() (r int, exists bool) {
	v := m.allocated_duration
	if v == nil {
		return
	}
	return *v, true
}

// OldAllocatedDuration returns the old "allocated_duration" field's value of the Proposal entity.
// If the Proposal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProposalMutation) OldAllocatedDuration(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAllocatedDuration is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAllocatedDuration requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAllocatedDuration: %w", err)
	}
	return oldValue.AllocatedDuration, nil
}

// AddAllocatedDuration adds i to the "allocated_duration" field.
func (m *ProposalMutation) AddAllocatedDuration(i int) {
	if m.addallocated_duration != nil {
		*m.addallocated_duration += i
	} else {
		m.addallocated_duration = &i
	}
}

// AddedAllocatedDuration returns the value that was added to the "allocated_duration" field in this mutation.
func (m *ProposalMutation) AddedAllocatedDuration() (r int, exists bool) {
	v := m.addallocated_duration
	if v == nil {
		return
	}
	return *v, true
}

// ResetAllocatedDuration resets all changes to the "allocated_duration" field.
func (m *ProposalMutation) ResetAllocatedDuration() {
	m.allocated_duration = nil
	m.addallocated_duration = nil
}

// SetAchievedDuration sets the "achieved_duration" field.
func (m *ProposalMutation) SetAchievedDuration(i int) {
	m.achieved_duration = &i
	m.addachieved_duration = nil
}

// AchievedDuration returns the value of the "achieved_duration" field in the mutation.
func (m *ProposalMutation) AchievedDuration() (r int, exists bool) {
	v := m.achieved_duration
	if v == nil {
		return
	}
	return *v, true
}

// OldAchievedDuration returns the old "achieved_duration" field's value of the Proposal entity.
// If the Proposal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProposalMutation) OldAchievedDuration(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAchievedDuration is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAchievedDuration requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAchievedDuration: %w", err)
	}
	return oldValue.AchievedDuration, nil
}

// AddAchievedDuration adds i to the "achieved_duration" field.
func (m *ProposalMutation) AddAchievedDuration(i int) {
	if m.addachieved_duration != nil {
		*m.addachieved_duration += i
	} else {
		m.addachieved_duration = &i
	}
}

// AddedAchievedDuration returns the value that was added to the "achieved_duration" field in this mutation.
func (m *ProposalMutation) AddedAchievedDuration() (r int, exists bool) {
	v := m.addachieved_duration
	if v == nil {
		return
	}
	return *v, true
}

// ClearAchievedDuration clears the value of the "achieved_duration" field.
func (m *ProposalMutation) ClearAchievedDuration() {
	m.achieved_duration = nil
	m.addachieved_duration = nil
	m.clearedFields[proposal.FieldAchievedDuration] = struct{}{}
}

// AchievedDurationCleared returns if the "achieved_duration" field was cleared in this mutation.
func (m *ProposalMutation) AchievedDurationCleared() bool {
	_, ok := m.clearedFields[proposal.FieldAchievedDuration]
	return ok
}

// ResetAchievedDuration resets all changes to the "achieved_duration" field.
func (m *ProposalMutation) ResetAchievedDuration() {
	m.achieved_duration = nil
	m.addachieved_duration = nil
	delete(m.clearedFields, proposal.FieldAchievedDuration)
}

// SetStatus sets the "status" field.
func (m *ProposalMutation) SetStatus(pr proposal.Status) {
	m.status = &pr
}

// Status returns the value of the "status" field in the mutation.
func (m *ProposalMutation) Status() (r proposal.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Proposal entity.
// If the Proposal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProposalMutation) OldStatus(ctx context.Context) (v proposal.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *ProposalMutation) ResetStatus() {
	m.status = nil
}

// SetScheduledFor sets the "scheduled_for" field.
func (m *ProposalMutation) SetScheduledFor(t time.Time) {
	m.scheduled_for = &t
}

// ScheduledFor returns the value of the "scheduled_for" field in the mutation.
func (m *ProposalMutation) ScheduledFor() (r time.Time, exists bool) {
	v := m.scheduled_for
	if v == nil {
		return
	}
	return *v, true
}

// OldScheduledFor returns the old "scheduled_for" field's value of the Proposal entity.
// If the Proposal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProposalMutation) OldScheduledFor(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldScheduledFor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldScheduledFor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldScheduledFor: %w", err)
	}
	return oldValue.ScheduledFor, nil
}

// ResetScheduledFor resets all changes to the "scheduled_for" field.
func (m *ProposalMutation) ResetScheduledFor() {
	m.scheduled_for = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *ProposalMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ProposalMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Proposal entity.
// If the Proposal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProposalMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ProposalMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ProposalMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ProposalMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Proposal entity.
// If the Proposal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProposalMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ProposalMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetTaskID sets the "task" edge to the Task entity by id.
func (m *ProposalMutation) SetTaskID(id int) {
	m.task = &id
}

// ClearTask clears the "task" edge to the Task entity.
func (m *ProposalMutation) ClearTask() {
	m.clearedtask = true
}

// TaskCleared reports if the "task" edge to the Task entity was cleared.
func (m *ProposalMutation) TaskCleared() bool {
	return m.clearedtask
}

// TaskID returns the "task" edge ID in the mutation.
func (m *ProposalMutation) TaskID() (id int, exists bool) {
	if m.task != nil {
		return *m.task, true
	}
	return
}

// TaskIDs returns the "task" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TaskID instead. It exists only for internal usage by the builders.
func (m *ProposalMutation) TaskIDs() (ids []int) {
	if id := m.task; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTask resets all changes to the "task" edge.
func (m *ProposalMutation) ResetTask() {
	m.task = nil
	m.clearedtask = false
}

// SetSkillID sets the "skill" edge to the Skill entity by id.
func (m *ProposalMutation) SetSkillID(id int) {
	m.skill = &id
}

// ClearSkill clears the "skill" edge to the Skill entity.
func (m *ProposalMutation) ClearSkill() {
	m.clearedskill = true
}

// SkillCleared reports if the "skill" edge to the Skill entity was cleared.
func (m *ProposalMutation) SkillCleared() bool {
	return m.clearedskill
}

// SkillID returns the "skill" edge ID in the mutation.
func (m *ProposalMutation) SkillID() (id int, exists bool) {
	if m.skill != nil {
		return *m.skill, true
	}
	return
}

// SkillIDs returns the "skill" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SkillID instead. It exists only for internal usage by the builders.
func (m *ProposalMutation) SkillIDs() (ids []int) {
	if id := m.skill; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSkill resets all changes to the "skill" edge.
func (m *ProposalMutation) ResetSkill() {
	m.skill = nil
	m.clearedskill = false
}

// Where appends a list predicates to the ProposalMutation builder.
func (m *ProposalMutation) Where(ps ...predicate.Proposal) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ProposalMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ProposalMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Proposal, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ProposalMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ProposalMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Proposal).
func (m *ProposalMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProposalMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.name != nil {
		fields = append(fields, proposal.FieldName)
	}
	if m.allocated_duration != nil {
		fields = append(fields, proposal.FieldAllocatedDuration)
	}
	if m.achieved_duration != nil {
		fields = append(fields, proposal.FieldAchievedDuration)
	}
	if m.status != nil {
		fields = append(fields, proposal.FieldStatus)
	}
	if m.scheduled_for != nil {
		fields = append(fields, proposal.FieldScheduledFor)
	}
	if m.created_at != nil {
		fields = append(fields, proposal.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, proposal.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProposalMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case proposal.FieldName:
		return m.Name()
	case proposal.FieldAllocatedDuration:
		return m.AllocatedDuration()
	case proposal.FieldAchievedDuration:
		return m.AchievedDuration()
	case proposal.FieldStatus:
		return m.Status()
	case proposal.FieldScheduledFor:
		return m.ScheduledFor()
	case proposal.FieldCreatedAt:
		return m.CreatedAt()
	case proposal.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProposalMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case proposal.FieldName:
		return m.OldName(ctx)
	case proposal.FieldAllocatedDuration:
		return m.OldAllocatedDuration(ctx)
	case proposal.FieldAchievedDuration:
		return m.OldAchievedDuration(ctx)
	case proposal.FieldStatus:
		return m.OldStatus(ctx)
	case proposal.FieldScheduledFor:
		return m.OldScheduledFor(ctx)
	case proposal.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case proposal.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Proposal field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProposalMutation) SetField(name string, value ent.Value) error {
	switch name {
	case proposal.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case proposal.FieldAllocatedDuration:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAllocatedDuration(v)
		return nil
	case proposal.FieldAchievedDuration:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAchievedDuration(v)
		return nil
	case proposal.FieldStatus:
		v, ok := value.(proposal.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case proposal.FieldScheduledFor:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetScheduledFor(v)
		return nil
	case proposal.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case proposal.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Proposal field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProposalMutation) AddedFields() []string {
	var fields []string
	if m.addallocated_duration != nil {
		fields = append(fields, proposal.FieldAllocatedDuration)
	}
	if m.addachieved_duration != nil {
		fields = append(fields, proposal.FieldAchievedDuration)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProposalMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case proposal.FieldAllocatedDuration:
		return m.AddedAllocatedDuration()
	case proposal.FieldAchievedDuration:
		return m.AddedAchievedDuration()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProposalMutation) AddField(name string, value ent.Value) error {
	switch name {
	case proposal.FieldAllocatedDuration:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAllocatedDuration(v)
		return nil
	case proposal.FieldAchievedDuration:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAchievedDuration(v)
		return nil
	}
	return fmt.Errorf("unknown Proposal numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProposalMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(proposal.FieldAchievedDuration) {
		fields = append(fields, proposal.FieldAchievedDuration)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProposalMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProposalMutation) ClearField(name string) error {
	switch name {
	case proposal.FieldAchievedDuration:
		m.ClearAchievedDuration()
		return nil
	}
	return fmt.Errorf("unknown Proposal nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProposalMutation) ResetField(name string) error {
	switch name {
	case proposal.FieldName:
		m.ResetName()
		return nil
	case proposal.FieldAllocatedDuration:
		m.ResetAllocatedDuration()
		return nil
	case proposal.FieldAchievedDuration:
		m.ResetAchievedDuration()
		return nil
	case proposal.FieldStatus:
		m.ResetStatus()
		return nil
	case proposal.FieldScheduledFor:
		m.ResetScheduledFor()
		return nil
	case proposal.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case proposal.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Proposal field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProposalMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.task != nil {
		edges = append(edges, proposal.EdgeTask)
	}
	if m.skill != nil {
		edges = append(edges, proposal.EdgeSkill)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProposalMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case proposal.EdgeTask:
		if id := m.task; id != nil {
			return []ent.Value{*id}
		}
	case proposal.EdgeSkill:
		if id := m.skill; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProposalMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProposalMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProposalMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedtask {
		edges = append(edges, proposal.EdgeTask)
	}
	if m.clearedskill {
		edges = append(edges, proposal.EdgeSkill)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProposalMutation) EdgeCleared(name string) bool {
	switch name {
	case proposal.EdgeTask:
		return m.clearedtask
	case proposal.EdgeSkill:
		return m.clearedskill
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProposalMutation) ClearEdge(name string) error {
	switch name {
	case proposal.EdgeTask:
		m.ClearTask()
		return nil
	case proposal.EdgeSkill:
		m.ClearSkill()
		return nil
	}
	return fmt.Errorf("unknown Proposal unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProposalMutation) ResetEdge(name string) error {
	switch name {
	case proposal.EdgeTask:
		m.ResetTask()
		return nil
	case proposal.EdgeSkill:
		m.ResetSkill()
		return nil
	}
	return fmt.Errorf("unknown Proposal edge %s", name)
}

// SkillMutation represents an operation that mutates the Skill nodes in the graph.
type SkillMutation struct {
	config
	op                      Op
	typ                     string
	id                      *int
	name                    *string
	level                   *string
	progress                *int
	addprogress             *int
	duration                *int
	addduration             *int
	duration_achieved       *int
	addduration_achieved    *int
	created_at              *time.Time
	clearedFields           map[string]struct{}
	categories              map[int]struct{}
	removedcategories       map[int]struct{}
	clearedcategories       bool
	user                    *int
	cleareduser             bool
	time_preferences        map[int]struct{}
	removedtime_preferences map[int]struct{}
	clearedtime_preferences bool
	proposals               map[int]struct{}
	removedproposals        map[int]struct{}
	clearedproposals        bool
	done                    bool
	oldValue                func(context.Context) (*Skill, error)
	predicates              []predicate.Skill
}

var _ ent.Mutation = (*SkillMutation)(nil)

// skillOption allows management of the mutation configuration using functional options.
type skillOption func(*SkillMutation)

// newSkillMutation creates new mutation for the Skill entity.
func newSkillMutation(c config, op Op, opts ...skillOption) *SkillMutation {
	m := &SkillMutation{
		config:        c,
		op:            op,
		typ:           TypeSkill,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSkillID sets the ID field of the mutation.
func withSkillID(id int) skillOption {
	return func(m *SkillMutation) {
		var (
			err   error
			once  sync.Once
			value *Skill
		)
		m.oldValue = func(ctx context.Context) (*Skill, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Skill.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSkill sets the old Skill of the mutation.
func withSkill(node *Skill) skillOption {
	return func(m *SkillMutation) {
		m.oldValue = func(context.Context) (*Skill, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SkillMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SkillMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SkillMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SkillMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Skill.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *SkillMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *SkillMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Skill entity.
// If the Skill object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SkillMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *SkillMutation) ResetName() {
	m.name = nil
}

// SetLevel sets the "level" field.
func (m *SkillMutation) SetLevel(s string) {
	m.level = &s
}

// Level returns the value of the "level" field in the mutation.
func (m *SkillMutation) Level() (r string, exists bool) {
	v := m.level
	if v == nil {
		return
	}
	return *v, true
}

// OldLevel returns the old "level" field's value of the Skill entity.
// If the Skill object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SkillMutation) OldLevel(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLevel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLevel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLevel: %w", err)
	}
	return oldValue.Level, nil
}

// ResetLevel resets all changes to the "level" field.
func (m *SkillMutation) ResetLevel() {
	m.level = nil
}

// SetProgress sets the "progress" field.
func (m *SkillMutation) SetProgress(i int) {
	m.progress = &i
	m.addprogress = nil
}

// Progress returns the value of the "progress" field in the mutation.
func (m *SkillMutation) Progress() (r int, exists bool) {
	v := m.progress
	if v == nil {
		return
	}
	return *v, true
}

// OldProgress returns the old "progress" field's value of the Skill entity.
// If the Skill object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SkillMutation) OldProgress(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProgress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProgress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProgress: %w", err)
	}
	return oldValue.Progress, nil
}

// AddProgress adds i to the "progress" field.
func (m *SkillMutation) AddProgress(i int) {
	if m.addprogress != nil {
		*m.addprogress += i
	} else {
		m.addprogress = &i
	}
}

// AddedProgress returns the value that was added to the "progress" field in this mutation.
func (m *SkillMutation) AddedProgress() (r int, exists bool) {
	v := m.addprogress
	if v == nil {
		return
	}
	return *v, true
}

// ResetProgress resets all changes to the "progress" field.
func (m *SkillMutation) ResetProgress() {
	m.progress = nil
	m.addprogress = nil
}

// SetDuration sets the "duration" field.
func (m *SkillMutation) SetDuration(i int) {
	m.duration = &i
	m.addduration = nil
}

// Duration returns the value of the "duration" field in the mutation.
func (m *SkillMutation) Duration() (r int, exists bool) {
	v := m.duration
	if v == nil {
		return
	}
	return *v, true
}

// OldDuration returns the old "duration" field's value of the Skill entity.
// If the Skill object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SkillMutation) OldDuration(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDuration is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDuration requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDuration: %w", err)
	}
	return oldValue.Duration, nil
}

// AddDuration adds i to the "duration" field.
func (m *SkillMutation) AddDuration(i int) {
	if m.addduration != nil {
		*m.addduration += i
	} else {
		m.addduration = &i
	}
}

// AddedDuration returns the value that was added to the "duration" field in this mutation.
func (m *SkillMutation) AddedDuration() (r int, exists bool) {
	v := m.addduration
	if v == nil {
		return
	}
	return *v, true
}

// ResetDuration resets all changes to the "duration" field.
func (m *SkillMutation) ResetDuration() {
	m.duration = nil
	m.addduration = nil
}

// SetDurationAchieved sets the "duration_achieved" field.
func (m *SkillMutation) SetDurationAchieved(i int) {
	m.duration_achieved = &i
	m.addduration_achieved = nil
}

// DurationAchieved returns the value of the "duration_achieved" field in the mutation.
func (m *SkillMutation) DurationAchieved() (r int, exists bool) {
	v := m.duration_achieved
	if v == nil {
		return
	}
	return *v, true
}

// OldDurationAchieved returns the old "duration_achieved" field's value of the Skill entity.
// If the Skill object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SkillMutation) OldDurationAchieved(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDurationAchieved is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDurationAchieved requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDurationAchieved: %w", err)
	}
	return oldValue.DurationAchieved, nil
}

// AddDurationAchieved adds i to the "duration_achieved" field.
func (m *SkillMutation) AddDurationAchieved(i int) {
	if m.addduration_achieved != nil {
		*m.addduration_achieved += i
	} else {
		m.addduration_achieved = &i
	}
}

// AddedDurationAchieved returns the value that was added to the "duration_achieved" field in this mutation.
func (m *SkillMutation) AddedDurationAchieved() (r int, exists bool) {
	v := m.addduration_achieved
	if v == nil {
		return
	}
	return *v, true
}

// ResetDurationAchieved resets all changes to the "duration_achieved" field.
func (m *SkillMutation) ResetDurationAchieved() {
	m.duration_achieved = nil
	m.addduration_achieved = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *SkillMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SkillMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Skill entity.
// If the Skill object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SkillMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SkillMutation) ResetCreatedAt() {
	m.created_at = nil
}

// AddCategoryIDs adds the "categories" edge to the Category entity by ids.
func (m *SkillMutation) AddCategoryIDs(ids ...int) {
	if m.categories == nil {
		m.categories = make(map[int]struct{})
	}
	for i := range ids {
		m.categories[ids[i]] = struct{}{}
	}
}

// ClearCategories clears the "categories" edge to the Category entity.
func (m *SkillMutation) ClearCategories() {
	m.clearedcategories = true
}

// CategoriesCleared reports if the "categories" edge to the Category entity was cleared.
func (m *SkillMutation) CategoriesCleared() bool {
	return m.clearedcategories
}

// RemoveCategoryIDs removes the "categories" edge to the Category entity by IDs.
func (m *SkillMutation) RemoveCategoryIDs(ids ...int) {
	if m.removedcategories == nil {
		m.removedcategories = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.categories, ids[i])
		m.removedcategories[ids[i]] = struct{}{}
	}
}

// RemovedCategories returns the removed IDs of the "categories" edge to the Category entity.
func (m *SkillMutation) RemovedCategoriesIDs() (ids []int) {
	for id := range m.removedcategories {
		ids = append(ids, id)
	}
	return
}

// CategoriesIDs returns the "categories" edge IDs in the mutation.
func (m *SkillMutation) CategoriesIDs() (ids []int) {
	for id := range m.categories {
		ids = append(ids, id)
	}
	return
}

// ResetCategories resets all changes to the "categories" edge.
func (m *SkillMutation) ResetCategories() {
	m.categories = nil
	m.clearedcategories = false
	m.removedcategories = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *SkillMutation) SetUserID(id int) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *SkillMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *SkillMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *SkillMutation) UserID() (id int, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *SkillMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *SkillMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// AddTimePreferenceIDs adds the "time_preferences" edge to the TimePreference entity by ids.
func (m *SkillMutation) AddTimePreferenceIDs(ids ...int) {
	if m.time_preferences == nil {
		m.time_preferences = make(map[int]struct{})
	}
	for i := range ids {
		m.time_preferences[ids[i]] = struct{}{}
	}
}

// ClearTimePreferences clears the "time_preferences" edge to the TimePreference entity.
func (m *SkillMutation) ClearTimePreferences() {
	m.clearedtime_preferences = true
}

// TimePreferencesCleared reports if the "time_preferences" edge to the TimePreference entity was cleared.
func (m *SkillMutation) TimePreferencesCleared() bool {
	return m.clearedtime_preferences
}

// RemoveTimePreferenceIDs removes the "time_preferences" edge to the TimePreference entity by IDs.
func (m *SkillMutation) RemoveTimePreferenceIDs(ids ...int) {
	if m.removedtime_preferences == nil {
		m.removedtime_preferences = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.time_preferences, ids[i])
		m.removedtime_preferences[ids[i]] = struct{}{}
	}
}

// RemovedTimePreferences returns the removed IDs of the "time_preferences" edge to the TimePreference entity.
func (m *SkillMutation) RemovedTimePreferencesIDs() (ids []int) {
	for id := range m.removedtime_preferences {
		ids = append(ids, id)
	}
	return
}

// TimePreferencesIDs returns the "time_preferences" edge IDs in the mutation.
func (m *SkillMutation) TimePreferencesIDs() (ids []int) {
	for id := range m.time_preferences {
		ids = append(ids, id)
	}
	return
}

// ResetTimePreferences resets all changes to the "time_preferences" edge.
func (m *SkillMutation) ResetTimePreferences() {
	m.time_preferences = nil
	m.clearedtime_preferences = false
	m.removedtime_preferences = nil
}

// AddProposalIDs adds the "proposals" edge to the Proposal entity by ids.
func (m *SkillMutation) AddProposalIDs(ids ...int) {
	if m.proposals == nil {
		m.proposals = make(map[int]struct{})
	}
	for i := range ids {
		m.proposals[ids[i]] = struct{}{}
	}
}

// ClearProposals clears the "proposals" edge to the Proposal entity.
func (m *SkillMutation) ClearProposals() {
	m.clearedproposals = true
}

// ProposalsCleared reports if the "proposals" edge to the Proposal entity was cleared.
func (m *SkillMutation) ProposalsCleared() bool {
	return m.clearedproposals
}

// RemoveProposalIDs removes the "proposals" edge to the Proposal entity by IDs.
func (m *SkillMutation) RemoveProposalIDs(ids ...int) {
	if m.removedproposals == nil {
		m.removedproposals = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.proposals, ids[i])
		m.removedproposals[ids[i]] = struct{}{}
	}
}

// RemovedProposals returns the removed IDs of the "proposals" edge to the Proposal entity.
func (m *SkillMutation) RemovedProposalsIDs() (ids []int) {
	for id := range m.removedproposals {
		ids = append(ids, id)
	}
	return
}

// ProposalsIDs returns the "proposals" edge IDs in the mutation.
func (m *SkillMutation) ProposalsIDs() (ids []int) {
	for id := range m.proposals {
		ids = append(ids, id)
	}
	return
}

// ResetProposals resets all changes to the "proposals" edge.
func (m *SkillMutation) ResetProposals() {
	m.proposals = nil
	m.clearedproposals = false
	m.removedproposals = nil
}

// Where appends a list predicates to the SkillMutation builder.
func (m *SkillMutation) Where(ps ...predicate.Skill) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SkillMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SkillMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Skill, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SkillMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SkillMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Skill).
func (m *SkillMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SkillMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.name != nil {
		fields = append(fields, skill.FieldName)
	}
	if m.level != nil {
		fields = append(fields, skill.FieldLevel)
	}
	if m.progress != nil {
		fields = append(fields, skill.FieldProgress)
	}
	if m.duration != nil {
		fields = append(fields, skill.FieldDuration)
	}
	if m.duration_achieved != nil {
		fields = append(fields, skill.FieldDurationAchieved)
	}
	if m.created_at != nil {
		fields = append(fields, skill.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SkillMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case skill.FieldName:
		return m.Name()
	case skill.FieldLevel:
		return m.Level()
	case skill.FieldProgress:
		return m.Progress()
	case skill.FieldDuration:
		return m.Duration()
	case skill.FieldDurationAchieved:
		return m.DurationAchieved()
	case skill.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SkillMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case skill.FieldName:
		return m.OldName(ctx)
	case skill.FieldLevel:
		return m.OldLevel(ctx)
	case skill.FieldProgress:
		return m.OldProgress(ctx)
	case skill.FieldDuration:
		return m.OldDuration(ctx)
	case skill.FieldDurationAchieved:
		return m.OldDurationAchieved(ctx)
	case skill.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Skill field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SkillMutation) SetField(name string, value ent.Value) error {
	switch name {
	case skill.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case skill.FieldLevel:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLevel(v)
		return nil
	case skill.FieldProgress:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProgress(v)
		return nil
	case skill.FieldDuration:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDuration(v)
		return nil
	case skill.FieldDurationAchieved:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDurationAchieved(v)
		return nil
	case skill.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Skill field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SkillMutation) AddedFields() []string {
	var fields []string
	if m.addprogress != nil {
		fields = append(fields, skill.FieldProgress)
	}
	if m.addduration != nil {
		fields = append(fields, skill.FieldDuration)
	}
	if m.addduration_achieved != nil {
		fields = append(fields, skill.FieldDurationAchieved)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SkillMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case skill.FieldProgress:
		return m.AddedProgress()
	case skill.FieldDuration:
		return m.AddedDuration()
	case skill.FieldDurationAchieved:
		return m.AddedDurationAchieved()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SkillMutation) AddField(name string, value ent.Value) error {
	switch name {
	case skill.FieldProgress:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddProgress(v)
		return nil
	case skill.FieldDuration:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDuration(v)
		return nil
	case skill.FieldDurationAchieved:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDurationAchieved(v)
		return nil
	}
	return fmt.Errorf("unknown Skill numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SkillMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SkillMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SkillMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Skill nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SkillMutation) ResetField(name string) error {
	switch name {
	case skill.FieldName:
		m.ResetName()
		return nil
	case skill.FieldLevel:
		m.ResetLevel()
		return nil
	case skill.FieldProgress:
		m.ResetProgress()
		return nil
	case skill.FieldDuration:
		m.ResetDuration()
		return nil
	case skill.FieldDurationAchieved:
		m.ResetDurationAchieved()
		return nil
	case skill.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Skill field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SkillMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.categories != nil {
		edges = append(edges, skill.EdgeCategories)
	}
	if m.user != nil {
		edges = append(edges, skill.EdgeUser)
	}
	if m.time_preferences != nil {
		edges = append(edges, skill.EdgeTimePreferences)
	}
	if m.proposals != nil {
		edges = append(edges, skill.EdgeProposals)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SkillMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case skill.EdgeCategories:
		ids := make([]ent.Value, 0, len(m.categories))
		for id := range m.categories {
			ids = append(ids, id)
		}
		return ids
	case skill.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case skill.EdgeTimePreferences:
		ids := make([]ent.Value, 0, len(m.time_preferences))
		for id := range m.time_preferences {
			ids = append(ids, id)
		}
		return ids
	case skill.EdgeProposals:
		ids := make([]ent.Value, 0, len(m.proposals))
		for id := range m.proposals {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SkillMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedcategories != nil {
		edges = append(edges, skill.EdgeCategories)
	}
	if m.removedtime_preferences != nil {
		edges = append(edges, skill.EdgeTimePreferences)
	}
	if m.removedproposals != nil {
		edges = append(edges, skill.EdgeProposals)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SkillMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case skill.EdgeCategories:
		ids := make([]ent.Value, 0, len(m.removedcategories))
		for id := range m.removedcategories {
			ids = append(ids, id)
		}
		return ids
	case skill.EdgeTimePreferences:
		ids := make([]ent.Value, 0, len(m.removedtime_preferences))
		for id := range m.removedtime_preferences {
			ids = append(ids, id)
		}
		return ids
	case skill.EdgeProposals:
		ids := make([]ent.Value, 0, len(m.removedproposals))
		for id := range m.removedproposals {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SkillMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedcategories {
		edges = append(edges, skill.EdgeCategories)
	}
	if m.cleareduser {
		edges = append(edges, skill.EdgeUser)
	}
	if m.clearedtime_preferences {
		edges = append(edges, skill.EdgeTimePreferences)
	}
	if m.clearedproposals {
		edges = append(edges, skill.EdgeProposals)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SkillMutation) EdgeCleared(name string) bool {
	switch name {
	case skill.EdgeCategories:
		return m.clearedcategories
	case skill.EdgeUser:
		return m.cleareduser
	case skill.EdgeTimePreferences:
		return m.clearedtime_preferences
	case skill.EdgeProposals:
		return m.clearedproposals
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SkillMutation) ClearEdge(name string) error {
	switch name {
	case skill.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Skill unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SkillMutation) ResetEdge(name string) error {
	switch name {
	case skill.EdgeCategories:
		m.ResetCategories()
		return nil
	case skill.EdgeUser:
		m.ResetUser()
		return nil
	case skill.EdgeTimePreferences:
		m.ResetTimePreferences()
		return nil
	case skill.EdgeProposals:
		m.ResetProposals()
		return nil
	}
	return fmt.Errorf("unknown Skill edge %s", name)
}

// TaskMutation represents an operation that mutates the Task nodes in the graph.
type TaskMutation struct {
	config
	op                      Op
	typ                     string
	id                      *int
	name                    *string
	description             *string
	duration                *int
	addduration             *int
	duration_achieved       *int
	addduration_achieved    *int
	created_at              *time.Time
	deadline                *time.Time
	clearedFields           map[string]struct{}
	categories              map[int]struct{}
	removedcategories       map[int]struct{}
	clearedcategories       bool
	user                    *int
	cleareduser             bool
	time_preferences        map[int]struct{}
	removedtime_preferences map[int]struct{}
	clearedtime_preferences bool
	proposals               map[int]struct{}
	removedproposals        map[int]struct{}
	clearedproposals        bool
	done                    bool
	oldValue                func(context.Context) (*Task, error)
	predicates              []predicate.Task
}

var _ ent.Mutation = (*TaskMutation)(nil)

// taskOption allows management of the mutation configuration using functional options.
type taskOption func(*TaskMutation)

// newTaskMutation creates new mutation for the Task entity.
func newTaskMutation(c config, op Op, opts ...taskOption) *TaskMutation {
	m := &TaskMutation{
		config:        c,
		op:            op,
		typ:           TypeTask,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTaskID sets the ID field of the mutation.
func withTaskID(id int) taskOption {
	return func(m *TaskMutation) {
		var (
			err   error
			once  sync.Once
			value *Task
		)
		m.oldValue = func(ctx context.Context) (*Task, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Task.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTask sets the old Task of the mutation.
func withTask(node *Task) taskOption {
	return func(m *TaskMutation) {
		m.oldValue = func(context.Context) (*Task, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TaskMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TaskMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TaskMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TaskMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Task.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *TaskMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *TaskMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *TaskMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *TaskMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *TaskMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *TaskMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[task.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *TaskMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[task.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *TaskMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, task.FieldDescription)
}

// SetDuration sets the "duration" field.
func (m *TaskMutation) SetDuration(i int) {
	m.duration = &i
	m.addduration = nil
}

// Duration returns the value of the "duration" field in the mutation.
func (m *TaskMutation) Duration() (r int, exists bool) {
	v := m.duration
	if v == nil {
		return
	}
	return *v, true
}

// OldDuration returns the old "duration" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldDuration(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDuration is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDuration requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDuration: %w", err)
	}
	return oldValue.Duration, nil
}

// AddDuration adds i to the "duration" field.
func (m *TaskMutation) AddDuration(i int) {
	if m.addduration != nil {
		*m.addduration += i
	} else {
		m.addduration = &i
	}
}

// AddedDuration returns the value that was added to the "duration" field in this mutation.
func (m *TaskMutation) AddedDuration() (r int, exists bool) {
	v := m.addduration
	if v == nil {
		return
	}
	return *v, true
}

// ResetDuration resets all changes to the "duration" field.
func (m *TaskMutation) ResetDuration() {
	m.duration = nil
	m.addduration = nil
}

// SetDurationAchieved sets the "duration_achieved" field.
func (m *TaskMutation) SetDurationAchieved(i int) {
	m.duration_achieved = &i
	m.addduration_achieved = nil
}

// DurationAchieved returns the value of the "duration_achieved" field in the mutation.
func (m *TaskMutation) DurationAchieved() (r int, exists bool) {
	v := m.duration_achieved
	if v == nil {
		return
	}
	return *v, true
}

// OldDurationAchieved returns the old "duration_achieved" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldDurationAchieved(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDurationAchieved is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDurationAchieved requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDurationAchieved: %w", err)
	}
	return oldValue.DurationAchieved, nil
}

// AddDurationAchieved adds i to the "duration_achieved" field.
func (m *TaskMutation) AddDurationAchieved(i int) {
	if m.addduration_achieved != nil {
		*m.addduration_achieved += i
	} else {
		m.addduration_achieved = &i
	}
}

// AddedDurationAchieved returns the value that was added to the "duration_achieved" field in this mutation.
func (m *TaskMutation) AddedDurationAchieved() (r int, exists bool) {
	v := m.addduration_achieved
	if v == nil {
		return
	}
	return *v, true
}

// ResetDurationAchieved resets all changes to the "duration_achieved" field.
func (m *TaskMutation) ResetDurationAchieved() {
	m.duration_achieved = nil
	m.addduration_achieved = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *TaskMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TaskMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TaskMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetDeadline sets the "deadline" field.
func (m *TaskMutation) SetDeadline(t time.Time) {
	m.deadline = &t
}

// Deadline returns the value of the "deadline" field in the mutation.
func (m *TaskMutation) Deadline() (r time.Time, exists bool) {
	v := m.deadline
	if v == nil {
		return
	}
	return *v, true
}

// OldDeadline returns the old "deadline" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldDeadline(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeadline is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeadline requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeadline: %w", err)
	}
	return oldValue.Deadline, nil
}

// ClearDeadline clears the value of the "deadline" field.
func (m *TaskMutation) ClearDeadline() {
	m.deadline = nil
	m.clearedFields[task.FieldDeadline] = struct{}{}
}

// DeadlineCleared returns if the "deadline" field was cleared in this mutation.
func (m *TaskMutation) DeadlineCleared() bool {
	_, ok := m.clearedFields[task.FieldDeadline]
	return ok
}

// ResetDeadline resets all changes to the "deadline" field.
func (m *TaskMutation) ResetDeadline() {
	m.deadline = nil
	delete(m.clearedFields, task.FieldDeadline)
}

// AddCategoryIDs adds the "categories" edge to the Category entity by ids.
func (m *TaskMutation) AddCategoryIDs(ids ...int) {
	if m.categories == nil {
		m.categories = make(map[int]struct{})
	}
	for i := range ids {
		m.categories[ids[i]] = struct{}{}
	}
}

// ClearCategories clears the "categories" edge to the Category entity.
func (m *TaskMutation) ClearCategories() {
	m.clearedcategories = true
}

// CategoriesCleared reports if the "categories" edge to the Category entity was cleared.
func (m *TaskMutation) CategoriesCleared() bool {
	return m.clearedcategories
}

// RemoveCategoryIDs removes the "categories" edge to the Category entity by IDs.
func (m *TaskMutation) RemoveCategoryIDs(ids ...int) {
	if m.removedcategories == nil {
		m.removedcategories = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.categories, ids[i])
		m.removedcategories[ids[i]] = struct{}{}
	}
}

// RemovedCategories returns the removed IDs of the "categories" edge to the Category entity.
func (m *TaskMutation) RemovedCategoriesIDs() (ids []int) {
	for id := range m.removedcategories {
		ids = append(ids, id)
	}
	return
}

// CategoriesIDs returns the "categories" edge IDs in the mutation.
func (m *TaskMutation) CategoriesIDs() (ids []int) {
	for id := range m.categories {
		ids = append(ids, id)
	}
	return
}

// ResetCategories resets all changes to the "categories" edge.
func (m *TaskMutation) ResetCategories() {
	m.categories = nil
	m.clearedcategories = false
	m.removedcategories = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *TaskMutation) SetUserID(id int) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *TaskMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *TaskMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *TaskMutation) UserID() (id int, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *TaskMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *TaskMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// AddTimePreferenceIDs adds the "time_preferences" edge to the TimePreference entity by ids.
func (m *TaskMutation) AddTimePreferenceIDs(ids ...int) {
	if m.time_preferences == nil {
		m.time_preferences = make(map[int]struct{})
	}
	for i := range ids {
		m.time_preferences[ids[i]] = struct{}{}
	}
}

// ClearTimePreferences clears the "time_preferences" edge to the TimePreference entity.
func (m *TaskMutation) ClearTimePreferences() {
	m.clearedtime_preferences = true
}

// TimePreferencesCleared reports if the "time_preferences" edge to the TimePreference entity was cleared.
func (m *TaskMutation) TimePreferencesCleared() bool {
	return m.clearedtime_preferences
}

// RemoveTimePreferenceIDs removes the "time_preferences" edge to the TimePreference entity by IDs.
func (m *TaskMutation) RemoveTimePreferenceIDs(ids ...int) {
	if m.removedtime_preferences == nil {
		m.removedtime_preferences = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.time_preferences, ids[i])
		m.removedtime_preferences[ids[i]] = struct{}{}
	}
}

// RemovedTimePreferences returns the removed IDs of the "time_preferences" edge to the TimePreference entity.
func (m *TaskMutation) RemovedTimePreferencesIDs() (ids []int) {
	for id := range m.removedtime_preferences {
		ids = append(ids, id)
	}
	return
}

// TimePreferencesIDs returns the "time_preferences" edge IDs in the mutation.
func (m *TaskMutation) TimePreferencesIDs() (ids []int) {
	for id := range m.time_preferences {
		ids = append(ids, id)
	}
	return
}

// ResetTimePreferences resets all changes to the "time_preferences" edge.
func (m *TaskMutation) ResetTimePreferences() {
	m.time_preferences = nil
	m.clearedtime_preferences = false
	m.removedtime_preferences = nil
}

// AddProposalIDs adds the "proposals" edge to the Proposal entity by ids.
func (m *TaskMutation) AddProposalIDs(ids ...int) {
	if m.proposals == nil {
		m.proposals = make(map[int]struct{})
	}
	for i := range ids {
		m.proposals[ids[i]] = struct{}{}
	}
}

// ClearProposals clears the "proposals" edge to the Proposal entity.
func (m *TaskMutation) ClearProposals() {
	m.clearedproposals = true
}

// ProposalsCleared reports if the "proposals" edge to the Proposal entity was cleared.
func (m *TaskMutation) ProposalsCleared() bool {
	return m.clearedproposals
}

// RemoveProposalIDs removes the "proposals" edge to the Proposal entity by IDs.
func (m *TaskMutation) RemoveProposalIDs(ids ...int) {
	if m.removedproposals == nil {
		m.removedproposals = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.proposals, ids[i])
		m.removedproposals[ids[i]] = struct{}{}
	}
}

// RemovedProposals returns the removed IDs of the "proposals" edge to the Proposal entity.
func (m *TaskMutation) RemovedProposalsIDs() (ids []int) {
	for id := range m.removedproposals {
		ids = append(ids, id)
	}
	return
}

// ProposalsIDs returns the "proposals" edge IDs in the mutation.
func (m *TaskMutation) ProposalsIDs() (ids []int) {
	for id := range m.proposals {
		ids = append(ids, id)
	}
	return
}

// ResetProposals resets all changes to the "proposals" edge.
func (m *TaskMutation) ResetProposals() {
	m.proposals = nil
	m.clearedproposals = false
	m.removedproposals = nil
}

// Where appends a list predicates to the TaskMutation builder.
func (m *TaskMutation) Where(ps ...predicate.Task) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TaskMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TaskMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Task, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TaskMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TaskMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Task).
func (m *TaskMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TaskMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.name != nil {
		fields = append(fields, task.FieldName)
	}
	if m.description != nil {
		fields = append(fields, task.FieldDescription)
	}
	if m.duration != nil {
		fields = append(fields, task.FieldDuration)
	}
	if m.duration_achieved != nil {
		fields = append(fields, task.FieldDurationAchieved)
	}
	if m.created_at != nil {
		fields = append(fields, task.FieldCreatedAt)
	}
	if m.deadline != nil {
		fields = append(fields, task.FieldDeadline)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TaskMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case task.FieldName:
		return m.Name()
	case task.FieldDescription:
		return m.Description()
	case task.FieldDuration:
		return m.Duration()
	case task.FieldDurationAchieved:
		return m.DurationAchieved()
	case task.FieldCreatedAt:
		return m.CreatedAt()
	case task.FieldDeadline:
		return m.Deadline()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TaskMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case task.FieldName:
		return m.OldName(ctx)
	case task.FieldDescription:
		return m.OldDescription(ctx)
	case task.FieldDuration:
		return m.OldDuration(ctx)
	case task.FieldDurationAchieved:
		return m.OldDurationAchieved(ctx)
	case task.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case task.FieldDeadline:
		return m.OldDeadline(ctx)
	}
	return nil, fmt.Errorf("unknown Task field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TaskMutation) SetField(name string, value ent.Value) error {
	switch name {
	case task.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case task.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case task.FieldDuration:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDuration(v)
		return nil
	case task.FieldDurationAchieved:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDurationAchieved(v)
		return nil
	case task.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case task.FieldDeadline:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeadline(v)
		return nil
	}
	return fmt.Errorf("unknown Task field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TaskMutation) AddedFields() []string {
	var fields []string
	if m.addduration != nil {
		fields = append(fields, task.FieldDuration)
	}
	if m.addduration_achieved != nil {
		fields = append(fields, task.FieldDurationAchieved)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TaskMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case task.FieldDuration:
		return m.AddedDuration()
	case task.FieldDurationAchieved:
		return m.AddedDurationAchieved()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TaskMutation) AddField(name string, value ent.Value) error {
	switch name {
	case task.FieldDuration:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDuration(v)
		return nil
	case task.FieldDurationAchieved:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDurationAchieved(v)
		return nil
	}
	return fmt.Errorf("unknown Task numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TaskMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(task.FieldDescription) {
		fields = append(fields, task.FieldDescription)
	}
	if m.FieldCleared(task.FieldDeadline) {
		fields = append(fields, task.FieldDeadline)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TaskMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TaskMutation) ClearField(name string) error {
	switch name {
	case task.FieldDescription:
		m.ClearDescription()
		return nil
	case task.FieldDeadline:
		m.ClearDeadline()
		return nil
	}
	return fmt.Errorf("unknown Task nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TaskMutation) ResetField(name string) error {
	switch name {
	case task.FieldName:
		m.ResetName()
		return nil
	case task.FieldDescription:
		m.ResetDescription()
		return nil
	case task.FieldDuration:
		m.ResetDuration()
		return nil
	case task.FieldDurationAchieved:
		m.ResetDurationAchieved()
		return nil
	case task.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case task.FieldDeadline:
		m.ResetDeadline()
		return nil
	}
	return fmt.Errorf("unknown Task field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TaskMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.categories != nil {
		edges = append(edges, task.EdgeCategories)
	}
	if m.user != nil {
		edges = append(edges, task.EdgeUser)
	}
	if m.time_preferences != nil {
		edges = append(edges, task.EdgeTimePreferences)
	}
	if m.proposals != nil {
		edges = append(edges, task.EdgeProposals)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TaskMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case task.EdgeCategories:
		ids := make([]ent.Value, 0, len(m.categories))
		for id := range m.categories {
			ids = append(ids, id)
		}
		return ids
	case task.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case task.EdgeTimePreferences:
		ids := make([]ent.Value, 0, len(m.time_preferences))
		for id := range m.time_preferences {
			ids = append(ids, id)
		}
		return ids
	case task.EdgeProposals:
		ids := make([]ent.Value, 0, len(m.proposals))
		for id := range m.proposals {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TaskMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedcategories != nil {
		edges = append(edges, task.EdgeCategories)
	}
	if m.removedtime_preferences != nil {
		edges = append(edges, task.EdgeTimePreferences)
	}
	if m.removedproposals != nil {
		edges = append(edges, task.EdgeProposals)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TaskMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case task.EdgeCategories:
		ids := make([]ent.Value, 0, len(m.removedcategories))
		for id := range m.removedcategories {
			ids = append(ids, id)
		}
		return ids
	case task.EdgeTimePreferences:
		ids := make([]ent.Value, 0, len(m.removedtime_preferences))
		for id := range m.removedtime_preferences {
			ids = append(ids, id)
		}
		return ids
	case task.EdgeProposals:
		ids := make([]ent.Value, 0, len(m.removedproposals))
		for id := range m.removedproposals {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TaskMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedcategories {
		edges = append(edges, task.EdgeCategories)
	}
	if m.cleareduser {
		edges = append(edges, task.EdgeUser)
	}
	if m.clearedtime_preferences {
		edges = append(edges, task.EdgeTimePreferences)
	}
	if m.clearedproposals {
		edges = append(edges, task.EdgeProposals)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TaskMutation) EdgeCleared(name string) bool {
	switch name {
	case task.EdgeCategories:
		return m.clearedcategories
	case task.EdgeUser:
		return m.cleareduser
	case task.EdgeTimePreferences:
		return m.clearedtime_preferences
	case task.EdgeProposals:
		return m.clearedproposals
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TaskMutation) ClearEdge(name string) error {
	switch name {
	case task.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Task unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TaskMutation) ResetEdge(name string) error {
	switch name {
	case task.EdgeCategories:
		m.ResetCategories()
		return nil
	case task.EdgeUser:
		m.ResetUser()
		return nil
	case task.EdgeTimePreferences:
		m.ResetTimePreferences()
		return nil
	case task.EdgeProposals:
		m.ResetProposals()
		return nil
	}
	return fmt.Errorf("unknown Task edge %s", name)
}

// TimePreferenceMutation represents an operation that mutates the TimePreference nodes in the graph.
type TimePreferenceMutation struct {
	config
	op            Op
	typ           string
	id            *int
	day           *string
	clearedFields map[string]struct{}
	skills        map[int]struct{}
	removedskills map[int]struct{}
	clearedskills bool
	tasks         map[int]struct{}
	removedtasks  map[int]struct{}
	clearedtasks  bool
	done          bool
	oldValue      func(context.Context) (*TimePreference, error)
	predicates    []predicate.TimePreference
}

var _ ent.Mutation = (*TimePreferenceMutation)(nil)

// timepreferenceOption allows management of the mutation configuration using functional options.
type timepreferenceOption func(*TimePreferenceMutation)

// newTimePreferenceMutation creates new mutation for the TimePreference entity.
func newTimePreferenceMutation(c config, op Op, opts ...timepreferenceOption) *TimePreferenceMutation {
	m := &TimePreferenceMutation{
		config:        c,
		op:            op,
		typ:           TypeTimePreference,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTimePreferenceID sets the ID field of the mutation.
func withTimePreferenceID(id int) timepreferenceOption {
	return func(m *TimePreferenceMutation) {
		var (
			err   error
			once  sync.Once
			value *TimePreference
		)
		m.oldValue = func(ctx context.Context) (*TimePreference, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TimePreference.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTimePreference sets the old TimePreference of the mutation.
func withTimePreference(node *TimePreference) timepreferenceOption {
	return func(m *TimePreferenceMutation) {
		m.oldValue = func(context.Context) (*TimePreference, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TimePreferenceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TimePreferenceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TimePreferenceMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TimePreferenceMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TimePreference.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDay sets the "day" field.
func (m *TimePreferenceMutation) SetDay(s string) {
	m.day = &s
}

// Day returns the value of the "day" field in the mutation.
func (m *TimePreferenceMutation) Day() (r string, exists bool) {
	v := m.day
	if v == nil {
		return
	}
	return *v, true
}

// OldDay returns the old "day" field's value of the TimePreference entity.
// If the TimePreference object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TimePreferenceMutation) OldDay(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDay is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDay requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDay: %w", err)
	}
	return oldValue.Day, nil
}

// ResetDay resets all changes to the "day" field.
func (m *TimePreferenceMutation) ResetDay() {
	m.day = nil
}

// AddSkillIDs adds the "skills" edge to the Skill entity by ids.
func (m *TimePreferenceMutation) AddSkillIDs(ids ...int) {
	if m.skills == nil {
		m.skills = make(map[int]struct{})
	}
	for i := range ids {
		m.skills[ids[i]] = struct{}{}
	}
}

// ClearSkills clears the "skills" edge to the Skill entity.
func (m *TimePreferenceMutation) ClearSkills() {
	m.clearedskills = true
}

// SkillsCleared reports if the "skills" edge to the Skill entity was cleared.
func (m *TimePreferenceMutation) SkillsCleared() bool {
	return m.clearedskills
}

// RemoveSkillIDs removes the "skills" edge to the Skill entity by IDs.
func (m *TimePreferenceMutation) RemoveSkillIDs(ids ...int) {
	if m.removedskills == nil {
		m.removedskills = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.skills, ids[i])
		m.removedskills[ids[i]] = struct{}{}
	}
}

// RemovedSkills returns the removed IDs of the "skills" edge to the Skill entity.
func (m *TimePreferenceMutation) RemovedSkillsIDs() (ids []int) {
	for id := range m.removedskills {
		ids = append(ids, id)
	}
	return
}

// SkillsIDs returns the "skills" edge IDs in the mutation.
func (m *TimePreferenceMutation) SkillsIDs() (ids []int) {
	for id := range m.skills {
		ids = append(ids, id)
	}
	return
}

// ResetSkills resets all changes to the "skills" edge.
func (m *TimePreferenceMutation) ResetSkills() {
	m.skills = nil
	m.clearedskills = false
	m.removedskills = nil
}

// AddTaskIDs adds the "tasks" edge to the Task entity by ids.
func (m *TimePreferenceMutation) AddTaskIDs(ids ...int) {
	if m.tasks == nil {
		m.tasks = make(map[int]struct{})
	}
	for i := range ids {
		m.tasks[ids[i]] = struct{}{}
	}
}

// ClearTasks clears the "tasks" edge to the Task entity.
func (m *TimePreferenceMutation) ClearTasks() {
	m.clearedtasks = true
}

// TasksCleared reports if the "tasks" edge to the Task entity was cleared.
func (m *TimePreferenceMutation) TasksCleared() bool {
	return m.clearedtasks
}

// RemoveTaskIDs removes the "tasks" edge to the Task entity by IDs.
func (m *TimePreferenceMutation) RemoveTaskIDs(ids ...int) {
	if m.removedtasks == nil {
		m.removedtasks = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.tasks, ids[i])
		m.removedtasks[ids[i]] = struct{}{}
	}
}

// RemovedTasks returns the removed IDs of the "tasks" edge to the Task entity.
func (m *TimePreferenceMutation) RemovedTasksIDs() (ids []int) {
	for id := range m.removedtasks {
		ids = append(ids, id)
	}
	return
}

// TasksIDs returns the "tasks" edge IDs in the mutation.
func (m *TimePreferenceMutation) TasksIDs() (ids []int) {
	for id := range m.tasks {
		ids = append(ids, id)
	}
	return
}

// ResetTasks resets all changes to the "tasks" edge.
func (m *TimePreferenceMutation) ResetTasks() {
	m.tasks = nil
	m.clearedtasks = false
	m.removedtasks = nil
}

// Where appends a list predicates to the TimePreferenceMutation builder.
func (m *TimePreferenceMutation) Where(ps ...predicate.TimePreference) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TimePreferenceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TimePreferenceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.TimePreference, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TimePreferenceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TimePreferenceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (TimePreference).
func (m *TimePreferenceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TimePreferenceMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.day != nil {
		fields = append(fields, timepreference.FieldDay)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TimePreferenceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case timepreference.FieldDay:
		return m.Day()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TimePreferenceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case timepreference.FieldDay:
		return m.OldDay(ctx)
	}
	return nil, fmt.Errorf("unknown TimePreference field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TimePreferenceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case timepreference.FieldDay:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDay(v)
		return nil
	}
	return fmt.Errorf("unknown TimePreference field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TimePreferenceMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TimePreferenceMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TimePreferenceMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown TimePreference numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TimePreferenceMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TimePreferenceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TimePreferenceMutation) ClearField(name string) error {
	return fmt.Errorf("unknown TimePreference nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TimePreferenceMutation) ResetField(name string) error {
	switch name {
	case timepreference.FieldDay:
		m.ResetDay()
		return nil
	}
	return fmt.Errorf("unknown TimePreference field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TimePreferenceMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.skills != nil {
		edges = append(edges, timepreference.EdgeSkills)
	}
	if m.tasks != nil {
		edges = append(edges, timepreference.EdgeTasks)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TimePreferenceMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case timepreference.EdgeSkills:
		ids := make([]ent.Value, 0, len(m.skills))
		for id := range m.skills {
			ids = append(ids, id)
		}
		return ids
	case timepreference.EdgeTasks:
		ids := make([]ent.Value, 0, len(m.tasks))
		for id := range m.tasks {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TimePreferenceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedskills != nil {
		edges = append(edges, timepreference.EdgeSkills)
	}
	if m.removedtasks != nil {
		edges = append(edges, timepreference.EdgeTasks)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TimePreferenceMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case timepreference.EdgeSkills:
		ids := make([]ent.Value, 0, len(m.removedskills))
		for id := range m.removedskills {
			ids = append(ids, id)
		}
		return ids
	case timepreference.EdgeTasks:
		ids := make([]ent.Value, 0, len(m.removedtasks))
		for id := range m.removedtasks {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TimePreferenceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedskills {
		edges = append(edges, timepreference.EdgeSkills)
	}
	if m.clearedtasks {
		edges = append(edges, timepreference.EdgeTasks)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TimePreferenceMutation) EdgeCleared(name string) bool {
	switch name {
	case timepreference.EdgeSkills:
		return m.clearedskills
	case timepreference.EdgeTasks:
		return m.clearedtasks
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TimePreferenceMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown TimePreference unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TimePreferenceMutation) ResetEdge(name string) error {
	switch name {
	case timepreference.EdgeSkills:
		m.ResetSkills()
		return nil
	case timepreference.EdgeTasks:
		m.ResetTasks()
		return nil
	}
	return fmt.Errorf("unknown TimePreference edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                Op
	typ               string
	id                *int
	name              *string
	email_address     *string
	password          *string
	created_at        *time.Time
	uuid              *uuid.UUID
	premium           *bool
	clearedFields     map[string]struct{}
	skills            map[int]struct{}
	removedskills     map[int]struct{}
	clearedskills     bool
	calendars         map[int]struct{}
	removedcalendars  map[int]struct{}
	clearedcalendars  bool
	tasks             map[int]struct{}
	removedtasks      map[int]struct{}
	clearedtasks      bool
	meetings          map[int]struct{}
	removedmeetings   map[int]struct{}
	clearedmeetings   bool
	hobbies           map[int]struct{}
	removedhobbies    map[int]struct{}
	clearedhobbies    bool
	goals             map[int]struct{}
	removedgoals      map[int]struct{}
	clearedgoals      bool
	categories        map[int]struct{}
	removedcategories map[int]struct{}
	clearedcategories bool
	preference        *int
	clearedpreference bool
	done              bool
	oldValue          func(context.Context) (*User, error)
	predicates        []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetEmailAddress sets the "email_address" field.
func (m *UserMutation) SetEmailAddress(s string) {
	m.email_address = &s
}

// EmailAddress returns the value of the "email_address" field in the mutation.
func (m *UserMutation) EmailAddress() (r string, exists bool) {
	v := m.email_address
	if v == nil {
		return
	}
	return *v, true
}

// OldEmailAddress returns the old "email_address" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmailAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmailAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmailAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmailAddress: %w", err)
	}
	return oldValue.EmailAddress, nil
}

// ResetEmailAddress resets all changes to the "email_address" field.
func (m *UserMutation) ResetEmailAddress() {
	m.email_address = nil
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUUID sets the "uuid" field.
func (m *UserMutation) SetUUID(u uuid.UUID) {
	m.uuid = &u
}

// UUID returns the value of the "uuid" field in the mutation.
func (m *UserMutation) UUID() (r uuid.UUID, exists bool) {
	v := m.uuid
	if v == nil {
		return
	}
	return *v, true
}

// OldUUID returns the old "uuid" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUUID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUUID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUUID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUUID: %w", err)
	}
	return oldValue.UUID, nil
}

// ResetUUID resets all changes to the "uuid" field.
func (m *UserMutation) ResetUUID() {
	m.uuid = nil
}

// SetPremium sets the "premium" field.
func (m *UserMutation) SetPremium(b bool) {
	m.premium = &b
}

// Premium returns the value of the "premium" field in the mutation.
func (m *UserMutation) Premium() (r bool, exists bool) {
	v := m.premium
	if v == nil {
		return
	}
	return *v, true
}

// OldPremium returns the old "premium" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPremium(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPremium is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPremium requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPremium: %w", err)
	}
	return oldValue.Premium, nil
}

// ResetPremium resets all changes to the "premium" field.
func (m *UserMutation) ResetPremium() {
	m.premium = nil
}

// AddSkillIDs adds the "skills" edge to the Skill entity by ids.
func (m *UserMutation) AddSkillIDs(ids ...int) {
	if m.skills == nil {
		m.skills = make(map[int]struct{})
	}
	for i := range ids {
		m.skills[ids[i]] = struct{}{}
	}
}

// ClearSkills clears the "skills" edge to the Skill entity.
func (m *UserMutation) ClearSkills() {
	m.clearedskills = true
}

// SkillsCleared reports if the "skills" edge to the Skill entity was cleared.
func (m *UserMutation) SkillsCleared() bool {
	return m.clearedskills
}

// RemoveSkillIDs removes the "skills" edge to the Skill entity by IDs.
func (m *UserMutation) RemoveSkillIDs(ids ...int) {
	if m.removedskills == nil {
		m.removedskills = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.skills, ids[i])
		m.removedskills[ids[i]] = struct{}{}
	}
}

// RemovedSkills returns the removed IDs of the "skills" edge to the Skill entity.
func (m *UserMutation) RemovedSkillsIDs() (ids []int) {
	for id := range m.removedskills {
		ids = append(ids, id)
	}
	return
}

// SkillsIDs returns the "skills" edge IDs in the mutation.
func (m *UserMutation) SkillsIDs() (ids []int) {
	for id := range m.skills {
		ids = append(ids, id)
	}
	return
}

// ResetSkills resets all changes to the "skills" edge.
func (m *UserMutation) ResetSkills() {
	m.skills = nil
	m.clearedskills = false
	m.removedskills = nil
}

// AddCalendarIDs adds the "calendars" edge to the Calendar entity by ids.
func (m *UserMutation) AddCalendarIDs(ids ...int) {
	if m.calendars == nil {
		m.calendars = make(map[int]struct{})
	}
	for i := range ids {
		m.calendars[ids[i]] = struct{}{}
	}
}

// ClearCalendars clears the "calendars" edge to the Calendar entity.
func (m *UserMutation) ClearCalendars() {
	m.clearedcalendars = true
}

// CalendarsCleared reports if the "calendars" edge to the Calendar entity was cleared.
func (m *UserMutation) CalendarsCleared() bool {
	return m.clearedcalendars
}

// RemoveCalendarIDs removes the "calendars" edge to the Calendar entity by IDs.
func (m *UserMutation) RemoveCalendarIDs(ids ...int) {
	if m.removedcalendars == nil {
		m.removedcalendars = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.calendars, ids[i])
		m.removedcalendars[ids[i]] = struct{}{}
	}
}

// RemovedCalendars returns the removed IDs of the "calendars" edge to the Calendar entity.
func (m *UserMutation) RemovedCalendarsIDs() (ids []int) {
	for id := range m.removedcalendars {
		ids = append(ids, id)
	}
	return
}

// CalendarsIDs returns the "calendars" edge IDs in the mutation.
func (m *UserMutation) CalendarsIDs() (ids []int) {
	for id := range m.calendars {
		ids = append(ids, id)
	}
	return
}

// ResetCalendars resets all changes to the "calendars" edge.
func (m *UserMutation) ResetCalendars() {
	m.calendars = nil
	m.clearedcalendars = false
	m.removedcalendars = nil
}

// AddTaskIDs adds the "tasks" edge to the Task entity by ids.
func (m *UserMutation) AddTaskIDs(ids ...int) {
	if m.tasks == nil {
		m.tasks = make(map[int]struct{})
	}
	for i := range ids {
		m.tasks[ids[i]] = struct{}{}
	}
}

// ClearTasks clears the "tasks" edge to the Task entity.
func (m *UserMutation) ClearTasks() {
	m.clearedtasks = true
}

// TasksCleared reports if the "tasks" edge to the Task entity was cleared.
func (m *UserMutation) TasksCleared() bool {
	return m.clearedtasks
}

// RemoveTaskIDs removes the "tasks" edge to the Task entity by IDs.
func (m *UserMutation) RemoveTaskIDs(ids ...int) {
	if m.removedtasks == nil {
		m.removedtasks = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.tasks, ids[i])
		m.removedtasks[ids[i]] = struct{}{}
	}
}

// RemovedTasks returns the removed IDs of the "tasks" edge to the Task entity.
func (m *UserMutation) RemovedTasksIDs() (ids []int) {
	for id := range m.removedtasks {
		ids = append(ids, id)
	}
	return
}

// TasksIDs returns the "tasks" edge IDs in the mutation.
func (m *UserMutation) TasksIDs() (ids []int) {
	for id := range m.tasks {
		ids = append(ids, id)
	}
	return
}

// ResetTasks resets all changes to the "tasks" edge.
func (m *UserMutation) ResetTasks() {
	m.tasks = nil
	m.clearedtasks = false
	m.removedtasks = nil
}

// AddMeetingIDs adds the "meetings" edge to the Meeting entity by ids.
func (m *UserMutation) AddMeetingIDs(ids ...int) {
	if m.meetings == nil {
		m.meetings = make(map[int]struct{})
	}
	for i := range ids {
		m.meetings[ids[i]] = struct{}{}
	}
}

// ClearMeetings clears the "meetings" edge to the Meeting entity.
func (m *UserMutation) ClearMeetings() {
	m.clearedmeetings = true
}

// MeetingsCleared reports if the "meetings" edge to the Meeting entity was cleared.
func (m *UserMutation) MeetingsCleared() bool {
	return m.clearedmeetings
}

// RemoveMeetingIDs removes the "meetings" edge to the Meeting entity by IDs.
func (m *UserMutation) RemoveMeetingIDs(ids ...int) {
	if m.removedmeetings == nil {
		m.removedmeetings = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.meetings, ids[i])
		m.removedmeetings[ids[i]] = struct{}{}
	}
}

// RemovedMeetings returns the removed IDs of the "meetings" edge to the Meeting entity.
func (m *UserMutation) RemovedMeetingsIDs() (ids []int) {
	for id := range m.removedmeetings {
		ids = append(ids, id)
	}
	return
}

// MeetingsIDs returns the "meetings" edge IDs in the mutation.
func (m *UserMutation) MeetingsIDs() (ids []int) {
	for id := range m.meetings {
		ids = append(ids, id)
	}
	return
}

// ResetMeetings resets all changes to the "meetings" edge.
func (m *UserMutation) ResetMeetings() {
	m.meetings = nil
	m.clearedmeetings = false
	m.removedmeetings = nil
}

// AddHobbyIDs adds the "hobbies" edge to the Hobby entity by ids.
func (m *UserMutation) AddHobbyIDs(ids ...int) {
	if m.hobbies == nil {
		m.hobbies = make(map[int]struct{})
	}
	for i := range ids {
		m.hobbies[ids[i]] = struct{}{}
	}
}

// ClearHobbies clears the "hobbies" edge to the Hobby entity.
func (m *UserMutation) ClearHobbies() {
	m.clearedhobbies = true
}

// HobbiesCleared reports if the "hobbies" edge to the Hobby entity was cleared.
func (m *UserMutation) HobbiesCleared() bool {
	return m.clearedhobbies
}

// RemoveHobbyIDs removes the "hobbies" edge to the Hobby entity by IDs.
func (m *UserMutation) RemoveHobbyIDs(ids ...int) {
	if m.removedhobbies == nil {
		m.removedhobbies = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.hobbies, ids[i])
		m.removedhobbies[ids[i]] = struct{}{}
	}
}

// RemovedHobbies returns the removed IDs of the "hobbies" edge to the Hobby entity.
func (m *UserMutation) RemovedHobbiesIDs() (ids []int) {
	for id := range m.removedhobbies {
		ids = append(ids, id)
	}
	return
}

// HobbiesIDs returns the "hobbies" edge IDs in the mutation.
func (m *UserMutation) HobbiesIDs() (ids []int) {
	for id := range m.hobbies {
		ids = append(ids, id)
	}
	return
}

// ResetHobbies resets all changes to the "hobbies" edge.
func (m *UserMutation) ResetHobbies() {
	m.hobbies = nil
	m.clearedhobbies = false
	m.removedhobbies = nil
}

// AddGoalIDs adds the "goals" edge to the Goal entity by ids.
func (m *UserMutation) AddGoalIDs(ids ...int) {
	if m.goals == nil {
		m.goals = make(map[int]struct{})
	}
	for i := range ids {
		m.goals[ids[i]] = struct{}{}
	}
}

// ClearGoals clears the "goals" edge to the Goal entity.
func (m *UserMutation) ClearGoals() {
	m.clearedgoals = true
}

// GoalsCleared reports if the "goals" edge to the Goal entity was cleared.
func (m *UserMutation) GoalsCleared() bool {
	return m.clearedgoals
}

// RemoveGoalIDs removes the "goals" edge to the Goal entity by IDs.
func (m *UserMutation) RemoveGoalIDs(ids ...int) {
	if m.removedgoals == nil {
		m.removedgoals = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.goals, ids[i])
		m.removedgoals[ids[i]] = struct{}{}
	}
}

// RemovedGoals returns the removed IDs of the "goals" edge to the Goal entity.
func (m *UserMutation) RemovedGoalsIDs() (ids []int) {
	for id := range m.removedgoals {
		ids = append(ids, id)
	}
	return
}

// GoalsIDs returns the "goals" edge IDs in the mutation.
func (m *UserMutation) GoalsIDs() (ids []int) {
	for id := range m.goals {
		ids = append(ids, id)
	}
	return
}

// ResetGoals resets all changes to the "goals" edge.
func (m *UserMutation) ResetGoals() {
	m.goals = nil
	m.clearedgoals = false
	m.removedgoals = nil
}

// AddCategoryIDs adds the "categories" edge to the Category entity by ids.
func (m *UserMutation) AddCategoryIDs(ids ...int) {
	if m.categories == nil {
		m.categories = make(map[int]struct{})
	}
	for i := range ids {
		m.categories[ids[i]] = struct{}{}
	}
}

// ClearCategories clears the "categories" edge to the Category entity.
func (m *UserMutation) ClearCategories() {
	m.clearedcategories = true
}

// CategoriesCleared reports if the "categories" edge to the Category entity was cleared.
func (m *UserMutation) CategoriesCleared() bool {
	return m.clearedcategories
}

// RemoveCategoryIDs removes the "categories" edge to the Category entity by IDs.
func (m *UserMutation) RemoveCategoryIDs(ids ...int) {
	if m.removedcategories == nil {
		m.removedcategories = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.categories, ids[i])
		m.removedcategories[ids[i]] = struct{}{}
	}
}

// RemovedCategories returns the removed IDs of the "categories" edge to the Category entity.
func (m *UserMutation) RemovedCategoriesIDs() (ids []int) {
	for id := range m.removedcategories {
		ids = append(ids, id)
	}
	return
}

// CategoriesIDs returns the "categories" edge IDs in the mutation.
func (m *UserMutation) CategoriesIDs() (ids []int) {
	for id := range m.categories {
		ids = append(ids, id)
	}
	return
}

// ResetCategories resets all changes to the "categories" edge.
func (m *UserMutation) ResetCategories() {
	m.categories = nil
	m.clearedcategories = false
	m.removedcategories = nil
}

// SetPreferenceID sets the "preference" edge to the Preference entity by id.
func (m *UserMutation) SetPreferenceID(id int) {
	m.preference = &id
}

// ClearPreference clears the "preference" edge to the Preference entity.
func (m *UserMutation) ClearPreference() {
	m.clearedpreference = true
}

// PreferenceCleared reports if the "preference" edge to the Preference entity was cleared.
func (m *UserMutation) PreferenceCleared() bool {
	return m.clearedpreference
}

// PreferenceID returns the "preference" edge ID in the mutation.
func (m *UserMutation) PreferenceID() (id int, exists bool) {
	if m.preference != nil {
		return *m.preference, true
	}
	return
}

// PreferenceIDs returns the "preference" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PreferenceID instead. It exists only for internal usage by the builders.
func (m *UserMutation) PreferenceIDs() (ids []int) {
	if id := m.preference; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPreference resets all changes to the "preference" edge.
func (m *UserMutation) ResetPreference() {
	m.preference = nil
	m.clearedpreference = false
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.email_address != nil {
		fields = append(fields, user.FieldEmailAddress)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.uuid != nil {
		fields = append(fields, user.FieldUUID)
	}
	if m.premium != nil {
		fields = append(fields, user.FieldPremium)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldName:
		return m.Name()
	case user.FieldEmailAddress:
		return m.EmailAddress()
	case user.FieldPassword:
		return m.Password()
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldUUID:
		return m.UUID()
	case user.FieldPremium:
		return m.Premium()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldEmailAddress:
		return m.OldEmailAddress(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case user.FieldUUID:
		return m.OldUUID(ctx)
	case user.FieldPremium:
		return m.OldPremium(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldEmailAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmailAddress(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldUUID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUUID(v)
		return nil
	case user.FieldPremium:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPremium(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldEmailAddress:
		m.ResetEmailAddress()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldUUID:
		m.ResetUUID()
		return nil
	case user.FieldPremium:
		m.ResetPremium()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 8)
	if m.skills != nil {
		edges = append(edges, user.EdgeSkills)
	}
	if m.calendars != nil {
		edges = append(edges, user.EdgeCalendars)
	}
	if m.tasks != nil {
		edges = append(edges, user.EdgeTasks)
	}
	if m.meetings != nil {
		edges = append(edges, user.EdgeMeetings)
	}
	if m.hobbies != nil {
		edges = append(edges, user.EdgeHobbies)
	}
	if m.goals != nil {
		edges = append(edges, user.EdgeGoals)
	}
	if m.categories != nil {
		edges = append(edges, user.EdgeCategories)
	}
	if m.preference != nil {
		edges = append(edges, user.EdgePreference)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeSkills:
		ids := make([]ent.Value, 0, len(m.skills))
		for id := range m.skills {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeCalendars:
		ids := make([]ent.Value, 0, len(m.calendars))
		for id := range m.calendars {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeTasks:
		ids := make([]ent.Value, 0, len(m.tasks))
		for id := range m.tasks {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeMeetings:
		ids := make([]ent.Value, 0, len(m.meetings))
		for id := range m.meetings {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeHobbies:
		ids := make([]ent.Value, 0, len(m.hobbies))
		for id := range m.hobbies {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeGoals:
		ids := make([]ent.Value, 0, len(m.goals))
		for id := range m.goals {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeCategories:
		ids := make([]ent.Value, 0, len(m.categories))
		for id := range m.categories {
			ids = append(ids, id)
		}
		return ids
	case user.EdgePreference:
		if id := m.preference; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 8)
	if m.removedskills != nil {
		edges = append(edges, user.EdgeSkills)
	}
	if m.removedcalendars != nil {
		edges = append(edges, user.EdgeCalendars)
	}
	if m.removedtasks != nil {
		edges = append(edges, user.EdgeTasks)
	}
	if m.removedmeetings != nil {
		edges = append(edges, user.EdgeMeetings)
	}
	if m.removedhobbies != nil {
		edges = append(edges, user.EdgeHobbies)
	}
	if m.removedgoals != nil {
		edges = append(edges, user.EdgeGoals)
	}
	if m.removedcategories != nil {
		edges = append(edges, user.EdgeCategories)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeSkills:
		ids := make([]ent.Value, 0, len(m.removedskills))
		for id := range m.removedskills {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeCalendars:
		ids := make([]ent.Value, 0, len(m.removedcalendars))
		for id := range m.removedcalendars {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeTasks:
		ids := make([]ent.Value, 0, len(m.removedtasks))
		for id := range m.removedtasks {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeMeetings:
		ids := make([]ent.Value, 0, len(m.removedmeetings))
		for id := range m.removedmeetings {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeHobbies:
		ids := make([]ent.Value, 0, len(m.removedhobbies))
		for id := range m.removedhobbies {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeGoals:
		ids := make([]ent.Value, 0, len(m.removedgoals))
		for id := range m.removedgoals {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeCategories:
		ids := make([]ent.Value, 0, len(m.removedcategories))
		for id := range m.removedcategories {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 8)
	if m.clearedskills {
		edges = append(edges, user.EdgeSkills)
	}
	if m.clearedcalendars {
		edges = append(edges, user.EdgeCalendars)
	}
	if m.clearedtasks {
		edges = append(edges, user.EdgeTasks)
	}
	if m.clearedmeetings {
		edges = append(edges, user.EdgeMeetings)
	}
	if m.clearedhobbies {
		edges = append(edges, user.EdgeHobbies)
	}
	if m.clearedgoals {
		edges = append(edges, user.EdgeGoals)
	}
	if m.clearedcategories {
		edges = append(edges, user.EdgeCategories)
	}
	if m.clearedpreference {
		edges = append(edges, user.EdgePreference)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeSkills:
		return m.clearedskills
	case user.EdgeCalendars:
		return m.clearedcalendars
	case user.EdgeTasks:
		return m.clearedtasks
	case user.EdgeMeetings:
		return m.clearedmeetings
	case user.EdgeHobbies:
		return m.clearedhobbies
	case user.EdgeGoals:
		return m.clearedgoals
	case user.EdgeCategories:
		return m.clearedcategories
	case user.EdgePreference:
		return m.clearedpreference
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	case user.EdgePreference:
		m.ClearPreference()
		return nil
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeSkills:
		m.ResetSkills()
		return nil
	case user.EdgeCalendars:
		m.ResetCalendars()
		return nil
	case user.EdgeTasks:
		m.ResetTasks()
		return nil
	case user.EdgeMeetings:
		m.ResetMeetings()
		return nil
	case user.EdgeHobbies:
		m.ResetHobbies()
		return nil
	case user.EdgeGoals:
		m.ResetGoals()
		return nil
	case user.EdgeCategories:
		m.ResetCategories()
		return nil
	case user.EdgePreference:
		m.ResetPreference()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
